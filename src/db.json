{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/assets/images/favicon.jpg","path":"assets/images/favicon.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/tranquilpeak/.DS_Store","hash":"15a762a23044e64ae66f270e4aed0dd9f5f921ec","modified":1588550742616},{"_id":"themes/tranquilpeak/.gitignore","hash":"90f15ccac21292ee1f8825006ed2ab1a3158a9c2","modified":1588550742617},{"_id":"themes/tranquilpeak/.eslintignore","hash":"5ae924d312cebbc073d3b73731241b3af6b203fc","modified":1588550742616},{"_id":"themes/tranquilpeak/.bowerrc","hash":"ec9134021efc0ffa8d5ab355d117d82eb67b392f","modified":1588550742616},{"_id":"themes/tranquilpeak/Gruntfile.js","hash":"b2b078651cf8c5dcde2e847169ce242ad3319ca3","modified":1588550742617},{"_id":"themes/tranquilpeak/README.md","hash":"761ca7e21c14b94a1da979cf425d4543361eb4ee","modified":1588550742617},{"_id":"themes/tranquilpeak/.eslintrc","hash":"8c195ed1a1f0751e493f899e4fd0880b41fa01c6","modified":1588550742616},{"_id":"themes/tranquilpeak/LICENSE","hash":"7a3b30ddb56760b35a6b7cd210aeb271cd292b60","modified":1588550742617},{"_id":"themes/tranquilpeak/bower.json","hash":"c388c02af8dd50e981c259f8fd45d678c800c4e0","modified":1588550742618},{"_id":"themes/tranquilpeak/_config.yml","hash":"0e858aacdfc5ca5ab0cfb4c1b855134f6d8cfa6d","modified":1588550742618},{"_id":"themes/tranquilpeak/package.json","hash":"4f3a1a090a5c188d64aa96e2617d389f99d4ca5e","modified":1588550742625},{"_id":"source/_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata.md","hash":"3400addd205f853a8e724ad2bced147076466552","modified":1588550742572},{"_id":"source/all-archives/index.md","hash":"634c7e0b6841e3cdbb53b62fc5db80e1ad3a69f2","modified":1588550742586},{"_id":"source/_posts/Angular-4-Custom-Bootstrapping-Lazy-Bind-to-Designated-Container.md","hash":"4e5c18e35bbbab1f410459f8815b709a4ead0331","modified":1588550742573},{"_id":"source/_posts/Building-Linux-Workspace-on-Windows-10-via-WSL.md","hash":"95b369bd7ea2594276a7e7889923dd55f5ad681a","modified":1588550742574},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO.md","hash":"4f482ecaa2ec0bff5455786ae3f2d645d2af5ff1","modified":1588550742575},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul.md","hash":"b2c5c7ab0c703714ab47fb5664ec3d96817d9ac8","modified":1588550742576},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray.md","hash":"e075bbea730a456f428aa9caf5461266c4b1f824","modified":1588550742579},{"_id":"source/_posts/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world.md","hash":"4f268134218ec3c653087804660a71e8e4d03eb4","modified":1588550742583},{"_id":"source/_posts/Workflow-Processing-Engine-Overview-2018-Airflow-vs-Azkaban-vs-Conductor-vs-Oozie-vs-Amazon-Step-Functions.md","hash":"4c66735a34da0939f88c506d7b1352b2a84a4423","modified":1588550742585},{"_id":"source/_posts/You-Don-t-Know-JS-Equal-or-Not-Equal.md","hash":"93327f57cc5361683bb4f574b839d9b29c44f790","modified":1588550742585},{"_id":"source/all-categories/index.md","hash":"3d47d4e31035e3c8d960730f36bd3ad27f88e9be","modified":1588550742586},{"_id":"source/_posts/get-started-with-hexo-blogging-system.md","hash":"ff2b1d61c87d06f5c1a27cd65ab54dbe66df5976","modified":1588550742585},{"_id":"source/_posts/You-Don-t-Know-JS-Eval.md","hash":"7c662af494adc0555a9710fa0073a2b519008baf","modified":1588550742585},{"_id":"source/all-tags/index.md","hash":"a9092fa374dd3f5b8b5c72f02fa0b128309f91ed","modified":1588550742586},{"_id":"themes/tranquilpeak/.github/CONTRIBUTING.md","hash":"95401403b0b8973b73a1a461024506c8f1f61be2","modified":1588550742616},{"_id":"themes/tranquilpeak/.github/ISSUE_TEMPLATE.md","hash":"655f8395a4a1be8f5e7d798445e8f004349e43ca","modified":1588550742617},{"_id":"themes/tranquilpeak/.github/PULL_REQUEST_TEMPLATE.md","hash":"733418cf1eb27fd88f5e25c74e8cac759cf46f2e","modified":1588550742617},{"_id":"themes/tranquilpeak/docs/developer.md","hash":"484551811ae12c72a5b6d1f7552125a76e280fb7","modified":1588550742618},{"_id":"themes/tranquilpeak/docs/user.md","hash":"bad67e584cd2a0f1ed86c7ad020a47cb194cf919","modified":1588550742618},{"_id":"themes/tranquilpeak/languages/en.yml","hash":"fa6dbd66c01205db30f0c291341985690776c465","modified":1588550742618},{"_id":"themes/tranquilpeak/languages/es.yml","hash":"024b71430c8df1377de0128e8dbf0a7dcd88e906","modified":1588550742618},{"_id":"themes/tranquilpeak/languages/fr-FR.yml","hash":"b68be8ca6e8dac2304be173e91ed18af0e2d9f87","modified":1588550742619},{"_id":"themes/tranquilpeak/languages/ja.yml","hash":"dc6969ee508efdd408f0ad7d765029787796f7ee","modified":1588550742619},{"_id":"themes/tranquilpeak/languages/pt-br.yml","hash":"4e90a7b0fc3e74a48c9996382ce21b04bc3937cd","modified":1588550742619},{"_id":"themes/tranquilpeak/languages/ru.yml","hash":"f503bb8cb07d5b227202ef9475e7d209880c7771","modified":1588550742619},{"_id":"themes/tranquilpeak/languages/zh-tw.yml","hash":"c1a73bf4f2731296d8ead0f865107ef5b1476ea9","modified":1588550742619},{"_id":"themes/tranquilpeak/languages/zh-cn.yml","hash":"a0ee166907f5ba2a1c45f1b436b27ae3ba07fdcf","modified":1588550742619},{"_id":"themes/tranquilpeak/layout/.DS_Store","hash":"f974cae9a849af47860a55f230b75fd7e32fbd8c","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/all-archives.ejs","hash":"74b03a0a995f0b315fc92fc364a03e169d3b8066","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/archive.ejs","hash":"0df1edf4ed40b316715ef1949b09aa9c98d22359","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/all-tags.ejs","hash":"261d3b2974091d726d023277c853b2b4e5a24cfe","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/category.ejs","hash":"67902c418e299399133fe2a7ebc39cadd17de861","modified":1588550742624},{"_id":"themes/tranquilpeak/layout/index.ejs","hash":"36e89b37f520533bef85fb32b714214257fad1d0","modified":1588550742624},{"_id":"themes/tranquilpeak/layout/all-categories.ejs","hash":"cdc327fd317819aaf6198c577c52f1821f2ee283","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/layout.ejs","hash":"84d8f23e44c45cc13bd0ec44f41fea6c9fd146da","modified":1588550742624},{"_id":"themes/tranquilpeak/layout/page.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1588550742624},{"_id":"themes/tranquilpeak/layout/post.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1588550742624},{"_id":"themes/tranquilpeak/scripts/.DS_Store","hash":"cafaaccd1ff02220155ab38771defc34a26d72a0","modified":1588550742625},{"_id":"themes/tranquilpeak/layout/tag.ejs","hash":"72bff1ae241fbe2ddca0537e8ed77c791a7d1766","modified":1588550742624},{"_id":"themes/tranquilpeak/scripts/.eslintrc.json","hash":"4cd7451f0bc15440bc8147912c63a11acd0e280f","modified":1588550742625},{"_id":"themes/tranquilpeak/source/.DS_Store","hash":"413ca7b8c67b6300ad1f1bf5354fa4881bfe2788","modified":1588550742627},{"_id":"themes/tranquilpeak/tasks/pipeline.js","hash":"22c29f34e8d8dbc1f68f45cf4adb4851862a2de8","modified":1588550742644},{"_id":"themes/tranquilpeak/package-lock.json","hash":"25fa7bbcc40df609501ef7ff99478d42306d013c","modified":1588550742624},{"_id":"themes/tranquilpeak/source/_fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1588550742636},{"_id":"source/_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/example2.png","hash":"3e7d3e5e8a5040c4049f2bb39967a28d4a8bc2c2","modified":1588550742572},{"_id":"source/_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/sm.png","hash":"3ace0afce14335dad540b26c2f1066db41d0c9ca","modified":1588550742572},{"_id":"source/_posts/Building-Linux-Workspace-on-Windows-10-via-WSL/WSL.png","hash":"410f4bcbff3af97ae775ec3fd681b3d16d748473","modified":1588550742574},{"_id":"source/_posts/Building-Linux-Workspace-on-Windows-10-via-WSL/title.png","hash":"340a6d9c7bb6d45ec73cf4cb8df358cc4d0a1971","modified":1588550742574},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/mmap.png","hash":"2072f0ec0937bc3e140f8d53aeeeb86c91293658","modified":1588550742575},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/non_zero_copy.png","hash":"727faecc1738291c60c4edfc857f20038ccf16e8","modified":1588550742575},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/scattergather.png","hash":"2d9cceb8ecc60e6c95bc7866e9fdc45ba90b212d","modified":1588550742575},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/zero_copy.png","hash":"b4e91d0123265db5d08a63e5219a510787a0e583","modified":1588550742575},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/slowspeed.png","hash":"27641cd0bfbcd9f15f50acc7f83a26c6b8be5c7e","modified":1588550742576},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/RBK20.png","hash":"ba685949c5be97a1a3b44d740bdcca5770ed2b53","modified":1588550742576},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/speed.png","hash":"aec84c6fcf8764f264106ae31a7d1c9c5c4f8640","modified":1588550742577},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/telnet.png","hash":"83325fdd1fe9ca986a8b1a798585d0430e6fdf19","modified":1588550742578},{"_id":"source/assets/images/favicon.jpg","hash":"ed95ea56e130cfa08bb037abda44f7ca180971da","modified":1588550742591},{"_id":"themes/tranquilpeak/layout/_partial/about.ejs","hash":"b555a8898b1b4bfab1a1017cc7038618f16ffa22","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/archive-post.ejs","hash":"024a503be84a6ed184eee600dfcffa5deeaaca5b","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/baidu-analytics.ejs","hash":"736eca2ecf6fdeea032d47c02c51688f006cafb4","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/cover.ejs","hash":"18b9a620fca9b648fd59467a66b3f4fdbba42613","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/archive.ejs","hash":"bdd73d1f70bd91533863943f940f8193d44e0fdd","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/google-analytics.ejs","hash":"32b08ea4fed728a0dc403bbd0311d13570c25cf5","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/header.ejs","hash":"9439c8d94771744303174475706137ceac69e3c4","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/footer.ejs","hash":"67962257d9e3cb6a4d56e3f0263f192ba9a413dd","modified":1588550742620},{"_id":"themes/tranquilpeak/layout/_partial/head.ejs","hash":"30bb8344b8f99f2f57a2230932fa4b792f65cd52","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/index.ejs","hash":"9f4fa8562ed7a0a19a79cc576f91a62e66a937a8","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/pagination.ejs","hash":"5386a784764731f9b36de5bef97b70179bad5095","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/post.ejs","hash":"a280b2660101e15e2ec8aff222d3a39cb8bf4389","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/script.ejs","hash":"6212a7efd3733b37793d360e3b502783bb8aafbe","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/_partial/sidebar.ejs","hash":"13429124f5be2dfa811d2cfc6e76f5b12e6b0f84","modified":1588550742623},{"_id":"themes/tranquilpeak/layout/_partial/search.ejs","hash":"6fe94449318b009f7d16d166d375b5a533850d0d","modified":1588550742623},{"_id":"themes/tranquilpeak/scripts/filters/excerpt.js","hash":"5e0e473d46f8c7aac988ebf0b25ab2eab0af73bb","modified":1588550742625},{"_id":"themes/tranquilpeak/scripts/filters/thumbnail_image_url.js","hash":"0ad2d9304c991e2989708bdbfa6a59030ee691d3","modified":1588550742625},{"_id":"themes/tranquilpeak/scripts/helpers/absolute_url.js","hash":"0d520a946b6f0abbac60529017ed3133265aac60","modified":1588550742625},{"_id":"themes/tranquilpeak/scripts/helpers/is_remote_url.js","hash":"471237ea295bcc9a392a5bb6738ef4c6ab673afb","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/helpers/resolve_asset_url.js","hash":"c813e9daaed374b386b91876923f10c0cf1d624c","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/migrators/1.4.0.js","hash":"0f04b8cc723002ad5073c1070d1d1d567ca87f41","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/tags/alert.js","hash":"5b86358dd53c9b0d44c385ec12cf9e76383e229a","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/tags/fancybox.js","hash":"55ce02f9ef084f43932eb9b0f10db1d5e9c3a250","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/tags/highlight_text.js","hash":"8e093f21e9a4b10c19be6f300dc90bcc39685ec9","modified":1588550742627},{"_id":"themes/tranquilpeak/scripts/tags/image.js","hash":"214a9d97c7c9b54627101a7a6fbe9739815a85bf","modified":1588550742627},{"_id":"themes/tranquilpeak/scripts/tags/tabbed_codeblock.js","hash":"480e1c58c8e9d99a8a7cfcfd523171139c32e4e6","modified":1588550742627},{"_id":"themes/tranquilpeak/scripts/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1588550742626},{"_id":"themes/tranquilpeak/scripts/tags/wide_image.js","hash":"d3596c62694548a3a684e8dfeb5372038ef6f450","modified":1588550742627},{"_id":"themes/tranquilpeak/source/_css/tranquilpeak.scss","hash":"486dd2235ba54623ca879e2fa17ab893b31d1bb1","modified":1588550742634},{"_id":"themes/tranquilpeak/source/_js/.eslintrc.json","hash":"27d4e7223eee3eca7eb717bea2d28d35714eccbc","modified":1588550742640},{"_id":"themes/tranquilpeak/source/_js/about.js","hash":"2c2e0bf35c8bbaa2b77df593e3425ab5b1ebcf0e","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/categories-filter.js","hash":"a5f3c4b9bbef1c8ec881eb39551060ca95bfbb33","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/codeblock-resizer.js","hash":"391c2c9135579ea50c2060e0612e7105e06a8ff7","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/archives-filter.js","hash":"8b8998b0e67c745a20450001c0739f6977b63309","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/fancybox.js","hash":"31cf6fd9b36bb3cf0936c8f955c9de06ac1623fa","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/header.js","hash":"c274adf8f8010b9f4ba46896063859ae3e413e97","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/image-gallery.js","hash":"90efc47246af69b7e17fab6e0bd1578043fcc2b0","modified":1588550742641},{"_id":"themes/tranquilpeak/source/_js/post-bottom-bar.js","hash":"11502f8c52489350c857b935a1a63f46d7ca5496","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/search-modal.js","hash":"30b4f47b61ae48543f77be63801e3ecc6e411f3a","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/share-options.js","hash":"0939d28321c8b645ea7cf853dcd7f504528911e6","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/smartresize.js","hash":"7342a21f94d7bb0525ccbd917d43a6824d7ae63e","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/tabbed-codeblocks.js","hash":"465a7a60c609a3b2ac182ac164feea2fea00e0ec","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/sidebar.js","hash":"18dc623dd237c519bb79ce93283a5446cc11a487","modified":1588550742642},{"_id":"themes/tranquilpeak/source/_js/tags-filter.js","hash":"d33625df51d7b9788eeea338626f04387c96f053","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/bower.js","hash":"f2e24797660dc66b038b87072a7a59e3c23efc88","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/clean.js","hash":"ea70743eb4ed0d9ead68d6fc8b65b9f936229a00","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/concat.js","hash":"0c2c4dbbfac52f20a3035a2f8cd1c24f1759b17e","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/sails-linker.js","hash":"c1103119ec7d1f04cfbb1cda83b40d11e8f2d218","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/config/exec.js","hash":"33c141cf401fff3d1e251fc48dd2145486ef9465","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/replace.js","hash":"30fbbf51b8b41a70f5e76a335b50565f280f29e0","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/config/cssmin.js","hash":"352185864437728c9c19169f4fec6fc3308e8b6d","modified":1588550742643},{"_id":"themes/tranquilpeak/tasks/config/sass.js","hash":"79d65bad62ca0c2a8a155a76faa2be3b0c361bf0","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/config/uglify.js","hash":"e31cc195decf8676047ac32255f99c0ca9c05f67","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/config/sync.js","hash":"fbc09d0ed201993bc1918223b8f8ad5b68f50490","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/config/watch.js","hash":"933eecd8a2506c627dbb9a1137305a16dd2d9f9a","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/register/buildProd.js","hash":"65842e2c17e4587dcba5880040a6780a48a06c35","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/build.js","hash":"1d95f8cb31f0f1546f0ccdb6d3b35b6d6c5f7af2","modified":1588550742644},{"_id":"themes/tranquilpeak/tasks/register/compileAssets.js","hash":"a65122ba0d1a1b6044e3b635a644882577b628ba","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/default.js","hash":"80174db9b8a729980770e639e70999ce5a816b78","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/linkAssets.js","hash":"079cd274cb29f9984eb7150d88f61819d2ef6235","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/eslint.js","hash":"718cd8a80d060e2587b84e0e20ceaa39c2cc9411","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/linkAssetsProd.js","hash":"d0a1b0252db3fa8904063a592e8e0448a0cee590","modified":1588550742645},{"_id":"themes/tranquilpeak/tasks/register/syncAssets.js","hash":"ba579eae4f7791aad96c4f0a287079da5dc855a7","modified":1588550742645},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/iam.png","hash":"204c08fbf12d283c4693475746b42687f013adda","modified":1588550742580},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/ms-failure.png","hash":"1605814da4df84527228b1c9921e4c6c07e24c88","modified":1588550742581},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/xray.png","hash":"999302021354473cf2b135c0aee1319b68527896","modified":1588550742582},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/tracing.png","hash":"f0f6f4e0dd32f1c4db3610863462c0a211714643","modified":1588550742581},{"_id":"source/_posts/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world/comparison.gif","hash":"e84c1126667d35de343b64b7c0bfff9b01a10022","modified":1588550742585},{"_id":"themes/tranquilpeak/layout/_partial/post/actions.ejs","hash":"597a4a875a5502db88a5bb18285ce178c3e849f1","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/post/category.ejs","hash":"d4b26aa8c66aa8dbfae7a4aafed874745efb2f8e","modified":1588550742621},{"_id":"themes/tranquilpeak/layout/_partial/post/disqus.ejs","hash":"9e0d238ed918e3138d5a9bb23a90408669e19169","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/duoshuo.ejs","hash":"992368f8863f34d1dccf90c0cabc33d5dcdbe92a","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/gallery.ejs","hash":"730ecd0fb021ac48beb2fe6ff4a4fd29b30b5a48","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/header-cover.ejs","hash":"4d3a73d0c6f26769f778d02a559e5055ef1ee0ca","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/header.ejs","hash":"7b69fe5ecba7acb584b603d6bbda00b090b4f99f","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/meta.ejs","hash":"709aeec54313eae49c335714e39c2849952a56db","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/share-options.ejs","hash":"390f6e056b75c3691b5f2fe6fd3f320330e20753","modified":1588550742622},{"_id":"themes/tranquilpeak/layout/_partial/post/tag.ejs","hash":"2a52f38fa359f8ec8ae776e44e92c48795e31272","modified":1588550742622},{"_id":"themes/tranquilpeak/source/_css/base/_base.scss","hash":"7ad98f0d0ef8b250fb18721d6ec5edbf508e62c5","modified":1588550742627},{"_id":"themes/tranquilpeak/source/_css/layouts/_about.scss","hash":"52bdadfccaf3bc2082412348cd419c9da5793530","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/layouts/_blog.scss","hash":"56a5db4aa598c01e6b3619cd5c95e967e4fdf8ef","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/layouts/_bottom-bar.scss","hash":"c7816c7ebc253d46466355860ead6669a3707ac6","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/layouts/_footer.scss","hash":"645161942c66e6afbd666b4755337a6a6261e5e0","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/layouts/_cover.scss","hash":"03a951c9b35dd4e35456caa36950e6d6bef77ac3","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/layouts/_header.scss","hash":"e8c4e66e62edb8ea5a2c98cefc5d62f3e8d5c4ed","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/components/_alert.scss","hash":"3644442dfc16aa8a6894db1a605e325c856d44a9","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/layouts/_main.scss","hash":"ee4648502b355db51fc6cb7b05375003331f2f6e","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/components/_archive.scss","hash":"6b7be2269d014c6c742a2c29c6a2aca39a383250","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/components/_box.scss","hash":"eebaacf55234fdaa156edb7dc4d9a4f382eaf4d4","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/components/_button.scss","hash":"ea9bd41800fe04860f7e892c17010588b2563a06","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/layouts/_sidebar.scss","hash":"58b428919154f28bef347dc2afb5a2683330cf58","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/components/_caption.scss","hash":"dad2683f5f3235b335eebcbda3db59a1cfbb2283","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/pages/_search.scss","hash":"5f7cde0b68156ea802c3caf6cd673cab948b09d9","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/components/_code.scss","hash":"0a14fe197c221a4d4d91ee9d41541ce7969043ca","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/components/_figure.scss","hash":"01152043de4e23f6595835941732563f09a033f3","modified":1588550742628},{"_id":"themes/tranquilpeak/source/_css/components/_form.scss","hash":"368187e0c5f1a57d8c423f2ec23e897ee94a1a27","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_hide.scss","hash":"c2f5ed51086b9ea5d94ff548bdc4653ea5cd7912","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_highlight-text.scss","hash":"7a7a8a78f75d6c43a46fd020e2d44546e716751b","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_icon.scss","hash":"60dc972bcd81b4f95ab2c067ca910a5bf324d907","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_image-gallery.scss","hash":"f683e80d69a0d5ac4e832d236ff5576cc749858a","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_link.scss","hash":"7460155ebf7ce0d3e9acd090b6b99673127fd0be","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_markdown.scss","hash":"ba6d7e8f84b3b6dfef339f28b5c6ae372ead674f","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_main-content.scss","hash":"90c46c87289a8b3cf7c14d36900f5ced9db36c25","modified":1588550742629},{"_id":"themes/tranquilpeak/source/_css/components/_media.scss","hash":"84aa03c01b741bbeb31c6b48122930f30ad40de3","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_modal.scss","hash":"bc56f823cd67b2ed65b5cf2c3e1851fa3e82f0f9","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_pagination.scss","hash":"5e1069c3cd066a3139edee0f8c35311cb6dfbd0c","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_post-actions.scss","hash":"4d4722be969001e33df429e549a934f7cfcb8cf4","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_post-header-cover.scss","hash":"c4bf950602ccb3fbdad54938979651a7b488236e","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_post.scss","hash":"1607c8580c110466993bd09362b879a4b1eb1d8a","modified":1588550742630},{"_id":"themes/tranquilpeak/source/_css/components/_postShorten.scss","hash":"4b545d89a2c4ce9857c2d83c942b3d78c09d8296","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_pullquote.scss","hash":"86bc35ba358d1340debc459a344f5f6d34acaa42","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_share-options-bar.scss","hash":"c27b8c5dbad8eafedab74602020cc2cea57f1d32","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_text.scss","hash":"7b38858248da2f73cf64c5949fd475a8e0a246ae","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_tag.scss","hash":"ddd1c2ce17f0116655bdacda598e7f1d6fd18262","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_tooltip.scss","hash":"f33ad3e677761af1ceb42d337691b8b354ff70bd","modified":1588550742631},{"_id":"themes/tranquilpeak/source/_css/components/_video.scss","hash":"f9727fd300d73e8844abf0e2575c45e6c7769333","modified":1588550742632},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-custom.scss","hash":"a0ffab53db35bbd4881aeb077400cba55551f3bd","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/themes/_hljs-tranquilpeak.scss","hash":"72bb30af91d08dbbd4092271eef288c40eeb7dbb","modified":1588550742633},{"_id":"themes/tranquilpeak/source/_css/utils/_fonts.scss","hash":"46f2edf56fb049f6d7289abfd5ad238a2c0c10dd","modified":1588550742634},{"_id":"themes/tranquilpeak/source/_css/utils/_variables.scss","hash":"2aa4c1bfebae471cb934d73d5da8be948a9c3f2f","modified":1588550742634},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_bottom-bar.scss","hash":"ab28b4d66f021e44d7a46a76157c6a2b5fd23496","modified":1588550742634},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_button.scss","hash":"70c64560144d7d6015bbedeca0531258f9bafa07","modified":1588550742634},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_category.scss","hash":"8cfc45772365e537949a4cd20cfa2a79e1a75dc8","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_form.scss","hash":"14026f13b54ef9f2cd7109cf1bca43040816e542","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_header.scss","hash":"52de2cb5f49a3b5748557fe2d25791ce52457d62","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_main.scss","hash":"0ad55a6191d0a533917845006ceae329353c0b90","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_opacity.scss","hash":"cfc9905b6df3b5100a30b5c47fd331068f238f97","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_post-header-cover.scss","hash":"ecd9078372d8bd1b7f4979bae3251e8efb345a9b","modified":1588550742635},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_prefix.scss","hash":"5e04cd54ba375f69c97b62b7d4e535118ec78177","modified":1588550742636},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_share-options-bar.scss","hash":"06f84bceb82df4d3bda64144f6fe4ad8e3e45f89","modified":1588550742636},{"_id":"themes/tranquilpeak/source/_images/cover.jpg","hash":"df915f5b3eeed6bad93a183f65e5c6f536e551fe","modified":1588550742640},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_sidebar.scss","hash":"a28fffd40fe34a9821909a1133961e642b7f9467","modified":1588550742636},{"_id":"themes/tranquilpeak/source/_css/utils/mixins/_tag.scss","hash":"c8a87e586e27f999ffa46f273f78a812f1cf2f0a","modified":1588550742636},{"_id":"themes/tranquilpeak/source/_images/cover-v1.2.0.jpg","hash":"a98b9bf4d6be3af0156c0b6e781f067e343a682d","modified":1588550742639},{"_id":"public/all-archives/index.html","hash":"da237e743207287fd8ee317a265ffd48dacc9293","modified":1588552701984},{"_id":"public/all-tags/index.html","hash":"04a6604e2ab4d93b312b4cb3f70c29b828a976c0","modified":1588552701984},{"_id":"public/all-categories/index.html","hash":"5fa19b7d8fa2b392b4f8c5dacd9b7ebcf5f500c6","modified":1588552701985},{"_id":"public/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/index.html","hash":"1687b7b0f7757e6b681fa667bb298c9a69f9a36d","modified":1588552701985},{"_id":"public/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/index.html","hash":"00ebc9672b605b3f25dad203e68da8d5ad2dd307","modified":1588552701985},{"_id":"public/2018/05/14/Angular-4-Custom-Bootstrapping-Lazy-Bind-to-Designated-Container/index.html","hash":"33c82c0bb40bf82e8e4abffd10b20e8ad1e0fb04","modified":1588552701985},{"_id":"public/2018/05/13/Building-Linux-Workspace-on-Windows-10-via-WSL/index.html","hash":"618ecce3d8e929877f95c6719d6e35e187b201d9","modified":1588552701985},{"_id":"public/2018/04/13/Workflow-Processing-Engine-Overview-2018-Airflow-vs-Azkaban-vs-Conductor-vs-Oozie-vs-Amazon-Step-Functions/index.html","hash":"949419a5d122c142a3f13fedb7f780f21e992216","modified":1588552701985},{"_id":"public/2016/10/03/You-Don-t-Know-JS-Equal-or-Not-Equal/index.html","hash":"040217d4bfefef6cb90c3c3983b499c3803ea087","modified":1588552701985},{"_id":"public/2016/10/01/You-Don-t-Know-JS-Eval/index.html","hash":"41285358cdefeecf747438787b37537ef4f3822c","modified":1588552701985},{"_id":"public/2016/09/18/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world/index.html","hash":"2a2466920214ed149f7eb1a6bbb5e2eeb596b0f3","modified":1588552701985},{"_id":"public/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/index.html","hash":"576d53369e83f0061a6f86357b67b363e796b839","modified":1588552701985},{"_id":"public/2016/08/14/get-started-with-hexo-blogging-system/index.html","hash":"29e0e7323f6d7d95ae2ee938f3e00a8d9c3eaaf9","modified":1588552701985},{"_id":"public/index.html","hash":"e0f56255697cf7249f13719544010fb6a95de948","modified":1588552701985},{"_id":"public/archives/index.html","hash":"316158fd816aa8de7e6063e171d897fc6aa6b336","modified":1588552701985},{"_id":"public/archives/2016/index.html","hash":"1621ec267201df9829068e6ee4380d1ee71cf3ed","modified":1588552701985},{"_id":"public/archives/2016/08/index.html","hash":"d302716a75ba0e1137c31ca9ae20ee4b91f42c92","modified":1588552701985},{"_id":"public/archives/2016/09/index.html","hash":"d1042952aa57703b267857161fed8411d58bcb46","modified":1588552701986},{"_id":"public/archives/2016/10/index.html","hash":"71d1ebb085ec813414129de6182e507d06d1295c","modified":1588552701986},{"_id":"public/archives/2018/index.html","hash":"9ffe08a9d0afd99107eb042941b52e6295020d7d","modified":1588552701986},{"_id":"public/archives/2018/04/index.html","hash":"bd3b3def2bf8b0ecd03f471298815a3270eb9509","modified":1588552701986},{"_id":"public/archives/2018/05/index.html","hash":"2c78ae8a55d68353d9b943ecaf677b4317881114","modified":1588552701986},{"_id":"public/archives/2018/11/index.html","hash":"e5ec5ade2ea9c1d005c24330cf219c3209e7d09d","modified":1588552701986},{"_id":"public/archives/2020/index.html","hash":"e478441311a4a39245bfd470d913b2a079bbb1cc","modified":1588552701986},{"_id":"public/archives/2020/04/index.html","hash":"553b224fcb299848ed6ea35e8067f7119cbdd68e","modified":1588552701986},{"_id":"public/categories/Frontend/index.html","hash":"850f540353a582ae3b792c83e3ba7ecf9a8e18ac","modified":1588552701986},{"_id":"public/categories/OS/index.html","hash":"f12a3529f4a116fe2169ed767a496573f96b47b7","modified":1588552701986},{"_id":"public/categories/Operation/index.html","hash":"fb6e7590c38d7603c75d3d7cd5deb96ecc3e851f","modified":1588552701986},{"_id":"public/categories/Hexo/index.html","hash":"4ca92097befb36c3376773a8c9186dac2f321211","modified":1588552701986},{"_id":"public/categories/You-Don-t-Know-JS/index.html","hash":"41519b1679e69a1608705756c0d1235e4ee5f604","modified":1588552701986},{"_id":"public/categories/Operation/Architecture/index.html","hash":"1232d5c9161052c066641e4d5492804d5c985766","modified":1588552701986},{"_id":"public/tags/angular/index.html","hash":"bbafa934726d6008f07f04383cd66a60e3471e31","modified":1588552701986},{"_id":"public/tags/linux/index.html","hash":"e242d7e869e64de4f6cacc4467ac6b8fb272778c","modified":1588552701987},{"_id":"public/tags/windows/index.html","hash":"a7ed185b23f5235ab2ddf4c25f84631f27c15cbe","modified":1588552701987},{"_id":"public/tags/wsl/index.html","hash":"5aeab0e29984b4c6e129837d0a804a3cc5f07dca","modified":1588552701987},{"_id":"public/tags/io/index.html","hash":"2a2bd539f7dd50a813c70692ed97f01b46534ec4","modified":1588552701987},{"_id":"public/tags/os/index.html","hash":"385871370e6fc6c44c450897d6caa4ce7e55c510","modified":1588552701987},{"_id":"public/tags/java/index.html","hash":"6a1ae7d8914e61da3d36570e62352c9d59849ce2","modified":1588552701987},{"_id":"public/tags/unix/index.html","hash":"80c5d00410bb252c6f6299c7060b147bccd47080","modified":1588552701987},{"_id":"public/tags/wifi-openwrt/index.html","hash":"87deeddc69000bcc73bf3d84a2a155c92af69362","modified":1588552701987},{"_id":"public/tags/monitoring/index.html","hash":"09cc0dd51cef44440dac341953ea7f655474fe5e","modified":1588552701987},{"_id":"public/tags/grpc/index.html","hash":"cb2023927a2f70811904785c5a483a00b31aee8a","modified":1588552701987},{"_id":"public/tags/microservice/index.html","hash":"307c13f6376324d77aef445d7c506493653783e8","modified":1588552701987},{"_id":"public/tags/kubernetes/index.html","hash":"d9e89624161b1fe90ec4aa553db5a889b80ff03d","modified":1588552701987},{"_id":"public/tags/aws/index.html","hash":"754ee782826cc9cfe982c5eeb885f34529108e0d","modified":1588552701987},{"_id":"public/tags/xray/index.html","hash":"860a3250ca397698a67f837b4b1515ff59a1c65e","modified":1588552701987},{"_id":"public/tags/http2/index.html","hash":"fe4aab0c5131717393f74162c575315b542a2455","modified":1588552701987},{"_id":"public/tags/browserify/index.html","hash":"3d561d1dc4277039104a999ecbdc06a1263e2184","modified":1588552701987},{"_id":"public/tags/javascript/index.html","hash":"8e30d87920eca93d40d583542b53e5c54033fb8a","modified":1588552701988},{"_id":"public/tags/dependency-management/index.html","hash":"ec9ab3be24b7f5a7e512aa24fbc44469f0a9c59a","modified":1588552701988},{"_id":"public/tags/modular-design/index.html","hash":"31447bb470366d9b07bd391452c811b499ea070f","modified":1588552701988},{"_id":"public/tags/es6/index.html","hash":"00c08a09f91ae99f4e50fee6509e1a96b2e2efa0","modified":1588552701988},{"_id":"public/tags/opensource/index.html","hash":"736aca96baddad7bf9de53d7fd0f8e0050faadc4","modified":1588552701988},{"_id":"public/tags/workflow/index.html","hash":"b4084d96db07b5c955f525cefe5039c604f17d35","modified":1588552701988},{"_id":"public/tags/airflow/index.html","hash":"43f330f1f704d7d7a4e55f2f679885c5f1d53a7f","modified":1588552701988},{"_id":"public/tags/azkaban/index.html","hash":"287066aa560ddd5e591fc1a055cf7b402990099a","modified":1588552701988},{"_id":"public/tags/review/index.html","hash":"35a5f663e464c6935d161042a505e36d543894aa","modified":1588552701988},{"_id":"public/tags/blog/index.html","hash":"2dbb6f00ce5356e402665c277b7d0a43d17a4d5f","modified":1588552701988},{"_id":"public/tags/hexo/index.html","hash":"6518e46a366ca029a803f8eb67a26317a270defa","modified":1588552701988},{"_id":"public/tags/frontend/index.html","hash":"5ae125a494d395e5e91b205dba5798b3f1774bc8","modified":1588552701988}],"Category":[{"name":"Frontend","_id":"ck9rr3him000esxmgk8p0npni"},{"name":"OS","_id":"ck9rr3hip000gsxmgqxc7234g"},{"name":"Operation","_id":"ck9rr3hiq000isxmgu828yrf9"},{"name":"Hexo","_id":"ck9rr3his000msxmgbzd9r2ck"},{"name":"You Don't Know JS","_id":"ck9rr3hiu000osxmggr6ob9oz"},{"name":"Architecture","parent":"ck9rr3hiq000isxmgu828yrf9","_id":"ck9rr3hj5001psxmg0e3f1w9c"}],"Data":[],"Page":[{"title":"all-archives","layout":"all-archives","comments":0,"_content":"","source":"all-archives/index.md","raw":"---\ntitle: \"all-archives\"\nlayout: \"all-archives\"\ncomments: false\n---\n","date":"2020-05-04T00:05:42.586Z","updated":"2020-05-04T00:05:42.586Z","path":"all-archives/index.html","_id":"ck9rr3hhw0000sxmgg4d35ysm","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-tags","layout":"all-tags","comments":0,"_content":"","source":"all-tags/index.md","raw":"---\ntitle: \"all-tags\"\nlayout: \"all-tags\"\ncomments: false\n---\n","date":"2020-05-04T00:05:42.586Z","updated":"2020-05-04T00:05:42.586Z","path":"all-tags/index.html","_id":"ck9rr3hi10002sxmg6cuh0jwt","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""},{"title":"all-categories","layout":"all-categories","comments":0,"_content":"","source":"all-categories/index.md","raw":"---\ntitle: \"all-categories\"\nlayout: \"all-categories\"\ncomments: false\n---\n","date":"2020-05-04T00:05:42.586Z","updated":"2020-05-04T00:05:42.586Z","path":"all-categories/index.html","_id":"ck9rr3hi20004sxmgogwlj14d","content":"","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":""}],"Post":[{"title":"Angular 4+ Custom Bootstrapping: Lazy Bind to Designated Container","date":"2018-05-15T06:50:39.000Z","_content":"\n{% alert info no-icon %}\nThis works for Angular 4-6 so far.\n{% endalert %}\n\n<br>\nIf you have ever used Angular 1.x, you know there's a manual bootstrapping\noption which looks like:\n```js\nangular.bootstrap(document.querySelector('#myApp'), ['myModule'])`\n```\nThis used to be pretty handy until Angular 2 comes in and changes the life.\nFor some reason they decide to hide that option and ask people to just use\n`bootstrap` in `@NgModule`.\n\nI get that because for general users this is good enough,\nespecially if you are just building a general SPA.\nHowever if you want to build something advanced like lazy loading,\nor conditional rendering, then this seems a bit naive.\n\nThis is especially annoying when in React its counterpart is as simple as\n```js\nReactDOM.render(     \n  <MyApp />,\n  document.querySelector('#myApp')\n);\n```\n\nThis alone won't drive people away from Angular but it's just one of the examples\nthat shows Angular wants to force people into its model rather than thinking about\nuse cases in the real world.\n\nAlright enough whining and let's get to coding. After all, Angular seems excellent\nespecially it covers everything from development, testing, and packaging out of the box.\nLet's leave whining till next time.\n\n<!-- more -->\n\nI'll create a simple stackblitz app like this:\n\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-qrrjaz?embed=1&file=src/app/app.component.ts\"></iframe>\n\nIt's pretty simple. The module tells Angular to bootstrap `AppComponent`,\nwhich looks for an element with tag `<my-app>`. After that it loads the\n`HelloComponent` which renders the `greeting` message from input.\nThe button in `AppComponent` will switch the message to `it works` once clicked.\n\nBut what if we want to lazy load it into a div `#myApp` then?\n\nLooking at the document, it is not mentioned. However, if we carefully read it, we'll\nsee there's [something that reads](https://angular.io/guide/entry-components#a-bootstrapped-entry-component):\n\n> A component can also be bootstrapped imperatively in the module's ngDoBootstrap() method. The @NgModule.bootstrap property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.\n\nAnd there's another chunk on that page that reads:\n\n> Though the @NgModule decorator has an entryComponents array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in @NgModule.bootstrap and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to entryComponents explicitly.\n\nAnd we are like:\n\n{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\nWait there's another chunk on the [bootstrapping page](https://angular.io/guide/bootstrapping):\n\n> The application launches by bootstrapping the root AppModule, which is also referred to as an entryComponent. Among other things, the bootstrapping process creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.\n\nOk I get that. But still, WTF does that mean?\n\n{% rage_face 'Desk flip' style:width:200px %}\n\nNever mind. I figured out through reading ~~document~~ source code. After all, some say,\ndocumentation is for the weak.\n\n## And here are the steps (finally)\n\nFirst of all, replace `bootstrap` with `entryComponents` in `@NgModule`.\nThis will tell Angular not to preemptively initialize everything.\nIn addition to that, the `entryComponents` param will tell angular to prepare\nall `ComponentFactory` instances and load them into app's `ComponentFactoryResolver`.\nAnd if you re-read the document you'll see what it means.\n\nSo our example app now looks like this:\n\n```js\n@NgModule({\n  imports:      [ BrowserModule, FormsModule ],\n  declarations: [ AppComponent, HelloComponent ],\n  entryComponents: [ AppComponent ]\n})\n```\n\nNext, override the `ngDoBootstrap()` with an empty body.\nThis will prevent default bootstrapping action when `bootstrapModule()` is called\nin `main.ts` file.\n\n```js\nexport class AppModule {\n  public ngDoBootstrap(appRef: ApplicationRef) {\n\n  } \n}\n```\n\nAlright now we go back to the `main.ts` file to perform the core magic.\n\nThe source code (thanks to TypeScript) tells us that\n`platformBrowserDynamic().bootstrapModule(AppModule)`\nreturns a `NgModuleRef`.\n\nIn `NgModuleRef` we can grab the `injector`. As we all know, angular is all about\ndependency injection. So we can call `bootstrap` here then and in newer version of\nAngular, that would take an `rootSelectorOrNode`.\n\nGreat so let's do:\n\n```js\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .then((moduleRef: NgModuleRef<AppModule>) => {\n    const app: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n    app.bootstrap(AppComponent, '#myApp');\n  })\n```\n\nAfter this our app would boot, but nothing happens if you click on \"Knock knock\".\n\nWTF?\n\nIn Angular 2+, there's the magic of `ngZone`. You can read more about it in their\n[zone.js repo](https://github.com/angular/zone.js/). In short, it provides an\n\"isolated\" execution context in which it hijacks the regular DOM methods to provide\nfeedback loop for Angular to handle events more performantly. So inside Angular zone,\nyour click is no longer a plain one but enhanced with magic to tell Angular something\nhas happened.\n\nSo how do we get the `ngZone` then? Remeber we have the omnipotent `injector` so we\ncan do\n\n```js\n.then((moduleRef: NgModuleRef<AppModule>) => {\n  const app: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n  const ngZone: NgZone = moduleRef.injector.get(NgZone);\n  ngZone.run(() => {\n    app.bootstrap(AppComponent, '#myApp');\n  });\n})\n```\n\nAt the end, here's everything in a nutshell:\n\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-1cnxy4?embed=1&ctl=1&file=src/app/app.module.ts\"></iframe>\n\nEnjoy hacking, until they support this with a one-liner.\n","source":"_posts/Angular-4-Custom-Bootstrapping-Lazy-Bind-to-Designated-Container.md","raw":"---\ntitle: 'Angular 4+ Custom Bootstrapping: Lazy Bind to Designated Container'\ndate: 2018-05-14 23:50:39\ncategories:\n- Frontend\ntags:\n- angular\n---\n\n{% alert info no-icon %}\nThis works for Angular 4-6 so far.\n{% endalert %}\n\n<br>\nIf you have ever used Angular 1.x, you know there's a manual bootstrapping\noption which looks like:\n```js\nangular.bootstrap(document.querySelector('#myApp'), ['myModule'])`\n```\nThis used to be pretty handy until Angular 2 comes in and changes the life.\nFor some reason they decide to hide that option and ask people to just use\n`bootstrap` in `@NgModule`.\n\nI get that because for general users this is good enough,\nespecially if you are just building a general SPA.\nHowever if you want to build something advanced like lazy loading,\nor conditional rendering, then this seems a bit naive.\n\nThis is especially annoying when in React its counterpart is as simple as\n```js\nReactDOM.render(     \n  <MyApp />,\n  document.querySelector('#myApp')\n);\n```\n\nThis alone won't drive people away from Angular but it's just one of the examples\nthat shows Angular wants to force people into its model rather than thinking about\nuse cases in the real world.\n\nAlright enough whining and let's get to coding. After all, Angular seems excellent\nespecially it covers everything from development, testing, and packaging out of the box.\nLet's leave whining till next time.\n\n<!-- more -->\n\nI'll create a simple stackblitz app like this:\n\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-qrrjaz?embed=1&file=src/app/app.component.ts\"></iframe>\n\nIt's pretty simple. The module tells Angular to bootstrap `AppComponent`,\nwhich looks for an element with tag `<my-app>`. After that it loads the\n`HelloComponent` which renders the `greeting` message from input.\nThe button in `AppComponent` will switch the message to `it works` once clicked.\n\nBut what if we want to lazy load it into a div `#myApp` then?\n\nLooking at the document, it is not mentioned. However, if we carefully read it, we'll\nsee there's [something that reads](https://angular.io/guide/entry-components#a-bootstrapped-entry-component):\n\n> A component can also be bootstrapped imperatively in the module's ngDoBootstrap() method. The @NgModule.bootstrap property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.\n\nAnd there's another chunk on that page that reads:\n\n> Though the @NgModule decorator has an entryComponents array, most of the time you won't have to explicitly set any entry components because Angular adds components listed in @NgModule.bootstrap and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to entryComponents explicitly.\n\nAnd we are like:\n\n{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\nWait there's another chunk on the [bootstrapping page](https://angular.io/guide/bootstrapping):\n\n> The application launches by bootstrapping the root AppModule, which is also referred to as an entryComponent. Among other things, the bootstrapping process creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.\n\nOk I get that. But still, WTF does that mean?\n\n{% rage_face 'Desk flip' style:width:200px %}\n\nNever mind. I figured out through reading ~~document~~ source code. After all, some say,\ndocumentation is for the weak.\n\n## And here are the steps (finally)\n\nFirst of all, replace `bootstrap` with `entryComponents` in `@NgModule`.\nThis will tell Angular not to preemptively initialize everything.\nIn addition to that, the `entryComponents` param will tell angular to prepare\nall `ComponentFactory` instances and load them into app's `ComponentFactoryResolver`.\nAnd if you re-read the document you'll see what it means.\n\nSo our example app now looks like this:\n\n```js\n@NgModule({\n  imports:      [ BrowserModule, FormsModule ],\n  declarations: [ AppComponent, HelloComponent ],\n  entryComponents: [ AppComponent ]\n})\n```\n\nNext, override the `ngDoBootstrap()` with an empty body.\nThis will prevent default bootstrapping action when `bootstrapModule()` is called\nin `main.ts` file.\n\n```js\nexport class AppModule {\n  public ngDoBootstrap(appRef: ApplicationRef) {\n\n  } \n}\n```\n\nAlright now we go back to the `main.ts` file to perform the core magic.\n\nThe source code (thanks to TypeScript) tells us that\n`platformBrowserDynamic().bootstrapModule(AppModule)`\nreturns a `NgModuleRef`.\n\nIn `NgModuleRef` we can grab the `injector`. As we all know, angular is all about\ndependency injection. So we can call `bootstrap` here then and in newer version of\nAngular, that would take an `rootSelectorOrNode`.\n\nGreat so let's do:\n\n```js\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .then((moduleRef: NgModuleRef<AppModule>) => {\n    const app: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n    app.bootstrap(AppComponent, '#myApp');\n  })\n```\n\nAfter this our app would boot, but nothing happens if you click on \"Knock knock\".\n\nWTF?\n\nIn Angular 2+, there's the magic of `ngZone`. You can read more about it in their\n[zone.js repo](https://github.com/angular/zone.js/). In short, it provides an\n\"isolated\" execution context in which it hijacks the regular DOM methods to provide\nfeedback loop for Angular to handle events more performantly. So inside Angular zone,\nyour click is no longer a plain one but enhanced with magic to tell Angular something\nhas happened.\n\nSo how do we get the `ngZone` then? Remeber we have the omnipotent `injector` so we\ncan do\n\n```js\n.then((moduleRef: NgModuleRef<AppModule>) => {\n  const app: ApplicationRef = moduleRef.injector.get(ApplicationRef);\n  const ngZone: NgZone = moduleRef.injector.get(NgZone);\n  ngZone.run(() => {\n    app.bootstrap(AppComponent, '#myApp');\n  });\n})\n```\n\nAt the end, here's everything in a nutshell:\n\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-1cnxy4?embed=1&ctl=1&file=src/app/app.module.ts\"></iframe>\n\nEnjoy hacking, until they support this with a one-liner.\n","slug":"Angular-4-Custom-Bootstrapping-Lazy-Bind-to-Designated-Container","published":1,"updated":"2020-05-04T00:05:42.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hhx0001sxmge6z4pf1m","content":"<div class=\"alert info no-icon\"><p>This works for Angular 4-6 so far.</p>\n</div>\n\n<br>\nIf you have ever used Angular 1.x, you know there's a manual bootstrapping\noption which looks like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.bootstrap(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myApp'</span>), [<span class=\"string\">'myModule'</span>])<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>This used to be pretty handy until Angular 2 comes in and changes the life.\nFor some reason they decide to hide that option and ask people to just use\n<code>bootstrap</code> in <code>@NgModule</code>.</p>\n<p>I get that because for general users this is good enough,\nespecially if you are just building a general SPA.\nHowever if you want to build something advanced like lazy loading,\nor conditional rendering, then this seems a bit naive.</p>\n<p>This is especially annoying when in React its counterpart is as simple as</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(     </span><br><span class=\"line\">  &lt;MyApp /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myApp'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>This alone won’t drive people away from Angular but it’s just one of the examples\nthat shows Angular wants to force people into its model rather than thinking about\nuse cases in the real world.</p>\n<p>Alright enough whining and let’s get to coding. After all, Angular seems excellent\nespecially it covers everything from development, testing, and packaging out of the box.\nLet’s leave whining till next time.</p>\n<a id=\"more\"></a>\n\n<p>I’ll create a simple stackblitz app like this:</p>\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-qrrjaz?embed=1&file=src/app/app.component.ts\"></iframe>\n\n<p>It’s pretty simple. The module tells Angular to bootstrap <code>AppComponent</code>,\nwhich looks for an element with tag <code>&lt;my-app&gt;</code>. After that it loads the\n<code>HelloComponent</code> which renders the <code>greeting</code> message from input.\nThe button in <code>AppComponent</code> will switch the message to <code>it works</code> once clicked.</p>\n<p>But what if we want to lazy load it into a div <code>#myApp</code> then?</p>\n<p>Looking at the document, it is not mentioned. However, if we carefully read it, we’ll\nsee there’s <a href=\"https://angular.io/guide/entry-components#a-bootstrapped-entry-component\" target=\"_blank\" rel=\"noopener\">something that reads</a>:</p>\n<blockquote>\n<p>A component can also be bootstrapped imperatively in the module’s ngDoBootstrap() method. The @NgModule.bootstrap property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</p>\n</blockquote>\n<p>And there’s another chunk on that page that reads:</p>\n<blockquote>\n<p>Though the @NgModule decorator has an entryComponents array, most of the time you won’t have to explicitly set any entry components because Angular adds components listed in @NgModule.bootstrap and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to entryComponents explicitly.</p>\n</blockquote>\n<p>And we are like:</p>\n<img src=\"http://www.memes.at/faces/are_you_fucking_kidding_me.jpg\" alt=\"Are you fucking kidding me\" style=\"width:200px\">\n\n<p>Wait there’s another chunk on the <a href=\"https://angular.io/guide/bootstrapping\" target=\"_blank\" rel=\"noopener\">bootstrapping page</a>:</p>\n<blockquote>\n<p>The application launches by bootstrapping the root AppModule, which is also referred to as an entryComponent. Among other things, the bootstrapping process creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.</p>\n</blockquote>\n<p>Ok I get that. But still, WTF does that mean?</p>\n<img src=\"http://www.memes.at/faces/desk_flip.jpg\" alt=\"Desk flip\" style=\"width:200px\">\n\n<p>Never mind. I figured out through reading <del>document</del> source code. After all, some say,\ndocumentation is for the weak.</p>\n<h2 id=\"And-here-are-the-steps-finally\"><a href=\"#And-here-are-the-steps-finally\" class=\"headerlink\" title=\"And here are the steps (finally)\"></a>And here are the steps (finally)</h2><p>First of all, replace <code>bootstrap</code> with <code>entryComponents</code> in <code>@NgModule</code>.\nThis will tell Angular not to preemptively initialize everything.\nIn addition to that, the <code>entryComponents</code> param will tell angular to prepare\nall <code>ComponentFactory</code> instances and load them into app’s <code>ComponentFactoryResolver</code>.\nAnd if you re-read the document you’ll see what it means.</p>\n<p>So our example app now looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports:      [ BrowserModule, FormsModule ],</span><br><span class=\"line\">  declarations: [ AppComponent, HelloComponent ],</span><br><span class=\"line\">  entryComponents: [ AppComponent ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Next, override the <code>ngDoBootstrap()</code> with an empty body.\nThis will prevent default bootstrapping action when <code>bootstrapModule()</code> is called\nin <code>main.ts</code> file.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</span><br><span class=\"line\">  public ngDoBootstrap(appRef: ApplicationRef) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Alright now we go back to the <code>main.ts</code> file to perform the core magic.</p>\n<p>The source code (thanks to TypeScript) tells us that\n<code>platformBrowserDynamic().bootstrapModule(AppModule)</code>\nreturns a <code>NgModuleRef</code>.</p>\n<p>In <code>NgModuleRef</code> we can grab the <code>injector</code>. As we all know, angular is all about\ndependency injection. So we can call <code>bootstrap</code> here then and in newer version of\nAngular, that would take an <code>rootSelectorOrNode</code>.</p>\n<p>Great so let’s do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">moduleRef: NgModuleRef&lt;AppModule&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app: ApplicationRef = moduleRef.injector.get(ApplicationRef);</span><br><span class=\"line\">    app.bootstrap(AppComponent, <span class=\"string\">'#myApp'</span>);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>After this our app would boot, but nothing happens if you click on “Knock knock”.</p>\n<p>WTF?</p>\n<p>In Angular 2+, there’s the magic of <code>ngZone</code>. You can read more about it in their\n<a href=\"https://github.com/angular/zone.js/\" target=\"_blank\" rel=\"noopener\">zone.js repo</a>. In short, it provides an\n“isolated” execution context in which it hijacks the regular DOM methods to provide\nfeedback loop for Angular to handle events more performantly. So inside Angular zone,\nyour click is no longer a plain one but enhanced with magic to tell Angular something\nhas happened.</p>\n<p>So how do we get the <code>ngZone</code> then? Remeber we have the omnipotent <code>injector</code> so we\ncan do</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">moduleRef: NgModuleRef&lt;AppModule&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app: ApplicationRef = moduleRef.injector.get(ApplicationRef);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ngZone: NgZone = moduleRef.injector.get(NgZone);</span><br><span class=\"line\">  ngZone.run(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    app.bootstrap(AppComponent, <span class=\"string\">'#myApp'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>At the end, here’s everything in a nutshell:</p>\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-1cnxy4?embed=1&ctl=1&file=src/app/app.module.ts\"></iframe>\n\n<p>Enjoy hacking, until they support this with a one-liner.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<div class=\"alert info no-icon\"><p>This works for Angular 4-6 so far.</p>\n</div>\n\n<br>\nIf you have ever used Angular 1.x, you know there's a manual bootstrapping\noption which looks like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.bootstrap(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myApp'</span>), [<span class=\"string\">'myModule'</span>])<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<p>This used to be pretty handy until Angular 2 comes in and changes the life.\nFor some reason they decide to hide that option and ask people to just use\n<code>bootstrap</code> in <code>@NgModule</code>.</p>\n<p>I get that because for general users this is good enough,\nespecially if you are just building a general SPA.\nHowever if you want to build something advanced like lazy loading,\nor conditional rendering, then this seems a bit naive.</p>\n<p>This is especially annoying when in React its counterpart is as simple as</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(     </span><br><span class=\"line\">  &lt;MyApp /&gt;,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#myApp'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>This alone won’t drive people away from Angular but it’s just one of the examples\nthat shows Angular wants to force people into its model rather than thinking about\nuse cases in the real world.</p>\n<p>Alright enough whining and let’s get to coding. After all, Angular seems excellent\nespecially it covers everything from development, testing, and packaging out of the box.\nLet’s leave whining till next time.</p>","more":"<p>I’ll create a simple stackblitz app like this:</p>\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-qrrjaz?embed=1&file=src/app/app.component.ts\"></iframe>\n\n<p>It’s pretty simple. The module tells Angular to bootstrap <code>AppComponent</code>,\nwhich looks for an element with tag <code>&lt;my-app&gt;</code>. After that it loads the\n<code>HelloComponent</code> which renders the <code>greeting</code> message from input.\nThe button in <code>AppComponent</code> will switch the message to <code>it works</code> once clicked.</p>\n<p>But what if we want to lazy load it into a div <code>#myApp</code> then?</p>\n<p>Looking at the document, it is not mentioned. However, if we carefully read it, we’ll\nsee there’s <a href=\"https://angular.io/guide/entry-components#a-bootstrapped-entry-component\" target=\"_blank\" rel=\"noopener\">something that reads</a>:</p>\n<blockquote>\n<p>A component can also be bootstrapped imperatively in the module’s ngDoBootstrap() method. The @NgModule.bootstrap property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</p>\n</blockquote>\n<p>And there’s another chunk on that page that reads:</p>\n<blockquote>\n<p>Though the @NgModule decorator has an entryComponents array, most of the time you won’t have to explicitly set any entry components because Angular adds components listed in @NgModule.bootstrap and those in route definitions to entry components automatically. Though these two mechanisms account for most entry components, if your app happens to bootstrap or dynamically load a component by type imperatively, you must add it to entryComponents explicitly.</p>\n</blockquote>\n<p>And we are like:</p>\n<img src=\"http://www.memes.at/faces/are_you_fucking_kidding_me.jpg\" alt=\"Are you fucking kidding me\" style=\"width:200px\">\n\n<p>Wait there’s another chunk on the <a href=\"https://angular.io/guide/bootstrapping\" target=\"_blank\" rel=\"noopener\">bootstrapping page</a>:</p>\n<blockquote>\n<p>The application launches by bootstrapping the root AppModule, which is also referred to as an entryComponent. Among other things, the bootstrapping process creates the component(s) listed in the bootstrap array and inserts each one into the browser DOM.</p>\n</blockquote>\n<p>Ok I get that. But still, WTF does that mean?</p>\n<img src=\"http://www.memes.at/faces/desk_flip.jpg\" alt=\"Desk flip\" style=\"width:200px\">\n\n<p>Never mind. I figured out through reading <del>document</del> source code. After all, some say,\ndocumentation is for the weak.</p>\n<h2 id=\"And-here-are-the-steps-finally\"><a href=\"#And-here-are-the-steps-finally\" class=\"headerlink\" title=\"And here are the steps (finally)\"></a>And here are the steps (finally)</h2><p>First of all, replace <code>bootstrap</code> with <code>entryComponents</code> in <code>@NgModule</code>.\nThis will tell Angular not to preemptively initialize everything.\nIn addition to that, the <code>entryComponents</code> param will tell angular to prepare\nall <code>ComponentFactory</code> instances and load them into app’s <code>ComponentFactoryResolver</code>.\nAnd if you re-read the document you’ll see what it means.</p>\n<p>So our example app now looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@NgModule(&#123;</span><br><span class=\"line\">  imports:      [ BrowserModule, FormsModule ],</span><br><span class=\"line\">  declarations: [ AppComponent, HelloComponent ],</span><br><span class=\"line\">  entryComponents: [ AppComponent ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Next, override the <code>ngDoBootstrap()</code> with an empty body.\nThis will prevent default bootstrapping action when <code>bootstrapModule()</code> is called\nin <code>main.ts</code> file.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123;</span><br><span class=\"line\">  public ngDoBootstrap(appRef: ApplicationRef) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Alright now we go back to the <code>main.ts</code> file to perform the core magic.</p>\n<p>The source code (thanks to TypeScript) tells us that\n<code>platformBrowserDynamic().bootstrapModule(AppModule)</code>\nreturns a <code>NgModuleRef</code>.</p>\n<p>In <code>NgModuleRef</code> we can grab the <code>injector</code>. As we all know, angular is all about\ndependency injection. So we can call <code>bootstrap</code> here then and in newer version of\nAngular, that would take an <code>rootSelectorOrNode</code>.</p>\n<p>Great so let’s do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">moduleRef: NgModuleRef&lt;AppModule&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app: ApplicationRef = moduleRef.injector.get(ApplicationRef);</span><br><span class=\"line\">    app.bootstrap(AppComponent, <span class=\"string\">'#myApp'</span>);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>After this our app would boot, but nothing happens if you click on “Knock knock”.</p>\n<p>WTF?</p>\n<p>In Angular 2+, there’s the magic of <code>ngZone</code>. You can read more about it in their\n<a href=\"https://github.com/angular/zone.js/\" target=\"_blank\" rel=\"noopener\">zone.js repo</a>. In short, it provides an\n“isolated” execution context in which it hijacks the regular DOM methods to provide\nfeedback loop for Angular to handle events more performantly. So inside Angular zone,\nyour click is no longer a plain one but enhanced with magic to tell Angular something\nhas happened.</p>\n<p>So how do we get the <code>ngZone</code> then? Remeber we have the omnipotent <code>injector</code> so we\ncan do</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.then(<span class=\"function\">(<span class=\"params\">moduleRef: NgModuleRef&lt;AppModule&gt;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> app: ApplicationRef = moduleRef.injector.get(ApplicationRef);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ngZone: NgZone = moduleRef.injector.get(NgZone);</span><br><span class=\"line\">  ngZone.run(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    app.bootstrap(AppComponent, <span class=\"string\">'#myApp'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>At the end, here’s everything in a nutshell:</p>\n<iframe style=\"border:none\" width=\"100%\" height=\"400px\" src=\"https://stackblitz.com/edit/angular-1cnxy4?embed=1&ctl=1&file=src/app/app.module.ts\"></iframe>\n\n<p>Enjoy hacking, until they support this with a one-liner.</p>"},{"title":"Building Linux Workspace on Windows 10 via WSL","date":"2018-05-13T22:35:46.000Z","_content":"\n{% asset_img title.png %}\n\nI was not really a fan of Windows 10,\nlet alone Microsoft decided to ditch the most important feature I liked in Windows 7 - Aero.\nIn fact, I'd admit that in most cases I use Windows as an entertainment system\nrather than a working platform.\n\nDon't get me wrong, Windows is great, both in terms of the quality of the software\nand the design/usability of the system by itself. It's also particularly great of you are\na .NET developer, a webmaster using IIS, or a game developer heavily using DirectX.\nHowever, it's just cumbersome to use it as a daily OSS platform, namely there lacks the\ngeneral ecosystem and the tools are just different. Yes you can install node, java, maven,\ngradle, and you can probably use powershell to write shell scripts, but at the end of the day,\nthe overall configuration just feels different and since most people don't use Windows\nfor work on a day-to-day basis, it just takes too much time and effort to learn a set of\nrules with different flavor, just to get the environment set up.\n\nHowever, things have changed.\n\nThe release of WSL (Windows Subsystem on Linux) in Windows 10 was like silent bomb.\nIt wasn't really marketed to general public, but it implies the fundamental\nchange of attitude from Microsoft towards OSS community.\n\nWSL is not a virtual machine. In fact there's no real linux kernel running.\nInstead, there is a layer in between that translates linux system calls to\nsomething that windows kernel can handle. Technically, this is seriously phenomenal,\nas there's certain things that there's no direct equivalent in Windows.\n\nFor example:\n\nQuoted from [MSDN blog](https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/)\n\n> The Linux fork syscall has no documented equivalent for Windows.\n> When a fork syscall is made on WSL, lxss.sys does some of the initial work\n> to prepare for copying the process.\n> It then calls internal NT APIs to create the process with the correct semantics\n> and create a thread in the process with an identical register context.\n> Finally, it does some additional work to complete copying the process\n> and resumes the new process so it can begin executing.\n\nAnd another one regarding [WSL file system](https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/):\n\n> The Windows Subsystem for Linux must translate various Linux file system operations\n> into NT kernel operations. WSL must provide a place where Linux system files can exist\n> with all the functionality required for that including Linux permissions,\n> symbolic links and other special files such as FIFOs;\n> it must provide access to the Windows volumes on your system;\n> and it must provide special file systems such as ProcFs.\n\nAnd now it even supports [interop](https://docs.microsoft.com/en-us/windows/wsl/interop)\nafter the Fall Creators update. This means if you type in `notepad.exe`,\nit would literally open notepad for you. Not very exciting but beyond that you could\ndo\n\n```shell\n# copy stuff to clipboard\necho 'foo bar' | clip.exe\n\n# open a file in windows using default associated program\ncmd.exe /C start image.png\n```\n\n**Awesome, but what's our original topic?**\n\n<!-- more -->\n\n## Enable WSL\n\nOk, to use WSL, you'd need to enable it first.\n\n*// Make sure you are using Windows 10 :)*\n\nIf you are running windows **earlier than 1709**, the setup would be like this:\n\n1. Press Windows key. Type in \"Turn windows features on or off\" and click on the option that shows up.\n2. Turn on WSL\n\n    {% asset_img WSL.png %}\n\n3. Reboot system. You will now have \"Bash on Ubuntu on Windows\" in your Start Menu.\n\nIf you are running version **>= 1709**, just search for \"Ubuntu\"\nor other available distributions like \"Debian\" or \"OpenSUSE\" in Microsoft Store.\n\n## Throw Away Cmd\n\nThe long lived cmd.exe in windows is not something people would generally like.\n\nIf you want to have something close to iTerm2 on Mac or Yakuake on KDE,\nyou can try [ConEmu](https://conemu.github.io/) (see title image).\n\nConEmu allows for creating tabs (Win + Shift + W),\nand splitting windows (Ctrl + Shift + O/E). Alternatively you can use tmux.\n\nI personally enable the Quake style which allows me to hit `Ctrl + ~` to bring it down.\n\nConEmu does not seem to have start up with Windows option but you can get around that\nby putting the shortcut into Startup folder in Start Menu and set the initial window\noption to be \"Minimized\".\n\n## Basic Setup\n\n### Upgrade Packages\n\n```shell\n$ sudo apt -y update\n$ sudo apt -y upgrade\n$ sudo apt -y dist-upgrade\n$ sudo apt -y autoremove\n```\n\n### Change to Favorite Shell\n\nBy default most distributions would use bash.\n\nIf you want to use zsh or other shell:\n\n```shell\n$ sudo chsh --shell /bin/zsh <username>\n```\n\nor if you want to install oh-my-zsh:\n\n```shell\n$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Mount Network Drives\n\nUbuntu on windows should have mounted all local disks for you under `/mnt`.\nIn case you need to mount a network drive like NAS:\n\n```shell\n$ sudo mount -t drvfs Z: /mnt/z\n```\n\n## Some Advanced Tweaks You Might Want\n\n### Disabling bell\n\nBy default you'll hear an annoying \"dang\" every time you tab complete.\nThat is associated with the \"Critical Stop\" sound config in windows.\nTo stop it is shell specific but generally:\n\nFor bash, put this into `.bashrc`\n\n```bash\nset bell-style none\n```\n\nFor zsh, this works for me in `.zshrc`\n\n```bash\nunsetopt beep\n```\n\n### Stop Windows From Sharing PATH\n\nBy default Windows would copy PATH variables to WSL. This could be quite annoying\nif you use tools like pyenv, rvm or nvm and you also have python, ruby, or node installed\nin Windows as typically the stuff from Windows will take priority.\n\nTo fix that you can create a DWORD `AppendNtPath` under\n`HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss` and set the value to `0`.\n\n**Update:** The above trick seems to only work for legacy WSL (aka Bash on Ubuntu on Windows).\nFor new users, create a DWORD `DistributionFlags` with value `fffffffd` under `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager`.\nThen go to Services and restart the LxssManager service.\n\nThis is undocumented but described in [WSL#2048](https://github.com/Microsoft/WSL/issues/2048).\n\n### Allow Linux to Open File Using Preferred Application in Windows\n\nThis is quite useful if you just want to say check an image as WSL is not shipped with a desktop.\nBy default the `xdg-open` binary can be used in linux but WSL is not shipped with that either.\n\nLuckily as WSL supports interop, there's a trick:\n\n1. Create a file `/usr/bin/xdg-open` with content\n\n    ```bash\n    #!/usr/bin/env sh\n    /mnt/c/Windows/System32/cmd.exe /C start \"$1\"\n    ```\n\n2. Make it executable:\n\n    ```shell\n    $ sudo chmod +x /usr/bin/xdg-open\n    ```\n\n3. Use it:\n\n    ```shell\n    $ xdg-open a.png\n    ```\n\n### Call VSCode from Linux\n\nYou can technically get everything done with vi, but sometimes it's easier to just use a GUI.\n\nFor VSCode Mac version there's an option to install it to terminal, but it just doesn't exist in Windows.\n\nBut with WSL interop, just put this in shell rc file:\n\n```bash\nalias code /mnt/c/Program\\ Files/Microsoft\\ VS\\ Code/Code.exe\n```\n\nTo use it:\n\n```shell\n$ code path/to/my/file\n```\n\n### Install Python/Node/Ruby\n\nI use pyenv and it's the same as if you are in normal linux:\n\n```shell\n$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh\npyenv install 3.6.5\npyenv shell 3.6.5\n```\n\nSimilar solution can be used for node and ruby using nvm and rvm respectively.\n","source":"_posts/Building-Linux-Workspace-on-Windows-10-via-WSL.md","raw":"---\ntitle: Building Linux Workspace on Windows 10 via WSL\ndate: 2018-05-13 15:35:46\ntags:\n- linux\n- windows\n- wsl\n---\n\n{% asset_img title.png %}\n\nI was not really a fan of Windows 10,\nlet alone Microsoft decided to ditch the most important feature I liked in Windows 7 - Aero.\nIn fact, I'd admit that in most cases I use Windows as an entertainment system\nrather than a working platform.\n\nDon't get me wrong, Windows is great, both in terms of the quality of the software\nand the design/usability of the system by itself. It's also particularly great of you are\na .NET developer, a webmaster using IIS, or a game developer heavily using DirectX.\nHowever, it's just cumbersome to use it as a daily OSS platform, namely there lacks the\ngeneral ecosystem and the tools are just different. Yes you can install node, java, maven,\ngradle, and you can probably use powershell to write shell scripts, but at the end of the day,\nthe overall configuration just feels different and since most people don't use Windows\nfor work on a day-to-day basis, it just takes too much time and effort to learn a set of\nrules with different flavor, just to get the environment set up.\n\nHowever, things have changed.\n\nThe release of WSL (Windows Subsystem on Linux) in Windows 10 was like silent bomb.\nIt wasn't really marketed to general public, but it implies the fundamental\nchange of attitude from Microsoft towards OSS community.\n\nWSL is not a virtual machine. In fact there's no real linux kernel running.\nInstead, there is a layer in between that translates linux system calls to\nsomething that windows kernel can handle. Technically, this is seriously phenomenal,\nas there's certain things that there's no direct equivalent in Windows.\n\nFor example:\n\nQuoted from [MSDN blog](https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/)\n\n> The Linux fork syscall has no documented equivalent for Windows.\n> When a fork syscall is made on WSL, lxss.sys does some of the initial work\n> to prepare for copying the process.\n> It then calls internal NT APIs to create the process with the correct semantics\n> and create a thread in the process with an identical register context.\n> Finally, it does some additional work to complete copying the process\n> and resumes the new process so it can begin executing.\n\nAnd another one regarding [WSL file system](https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/):\n\n> The Windows Subsystem for Linux must translate various Linux file system operations\n> into NT kernel operations. WSL must provide a place where Linux system files can exist\n> with all the functionality required for that including Linux permissions,\n> symbolic links and other special files such as FIFOs;\n> it must provide access to the Windows volumes on your system;\n> and it must provide special file systems such as ProcFs.\n\nAnd now it even supports [interop](https://docs.microsoft.com/en-us/windows/wsl/interop)\nafter the Fall Creators update. This means if you type in `notepad.exe`,\nit would literally open notepad for you. Not very exciting but beyond that you could\ndo\n\n```shell\n# copy stuff to clipboard\necho 'foo bar' | clip.exe\n\n# open a file in windows using default associated program\ncmd.exe /C start image.png\n```\n\n**Awesome, but what's our original topic?**\n\n<!-- more -->\n\n## Enable WSL\n\nOk, to use WSL, you'd need to enable it first.\n\n*// Make sure you are using Windows 10 :)*\n\nIf you are running windows **earlier than 1709**, the setup would be like this:\n\n1. Press Windows key. Type in \"Turn windows features on or off\" and click on the option that shows up.\n2. Turn on WSL\n\n    {% asset_img WSL.png %}\n\n3. Reboot system. You will now have \"Bash on Ubuntu on Windows\" in your Start Menu.\n\nIf you are running version **>= 1709**, just search for \"Ubuntu\"\nor other available distributions like \"Debian\" or \"OpenSUSE\" in Microsoft Store.\n\n## Throw Away Cmd\n\nThe long lived cmd.exe in windows is not something people would generally like.\n\nIf you want to have something close to iTerm2 on Mac or Yakuake on KDE,\nyou can try [ConEmu](https://conemu.github.io/) (see title image).\n\nConEmu allows for creating tabs (Win + Shift + W),\nand splitting windows (Ctrl + Shift + O/E). Alternatively you can use tmux.\n\nI personally enable the Quake style which allows me to hit `Ctrl + ~` to bring it down.\n\nConEmu does not seem to have start up with Windows option but you can get around that\nby putting the shortcut into Startup folder in Start Menu and set the initial window\noption to be \"Minimized\".\n\n## Basic Setup\n\n### Upgrade Packages\n\n```shell\n$ sudo apt -y update\n$ sudo apt -y upgrade\n$ sudo apt -y dist-upgrade\n$ sudo apt -y autoremove\n```\n\n### Change to Favorite Shell\n\nBy default most distributions would use bash.\n\nIf you want to use zsh or other shell:\n\n```shell\n$ sudo chsh --shell /bin/zsh <username>\n```\n\nor if you want to install oh-my-zsh:\n\n```shell\n$ sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n### Mount Network Drives\n\nUbuntu on windows should have mounted all local disks for you under `/mnt`.\nIn case you need to mount a network drive like NAS:\n\n```shell\n$ sudo mount -t drvfs Z: /mnt/z\n```\n\n## Some Advanced Tweaks You Might Want\n\n### Disabling bell\n\nBy default you'll hear an annoying \"dang\" every time you tab complete.\nThat is associated with the \"Critical Stop\" sound config in windows.\nTo stop it is shell specific but generally:\n\nFor bash, put this into `.bashrc`\n\n```bash\nset bell-style none\n```\n\nFor zsh, this works for me in `.zshrc`\n\n```bash\nunsetopt beep\n```\n\n### Stop Windows From Sharing PATH\n\nBy default Windows would copy PATH variables to WSL. This could be quite annoying\nif you use tools like pyenv, rvm or nvm and you also have python, ruby, or node installed\nin Windows as typically the stuff from Windows will take priority.\n\nTo fix that you can create a DWORD `AppendNtPath` under\n`HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss` and set the value to `0`.\n\n**Update:** The above trick seems to only work for legacy WSL (aka Bash on Ubuntu on Windows).\nFor new users, create a DWORD `DistributionFlags` with value `fffffffd` under `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager`.\nThen go to Services and restart the LxssManager service.\n\nThis is undocumented but described in [WSL#2048](https://github.com/Microsoft/WSL/issues/2048).\n\n### Allow Linux to Open File Using Preferred Application in Windows\n\nThis is quite useful if you just want to say check an image as WSL is not shipped with a desktop.\nBy default the `xdg-open` binary can be used in linux but WSL is not shipped with that either.\n\nLuckily as WSL supports interop, there's a trick:\n\n1. Create a file `/usr/bin/xdg-open` with content\n\n    ```bash\n    #!/usr/bin/env sh\n    /mnt/c/Windows/System32/cmd.exe /C start \"$1\"\n    ```\n\n2. Make it executable:\n\n    ```shell\n    $ sudo chmod +x /usr/bin/xdg-open\n    ```\n\n3. Use it:\n\n    ```shell\n    $ xdg-open a.png\n    ```\n\n### Call VSCode from Linux\n\nYou can technically get everything done with vi, but sometimes it's easier to just use a GUI.\n\nFor VSCode Mac version there's an option to install it to terminal, but it just doesn't exist in Windows.\n\nBut with WSL interop, just put this in shell rc file:\n\n```bash\nalias code /mnt/c/Program\\ Files/Microsoft\\ VS\\ Code/Code.exe\n```\n\nTo use it:\n\n```shell\n$ code path/to/my/file\n```\n\n### Install Python/Node/Ruby\n\nI use pyenv and it's the same as if you are in normal linux:\n\n```shell\n$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh\npyenv install 3.6.5\npyenv shell 3.6.5\n```\n\nSimilar solution can be used for node and ruby using nvm and rvm respectively.\n","slug":"Building-Linux-Workspace-on-Windows-10-via-WSL","published":1,"updated":"2020-05-04T00:05:42.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi10003sxmgctsl2lxv","content":"<img src=\"/2018/05/13/Building-Linux-Workspace-on-Windows-10-via-WSL/title.png\">\n\n<p>I was not really a fan of Windows 10,\nlet alone Microsoft decided to ditch the most important feature I liked in Windows 7 - Aero.\nIn fact, I’d admit that in most cases I use Windows as an entertainment system\nrather than a working platform.</p>\n<p>Don’t get me wrong, Windows is great, both in terms of the quality of the software\nand the design/usability of the system by itself. It’s also particularly great of you are\na .NET developer, a webmaster using IIS, or a game developer heavily using DirectX.\nHowever, it’s just cumbersome to use it as a daily OSS platform, namely there lacks the\ngeneral ecosystem and the tools are just different. Yes you can install node, java, maven,\ngradle, and you can probably use powershell to write shell scripts, but at the end of the day,\nthe overall configuration just feels different and since most people don’t use Windows\nfor work on a day-to-day basis, it just takes too much time and effort to learn a set of\nrules with different flavor, just to get the environment set up.</p>\n<p>However, things have changed.</p>\n<p>The release of WSL (Windows Subsystem on Linux) in Windows 10 was like silent bomb.\nIt wasn’t really marketed to general public, but it implies the fundamental\nchange of attitude from Microsoft towards OSS community.</p>\n<p>WSL is not a virtual machine. In fact there’s no real linux kernel running.\nInstead, there is a layer in between that translates linux system calls to\nsomething that windows kernel can handle. Technically, this is seriously phenomenal,\nas there’s certain things that there’s no direct equivalent in Windows.</p>\n<p>For example:</p>\n<p>Quoted from <a href=\"https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/\" target=\"_blank\" rel=\"noopener\">MSDN blog</a></p>\n<blockquote>\n<p>The Linux fork syscall has no documented equivalent for Windows.\nWhen a fork syscall is made on WSL, lxss.sys does some of the initial work\nto prepare for copying the process.\nIt then calls internal NT APIs to create the process with the correct semantics\nand create a thread in the process with an identical register context.\nFinally, it does some additional work to complete copying the process\nand resumes the new process so it can begin executing.</p>\n</blockquote>\n<p>And another one regarding <a href=\"https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/\" target=\"_blank\" rel=\"noopener\">WSL file system</a>:</p>\n<blockquote>\n<p>The Windows Subsystem for Linux must translate various Linux file system operations\ninto NT kernel operations. WSL must provide a place where Linux system files can exist\nwith all the functionality required for that including Linux permissions,\nsymbolic links and other special files such as FIFOs;\nit must provide access to the Windows volumes on your system;\nand it must provide special file systems such as ProcFs.</p>\n</blockquote>\n<p>And now it even supports <a href=\"https://docs.microsoft.com/en-us/windows/wsl/interop\" target=\"_blank\" rel=\"noopener\">interop</a>\nafter the Fall Creators update. This means if you type in <code>notepad.exe</code>,\nit would literally open notepad for you. Not very exciting but beyond that you could\ndo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> copy stuff to clipboard</span><br><span class=\"line\">echo 'foo bar' | clip.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> open a file in windows using default associated program</span><br><span class=\"line\">cmd.exe /C start image.png</span><br></pre></td></tr></table></figure>\n\n<p><strong>Awesome, but what’s our original topic?</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Enable-WSL\"><a href=\"#Enable-WSL\" class=\"headerlink\" title=\"Enable WSL\"></a>Enable WSL</h2><p>Ok, to use WSL, you’d need to enable it first.</p>\n<p><em>// Make sure you are using Windows 10 :)</em></p>\n<p>If you are running windows <strong>earlier than 1709</strong>, the setup would be like this:</p>\n<ol>\n<li><p>Press Windows key. Type in “Turn windows features on or off” and click on the option that shows up.</p>\n</li>\n<li><p>Turn on WSL</p>\n <img src=\"/2018/05/13/Building-Linux-Workspace-on-Windows-10-via-WSL/WSL.png\">\n</li>\n<li><p>Reboot system. You will now have “Bash on Ubuntu on Windows” in your Start Menu.</p>\n</li>\n</ol>\n<p>If you are running version <strong>&gt;= 1709</strong>, just search for “Ubuntu”\nor other available distributions like “Debian” or “OpenSUSE” in Microsoft Store.</p>\n<h2 id=\"Throw-Away-Cmd\"><a href=\"#Throw-Away-Cmd\" class=\"headerlink\" title=\"Throw Away Cmd\"></a>Throw Away Cmd</h2><p>The long lived cmd.exe in windows is not something people would generally like.</p>\n<p>If you want to have something close to iTerm2 on Mac or Yakuake on KDE,\nyou can try <a href=\"https://conemu.github.io/\" target=\"_blank\" rel=\"noopener\">ConEmu</a> (see title image).</p>\n<p>ConEmu allows for creating tabs (Win + Shift + W),\nand splitting windows (Ctrl + Shift + O/E). Alternatively you can use tmux.</p>\n<p>I personally enable the Quake style which allows me to hit <code>Ctrl + ~</code> to bring it down.</p>\n<p>ConEmu does not seem to have start up with Windows option but you can get around that\nby putting the shortcut into Startup folder in Start Menu and set the initial window\noption to be “Minimized”.</p>\n<h2 id=\"Basic-Setup\"><a href=\"#Basic-Setup\" class=\"headerlink\" title=\"Basic Setup\"></a>Basic Setup</h2><h3 id=\"Upgrade-Packages\"><a href=\"#Upgrade-Packages\" class=\"headerlink\" title=\"Upgrade Packages\"></a>Upgrade Packages</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y update</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y upgrade</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y dist-upgrade</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y autoremove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Change-to-Favorite-Shell\"><a href=\"#Change-to-Favorite-Shell\" class=\"headerlink\" title=\"Change to Favorite Shell\"></a>Change to Favorite Shell</h3><p>By default most distributions would use bash.</p>\n<p>If you want to use zsh or other shell:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo chsh --shell /bin/zsh &lt;username&gt;</span><br></pre></td></tr></table></figure>\n\n<p>or if you want to install oh-my-zsh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mount-Network-Drives\"><a href=\"#Mount-Network-Drives\" class=\"headerlink\" title=\"Mount Network Drives\"></a>Mount Network Drives</h3><p>Ubuntu on windows should have mounted all local disks for you under <code>/mnt</code>.\nIn case you need to mount a network drive like NAS:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo mount -t drvfs Z: /mnt/z</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Some-Advanced-Tweaks-You-Might-Want\"><a href=\"#Some-Advanced-Tweaks-You-Might-Want\" class=\"headerlink\" title=\"Some Advanced Tweaks You Might Want\"></a>Some Advanced Tweaks You Might Want</h2><h3 id=\"Disabling-bell\"><a href=\"#Disabling-bell\" class=\"headerlink\" title=\"Disabling bell\"></a>Disabling bell</h3><p>By default you’ll hear an annoying “dang” every time you tab complete.\nThat is associated with the “Critical Stop” sound config in windows.\nTo stop it is shell specific but generally:</p>\n<p>For bash, put this into <code>.bashrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> bell-style none</span><br></pre></td></tr></table></figure>\n\n<p>For zsh, this works for me in <code>.zshrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unsetopt</span> beep</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stop-Windows-From-Sharing-PATH\"><a href=\"#Stop-Windows-From-Sharing-PATH\" class=\"headerlink\" title=\"Stop Windows From Sharing PATH\"></a>Stop Windows From Sharing PATH</h3><p>By default Windows would copy PATH variables to WSL. This could be quite annoying\nif you use tools like pyenv, rvm or nvm and you also have python, ruby, or node installed\nin Windows as typically the stuff from Windows will take priority.</p>\n<p>To fix that you can create a DWORD <code>AppendNtPath</code> under\n<code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss</code> and set the value to <code>0</code>.</p>\n<p><strong>Update:</strong> The above trick seems to only work for legacy WSL (aka Bash on Ubuntu on Windows).\nFor new users, create a DWORD <code>DistributionFlags</code> with value <code>fffffffd</code> under <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager</code>.\nThen go to Services and restart the LxssManager service.</p>\n<p>This is undocumented but described in <a href=\"https://github.com/Microsoft/WSL/issues/2048\" target=\"_blank\" rel=\"noopener\">WSL#2048</a>.</p>\n<h3 id=\"Allow-Linux-to-Open-File-Using-Preferred-Application-in-Windows\"><a href=\"#Allow-Linux-to-Open-File-Using-Preferred-Application-in-Windows\" class=\"headerlink\" title=\"Allow Linux to Open File Using Preferred Application in Windows\"></a>Allow Linux to Open File Using Preferred Application in Windows</h3><p>This is quite useful if you just want to say check an image as WSL is not shipped with a desktop.\nBy default the <code>xdg-open</code> binary can be used in linux but WSL is not shipped with that either.</p>\n<p>Luckily as WSL supports interop, there’s a trick:</p>\n<ol>\n<li><p>Create a file <code>/usr/bin/xdg-open</code> with content</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">/mnt/c/Windows/System32/cmd.exe /C start <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Make it executable:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo chmod +x /usr/bin/xdg-open</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use it:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xdg-open a.png</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Call-VSCode-from-Linux\"><a href=\"#Call-VSCode-from-Linux\" class=\"headerlink\" title=\"Call VSCode from Linux\"></a>Call VSCode from Linux</h3><p>You can technically get everything done with vi, but sometimes it’s easier to just use a GUI.</p>\n<p>For VSCode Mac version there’s an option to install it to terminal, but it just doesn’t exist in Windows.</p>\n<p>But with WSL interop, just put this in shell rc file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> code /mnt/c/Program\\ Files/Microsoft\\ VS\\ Code/Code.exe</span><br></pre></td></tr></table></figure>\n\n<p>To use it:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> code path/to/my/file</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Install-Python-Node-Ruby\"><a href=\"#Install-Python-Node-Ruby\" class=\"headerlink\" title=\"Install Python/Node/Ruby\"></a>Install Python/Node/Ruby</h3><p>I use pyenv and it’s the same as if you are in normal linux:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh</span></span><br><span class=\"line\">pyenv install 3.6.5</span><br><span class=\"line\">pyenv shell 3.6.5</span><br></pre></td></tr></table></figure>\n\n<p>Similar solution can be used for node and ruby using nvm and rvm respectively.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<img src=\"/2018/05/13/Building-Linux-Workspace-on-Windows-10-via-WSL/title.png\">\n\n<p>I was not really a fan of Windows 10,\nlet alone Microsoft decided to ditch the most important feature I liked in Windows 7 - Aero.\nIn fact, I’d admit that in most cases I use Windows as an entertainment system\nrather than a working platform.</p>\n<p>Don’t get me wrong, Windows is great, both in terms of the quality of the software\nand the design/usability of the system by itself. It’s also particularly great of you are\na .NET developer, a webmaster using IIS, or a game developer heavily using DirectX.\nHowever, it’s just cumbersome to use it as a daily OSS platform, namely there lacks the\ngeneral ecosystem and the tools are just different. Yes you can install node, java, maven,\ngradle, and you can probably use powershell to write shell scripts, but at the end of the day,\nthe overall configuration just feels different and since most people don’t use Windows\nfor work on a day-to-day basis, it just takes too much time and effort to learn a set of\nrules with different flavor, just to get the environment set up.</p>\n<p>However, things have changed.</p>\n<p>The release of WSL (Windows Subsystem on Linux) in Windows 10 was like silent bomb.\nIt wasn’t really marketed to general public, but it implies the fundamental\nchange of attitude from Microsoft towards OSS community.</p>\n<p>WSL is not a virtual machine. In fact there’s no real linux kernel running.\nInstead, there is a layer in between that translates linux system calls to\nsomething that windows kernel can handle. Technically, this is seriously phenomenal,\nas there’s certain things that there’s no direct equivalent in Windows.</p>\n<p>For example:</p>\n<p>Quoted from <a href=\"https://blogs.msdn.microsoft.com/wsl/2016/06/08/wsl-system-calls/\" target=\"_blank\" rel=\"noopener\">MSDN blog</a></p>\n<blockquote>\n<p>The Linux fork syscall has no documented equivalent for Windows.\nWhen a fork syscall is made on WSL, lxss.sys does some of the initial work\nto prepare for copying the process.\nIt then calls internal NT APIs to create the process with the correct semantics\nand create a thread in the process with an identical register context.\nFinally, it does some additional work to complete copying the process\nand resumes the new process so it can begin executing.</p>\n</blockquote>\n<p>And another one regarding <a href=\"https://blogs.msdn.microsoft.com/wsl/2016/06/15/wsl-file-system-support/\" target=\"_blank\" rel=\"noopener\">WSL file system</a>:</p>\n<blockquote>\n<p>The Windows Subsystem for Linux must translate various Linux file system operations\ninto NT kernel operations. WSL must provide a place where Linux system files can exist\nwith all the functionality required for that including Linux permissions,\nsymbolic links and other special files such as FIFOs;\nit must provide access to the Windows volumes on your system;\nand it must provide special file systems such as ProcFs.</p>\n</blockquote>\n<p>And now it even supports <a href=\"https://docs.microsoft.com/en-us/windows/wsl/interop\" target=\"_blank\" rel=\"noopener\">interop</a>\nafter the Fall Creators update. This means if you type in <code>notepad.exe</code>,\nit would literally open notepad for you. Not very exciting but beyond that you could\ndo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> copy stuff to clipboard</span><br><span class=\"line\">echo 'foo bar' | clip.exe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> open a file in windows using default associated program</span><br><span class=\"line\">cmd.exe /C start image.png</span><br></pre></td></tr></table></figure>\n\n<p><strong>Awesome, but what’s our original topic?</strong></p>","more":"<h2 id=\"Enable-WSL\"><a href=\"#Enable-WSL\" class=\"headerlink\" title=\"Enable WSL\"></a>Enable WSL</h2><p>Ok, to use WSL, you’d need to enable it first.</p>\n<p><em>// Make sure you are using Windows 10 :)</em></p>\n<p>If you are running windows <strong>earlier than 1709</strong>, the setup would be like this:</p>\n<ol>\n<li><p>Press Windows key. Type in “Turn windows features on or off” and click on the option that shows up.</p>\n</li>\n<li><p>Turn on WSL</p>\n <img src=\"/2018/05/13/Building-Linux-Workspace-on-Windows-10-via-WSL/WSL.png\">\n</li>\n<li><p>Reboot system. You will now have “Bash on Ubuntu on Windows” in your Start Menu.</p>\n</li>\n</ol>\n<p>If you are running version <strong>&gt;= 1709</strong>, just search for “Ubuntu”\nor other available distributions like “Debian” or “OpenSUSE” in Microsoft Store.</p>\n<h2 id=\"Throw-Away-Cmd\"><a href=\"#Throw-Away-Cmd\" class=\"headerlink\" title=\"Throw Away Cmd\"></a>Throw Away Cmd</h2><p>The long lived cmd.exe in windows is not something people would generally like.</p>\n<p>If you want to have something close to iTerm2 on Mac or Yakuake on KDE,\nyou can try <a href=\"https://conemu.github.io/\" target=\"_blank\" rel=\"noopener\">ConEmu</a> (see title image).</p>\n<p>ConEmu allows for creating tabs (Win + Shift + W),\nand splitting windows (Ctrl + Shift + O/E). Alternatively you can use tmux.</p>\n<p>I personally enable the Quake style which allows me to hit <code>Ctrl + ~</code> to bring it down.</p>\n<p>ConEmu does not seem to have start up with Windows option but you can get around that\nby putting the shortcut into Startup folder in Start Menu and set the initial window\noption to be “Minimized”.</p>\n<h2 id=\"Basic-Setup\"><a href=\"#Basic-Setup\" class=\"headerlink\" title=\"Basic Setup\"></a>Basic Setup</h2><h3 id=\"Upgrade-Packages\"><a href=\"#Upgrade-Packages\" class=\"headerlink\" title=\"Upgrade Packages\"></a>Upgrade Packages</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y update</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y upgrade</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y dist-upgrade</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo apt -y autoremove</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Change-to-Favorite-Shell\"><a href=\"#Change-to-Favorite-Shell\" class=\"headerlink\" title=\"Change to Favorite Shell\"></a>Change to Favorite Shell</h3><p>By default most distributions would use bash.</p>\n<p>If you want to use zsh or other shell:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo chsh --shell /bin/zsh &lt;username&gt;</span><br></pre></td></tr></table></figure>\n\n<p>or if you want to install oh-my-zsh:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mount-Network-Drives\"><a href=\"#Mount-Network-Drives\" class=\"headerlink\" title=\"Mount Network Drives\"></a>Mount Network Drives</h3><p>Ubuntu on windows should have mounted all local disks for you under <code>/mnt</code>.\nIn case you need to mount a network drive like NAS:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo mount -t drvfs Z: /mnt/z</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Some-Advanced-Tweaks-You-Might-Want\"><a href=\"#Some-Advanced-Tweaks-You-Might-Want\" class=\"headerlink\" title=\"Some Advanced Tweaks You Might Want\"></a>Some Advanced Tweaks You Might Want</h2><h3 id=\"Disabling-bell\"><a href=\"#Disabling-bell\" class=\"headerlink\" title=\"Disabling bell\"></a>Disabling bell</h3><p>By default you’ll hear an annoying “dang” every time you tab complete.\nThat is associated with the “Critical Stop” sound config in windows.\nTo stop it is shell specific but generally:</p>\n<p>For bash, put this into <code>.bashrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> bell-style none</span><br></pre></td></tr></table></figure>\n\n<p>For zsh, this works for me in <code>.zshrc</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unsetopt</span> beep</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Stop-Windows-From-Sharing-PATH\"><a href=\"#Stop-Windows-From-Sharing-PATH\" class=\"headerlink\" title=\"Stop Windows From Sharing PATH\"></a>Stop Windows From Sharing PATH</h3><p>By default Windows would copy PATH variables to WSL. This could be quite annoying\nif you use tools like pyenv, rvm or nvm and you also have python, ruby, or node installed\nin Windows as typically the stuff from Windows will take priority.</p>\n<p>To fix that you can create a DWORD <code>AppendNtPath</code> under\n<code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Lxss</code> and set the value to <code>0</code>.</p>\n<p><strong>Update:</strong> The above trick seems to only work for legacy WSL (aka Bash on Ubuntu on Windows).\nFor new users, create a DWORD <code>DistributionFlags</code> with value <code>fffffffd</code> under <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager</code>.\nThen go to Services and restart the LxssManager service.</p>\n<p>This is undocumented but described in <a href=\"https://github.com/Microsoft/WSL/issues/2048\" target=\"_blank\" rel=\"noopener\">WSL#2048</a>.</p>\n<h3 id=\"Allow-Linux-to-Open-File-Using-Preferred-Application-in-Windows\"><a href=\"#Allow-Linux-to-Open-File-Using-Preferred-Application-in-Windows\" class=\"headerlink\" title=\"Allow Linux to Open File Using Preferred Application in Windows\"></a>Allow Linux to Open File Using Preferred Application in Windows</h3><p>This is quite useful if you just want to say check an image as WSL is not shipped with a desktop.\nBy default the <code>xdg-open</code> binary can be used in linux but WSL is not shipped with that either.</p>\n<p>Luckily as WSL supports interop, there’s a trick:</p>\n<ol>\n<li><p>Create a file <code>/usr/bin/xdg-open</code> with content</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\">/mnt/c/Windows/System32/cmd.exe /C start <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Make it executable:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo chmod +x /usr/bin/xdg-open</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use it:</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> xdg-open a.png</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"Call-VSCode-from-Linux\"><a href=\"#Call-VSCode-from-Linux\" class=\"headerlink\" title=\"Call VSCode from Linux\"></a>Call VSCode from Linux</h3><p>You can technically get everything done with vi, but sometimes it’s easier to just use a GUI.</p>\n<p>For VSCode Mac version there’s an option to install it to terminal, but it just doesn’t exist in Windows.</p>\n<p>But with WSL interop, just put this in shell rc file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> code /mnt/c/Program\\ Files/Microsoft\\ VS\\ Code/Code.exe</span><br></pre></td></tr></table></figure>\n\n<p>To use it:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> code path/to/my/file</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Install-Python-Node-Ruby\"><a href=\"#Install-Python-Node-Ruby\" class=\"headerlink\" title=\"Install Python/Node/Ruby\"></a>Install Python/Node/Ruby</h3><p>I use pyenv and it’s the same as if you are in normal linux:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | zsh</span></span><br><span class=\"line\">pyenv install 3.6.5</span><br><span class=\"line\">pyenv shell 3.6.5</span><br></pre></td></tr></table></figure>\n\n<p>Similar solution can be used for node and ruby using nvm and rvm respectively.</p>"},{"title":"It's all about buffers: zero-copy, mmap and Java NIO","date":"2016-09-10T08:00:27.000Z","_content":"\nThere are use cases where data need to be read from source to a sink without modification. In code this might look quite simple: for example in Java, you may read data from one `InputStream` chunk by chunk into a small buffer (typically 8KB), and feed them into the `OutputStream`, or even better, you could create a `PipedInputStream`, which is basically just a util that maintains that buffer for you. However, if low latency is crucial to your software, this might be quite expensive from the OS perspective and I shall explain.\n\n## What happens under the hood\n\nWell, here's what happens when the above code is used:\n\n{% asset_img non_zero_copy.png %}\n\n1. JVM sends read() syscall. \n2. OS context switches to kernel mode and reads data into the input socket buffer.\n3. OS kernel then copies data into user buffer, and context switches back to user mode. read() returns.\n4. JVM processes code logic and sends write() syscall.\n5. OS context switches to kernel mode and copies data from user buffer to output socket buffer.\n6. OS returns to user mode and logic in JVM continues.\n\n<!-- more -->\n\nThis would be fine if latency and throughput aren't your service's concern or bottleneck, but it would be annoying if you do care, say for a static asset server. There are 4 context switches and 2 unnecessary copies for the above example.\n\n## OS-level zero copy for the rescue\n\nClearly in this use case, the copy from/to user space memory is totally unnecessary because we didn't do anything other than dumping data to a different socket. Zero copy can thus be used here to save the 2 extra copies. The actual implementation doesn't really have a standard and is up to the OS how to achieve that. Typically *nix systems will offer `sendfile()`. Its man page can be found [here](http://man7.org/linux/man-pages/man2/sendfile.2.html). Some say some operating systems have broken versions of that with one of them being OSX [link](https://blog.phusion.nl/2015/06/04/the-brokenness-of-the-sendfile-system-call/). Honestly with such low-level feature, I wouldn't trust Apple's BSD-like system so never tested there.\n\nWith that, the diagram would be like this:\n\n{% asset_img zero_copy.png %}\n\nYou may say OS still has to make a copy of the data in kernel memory space. Yes but from OS's perspective this is already zero-copy because there's no data copied from kernel space to user space. The reason why kernel needs to make a copy is because general hardware DMA access expects consecutive memory space (and hence the buffer). However this is avoidable if the hardware supports scatter-n-gather:\n\n{% asset_img scattergather.png %}\n\nA lot of web servers do support zero-copy such as Tomcat and Apache. For example apache's related doc can be found [here](https://httpd.apache.org/docs/2.4/mod/core.html#enablesendfile) but by default it's off.\n\nNote: Java's NIO offers this through `transferTo` ([doc](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-)).\n\n## mmap\n\nThe problem with the above zero-copy approach is that because there's no user mode actually involved, code cannot do anything other than piping the stream. However, there's a more expensive yet more useful approach - mmap, short for memory-map.\n\n{% asset_img mmap.png %}\n\nMmap allows code to map file to kernel memory and access that directly as if it were in the application user space, thus avoiding the unnecessary copy. As a tradeoff, that will still involve 4 context switches. But since OS maps certain chunk of file into memory, you get all benefits from OS virtual memory management - hot content can be intelligently cached efficiently, and all data are page-aligned thus no buffer copying is needed to write stuff back.\n\nHowever, nothing comes for free - while mmap does avoid that extra copy, it doesn't guarantee the code will always be faster - depending on the OS implementation, there may be quite a bit of setup and teardown overhead (since it needs to find the space and maintain it in the TLB and make sure to flush it after unmapping) and page fault gets much more expensive since kernel now needs to read from hardware (like disk) to update the memory space and TLB. Hence, if performance is this critical, benchmark is always needed as abusing mmap() may yield worse performance than simply doing the copy.\n\nThe corresponding class in Java is `MappedByteBuffer` from NIO package. It's actually a variation of `DirectByteBuffer` though there's no direct relationship between classes. The actual usage is out of scope of this post.\n\n## NIO DirectByteBuffer\n\nJava NIO introduces `ByteBuffer` which represents the buffer area used for channels. There are 3 main implementations of `ByteBuffer`:\n\n1. `HeapByteBuffer`\n\n    This is used when `ByteBuffer.allocate()` is called. It's called heap because it's maintained in JVM's heap space and hence you get all benefits like GC support and caching optimization. However, it's not page aligned, which means if you need to talk to native code through JNI, JVM would have to make a copy to the aligned buffer space.\n\n2. `DirectByteBuffer`\n\n    Used when `ByteBuffer.allocateDirect()` is called. JVM will allocate memory space outside the heap space using `malloc()`. Because it's not managed by JVM, your memory space is page-aligned and not subject to GC, which makes it perfect candidate for working with native code (e.g. when writing OpenGL stuff). However, you are then \"deteriorated\" to C programmer as you'll have to allocate and deallocate memory yourself to prevent memory leak.\n\n3. `MappedByteBuffer`\n\n    Used when `FileChannel.map()` is called. Similar to `DirectByteBuffer` this is also outside of JVM heap. It essentially functions as a wrapper around OS mmap() system call in order for code to directly manipulate mapped physical memory data.\n\n## Conclusion\n\n`sendfile()` and `mmap()` offer efficient, low-latency low-level solutions to data manipulation across sockets. Again, no code should assume these are silver bullets as real world scenarios may be complex and it might not be worth the effort to switch code to them if this is not the true bottleneck. For software engineering to get the most ROI, in most cases, it's better to \"make it right\" and then \"make it fast\". Without the guardrails offered by JVM, it's easy to make software much more vulnerable to crashing (I literally mean crashing, not exceptions) when it comes to complicated logic.\n\n## Quick Reference\n\n[Efficient data transfer through zero copy](https://www.ibm.com/developerworks/library/j-zerocopy/) - It also covers sendfile() performance comparison.\n\n[Getting started with new I/O (NIO)](http://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html)\n","source":"_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO.md","raw":"---\ntitle: \"It's all about buffers: zero-copy, mmap and Java NIO\"\ndate: 2016-09-10 01:00:27\ncategories:\n- OS\ntags:\n- io\n- os\n- java\n- unix\n---\n\nThere are use cases where data need to be read from source to a sink without modification. In code this might look quite simple: for example in Java, you may read data from one `InputStream` chunk by chunk into a small buffer (typically 8KB), and feed them into the `OutputStream`, or even better, you could create a `PipedInputStream`, which is basically just a util that maintains that buffer for you. However, if low latency is crucial to your software, this might be quite expensive from the OS perspective and I shall explain.\n\n## What happens under the hood\n\nWell, here's what happens when the above code is used:\n\n{% asset_img non_zero_copy.png %}\n\n1. JVM sends read() syscall. \n2. OS context switches to kernel mode and reads data into the input socket buffer.\n3. OS kernel then copies data into user buffer, and context switches back to user mode. read() returns.\n4. JVM processes code logic and sends write() syscall.\n5. OS context switches to kernel mode and copies data from user buffer to output socket buffer.\n6. OS returns to user mode and logic in JVM continues.\n\n<!-- more -->\n\nThis would be fine if latency and throughput aren't your service's concern or bottleneck, but it would be annoying if you do care, say for a static asset server. There are 4 context switches and 2 unnecessary copies for the above example.\n\n## OS-level zero copy for the rescue\n\nClearly in this use case, the copy from/to user space memory is totally unnecessary because we didn't do anything other than dumping data to a different socket. Zero copy can thus be used here to save the 2 extra copies. The actual implementation doesn't really have a standard and is up to the OS how to achieve that. Typically *nix systems will offer `sendfile()`. Its man page can be found [here](http://man7.org/linux/man-pages/man2/sendfile.2.html). Some say some operating systems have broken versions of that with one of them being OSX [link](https://blog.phusion.nl/2015/06/04/the-brokenness-of-the-sendfile-system-call/). Honestly with such low-level feature, I wouldn't trust Apple's BSD-like system so never tested there.\n\nWith that, the diagram would be like this:\n\n{% asset_img zero_copy.png %}\n\nYou may say OS still has to make a copy of the data in kernel memory space. Yes but from OS's perspective this is already zero-copy because there's no data copied from kernel space to user space. The reason why kernel needs to make a copy is because general hardware DMA access expects consecutive memory space (and hence the buffer). However this is avoidable if the hardware supports scatter-n-gather:\n\n{% asset_img scattergather.png %}\n\nA lot of web servers do support zero-copy such as Tomcat and Apache. For example apache's related doc can be found [here](https://httpd.apache.org/docs/2.4/mod/core.html#enablesendfile) but by default it's off.\n\nNote: Java's NIO offers this through `transferTo` ([doc](https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-)).\n\n## mmap\n\nThe problem with the above zero-copy approach is that because there's no user mode actually involved, code cannot do anything other than piping the stream. However, there's a more expensive yet more useful approach - mmap, short for memory-map.\n\n{% asset_img mmap.png %}\n\nMmap allows code to map file to kernel memory and access that directly as if it were in the application user space, thus avoiding the unnecessary copy. As a tradeoff, that will still involve 4 context switches. But since OS maps certain chunk of file into memory, you get all benefits from OS virtual memory management - hot content can be intelligently cached efficiently, and all data are page-aligned thus no buffer copying is needed to write stuff back.\n\nHowever, nothing comes for free - while mmap does avoid that extra copy, it doesn't guarantee the code will always be faster - depending on the OS implementation, there may be quite a bit of setup and teardown overhead (since it needs to find the space and maintain it in the TLB and make sure to flush it after unmapping) and page fault gets much more expensive since kernel now needs to read from hardware (like disk) to update the memory space and TLB. Hence, if performance is this critical, benchmark is always needed as abusing mmap() may yield worse performance than simply doing the copy.\n\nThe corresponding class in Java is `MappedByteBuffer` from NIO package. It's actually a variation of `DirectByteBuffer` though there's no direct relationship between classes. The actual usage is out of scope of this post.\n\n## NIO DirectByteBuffer\n\nJava NIO introduces `ByteBuffer` which represents the buffer area used for channels. There are 3 main implementations of `ByteBuffer`:\n\n1. `HeapByteBuffer`\n\n    This is used when `ByteBuffer.allocate()` is called. It's called heap because it's maintained in JVM's heap space and hence you get all benefits like GC support and caching optimization. However, it's not page aligned, which means if you need to talk to native code through JNI, JVM would have to make a copy to the aligned buffer space.\n\n2. `DirectByteBuffer`\n\n    Used when `ByteBuffer.allocateDirect()` is called. JVM will allocate memory space outside the heap space using `malloc()`. Because it's not managed by JVM, your memory space is page-aligned and not subject to GC, which makes it perfect candidate for working with native code (e.g. when writing OpenGL stuff). However, you are then \"deteriorated\" to C programmer as you'll have to allocate and deallocate memory yourself to prevent memory leak.\n\n3. `MappedByteBuffer`\n\n    Used when `FileChannel.map()` is called. Similar to `DirectByteBuffer` this is also outside of JVM heap. It essentially functions as a wrapper around OS mmap() system call in order for code to directly manipulate mapped physical memory data.\n\n## Conclusion\n\n`sendfile()` and `mmap()` offer efficient, low-latency low-level solutions to data manipulation across sockets. Again, no code should assume these are silver bullets as real world scenarios may be complex and it might not be worth the effort to switch code to them if this is not the true bottleneck. For software engineering to get the most ROI, in most cases, it's better to \"make it right\" and then \"make it fast\". Without the guardrails offered by JVM, it's easy to make software much more vulnerable to crashing (I literally mean crashing, not exceptions) when it comes to complicated logic.\n\n## Quick Reference\n\n[Efficient data transfer through zero copy](https://www.ibm.com/developerworks/library/j-zerocopy/) - It also covers sendfile() performance comparison.\n\n[Getting started with new I/O (NIO)](http://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html)\n","slug":"It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO","published":1,"updated":"2020-05-04T00:05:42.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi30005sxmg1ghxg9je","content":"<p>There are use cases where data need to be read from source to a sink without modification. In code this might look quite simple: for example in Java, you may read data from one <code>InputStream</code> chunk by chunk into a small buffer (typically 8KB), and feed them into the <code>OutputStream</code>, or even better, you could create a <code>PipedInputStream</code>, which is basically just a util that maintains that buffer for you. However, if low latency is crucial to your software, this might be quite expensive from the OS perspective and I shall explain.</p>\n<h2 id=\"What-happens-under-the-hood\"><a href=\"#What-happens-under-the-hood\" class=\"headerlink\" title=\"What happens under the hood\"></a>What happens under the hood</h2><p>Well, here’s what happens when the above code is used:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/non_zero_copy.png\">\n\n<ol>\n<li>JVM sends read() syscall. </li>\n<li>OS context switches to kernel mode and reads data into the input socket buffer.</li>\n<li>OS kernel then copies data into user buffer, and context switches back to user mode. read() returns.</li>\n<li>JVM processes code logic and sends write() syscall.</li>\n<li>OS context switches to kernel mode and copies data from user buffer to output socket buffer.</li>\n<li>OS returns to user mode and logic in JVM continues.</li>\n</ol>\n<a id=\"more\"></a>\n\n<p>This would be fine if latency and throughput aren’t your service’s concern or bottleneck, but it would be annoying if you do care, say for a static asset server. There are 4 context switches and 2 unnecessary copies for the above example.</p>\n<h2 id=\"OS-level-zero-copy-for-the-rescue\"><a href=\"#OS-level-zero-copy-for-the-rescue\" class=\"headerlink\" title=\"OS-level zero copy for the rescue\"></a>OS-level zero copy for the rescue</h2><p>Clearly in this use case, the copy from/to user space memory is totally unnecessary because we didn’t do anything other than dumping data to a different socket. Zero copy can thus be used here to save the 2 extra copies. The actual implementation doesn’t really have a standard and is up to the OS how to achieve that. Typically *nix systems will offer <code>sendfile()</code>. Its man page can be found <a href=\"http://man7.org/linux/man-pages/man2/sendfile.2.html\" target=\"_blank\" rel=\"noopener\">here</a>. Some say some operating systems have broken versions of that with one of them being OSX <a href=\"https://blog.phusion.nl/2015/06/04/the-brokenness-of-the-sendfile-system-call/\" target=\"_blank\" rel=\"noopener\">link</a>. Honestly with such low-level feature, I wouldn’t trust Apple’s BSD-like system so never tested there.</p>\n<p>With that, the diagram would be like this:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/zero_copy.png\">\n\n<p>You may say OS still has to make a copy of the data in kernel memory space. Yes but from OS’s perspective this is already zero-copy because there’s no data copied from kernel space to user space. The reason why kernel needs to make a copy is because general hardware DMA access expects consecutive memory space (and hence the buffer). However this is avoidable if the hardware supports scatter-n-gather:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/scattergather.png\">\n\n<p>A lot of web servers do support zero-copy such as Tomcat and Apache. For example apache’s related doc can be found <a href=\"https://httpd.apache.org/docs/2.4/mod/core.html#enablesendfile\" target=\"_blank\" rel=\"noopener\">here</a> but by default it’s off.</p>\n<p>Note: Java’s NIO offers this through <code>transferTo</code> (<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-\" target=\"_blank\" rel=\"noopener\">doc</a>).</p>\n<h2 id=\"mmap\"><a href=\"#mmap\" class=\"headerlink\" title=\"mmap\"></a>mmap</h2><p>The problem with the above zero-copy approach is that because there’s no user mode actually involved, code cannot do anything other than piping the stream. However, there’s a more expensive yet more useful approach - mmap, short for memory-map.</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/mmap.png\">\n\n<p>Mmap allows code to map file to kernel memory and access that directly as if it were in the application user space, thus avoiding the unnecessary copy. As a tradeoff, that will still involve 4 context switches. But since OS maps certain chunk of file into memory, you get all benefits from OS virtual memory management - hot content can be intelligently cached efficiently, and all data are page-aligned thus no buffer copying is needed to write stuff back.</p>\n<p>However, nothing comes for free - while mmap does avoid that extra copy, it doesn’t guarantee the code will always be faster - depending on the OS implementation, there may be quite a bit of setup and teardown overhead (since it needs to find the space and maintain it in the TLB and make sure to flush it after unmapping) and page fault gets much more expensive since kernel now needs to read from hardware (like disk) to update the memory space and TLB. Hence, if performance is this critical, benchmark is always needed as abusing mmap() may yield worse performance than simply doing the copy.</p>\n<p>The corresponding class in Java is <code>MappedByteBuffer</code> from NIO package. It’s actually a variation of <code>DirectByteBuffer</code> though there’s no direct relationship between classes. The actual usage is out of scope of this post.</p>\n<h2 id=\"NIO-DirectByteBuffer\"><a href=\"#NIO-DirectByteBuffer\" class=\"headerlink\" title=\"NIO DirectByteBuffer\"></a>NIO DirectByteBuffer</h2><p>Java NIO introduces <code>ByteBuffer</code> which represents the buffer area used for channels. There are 3 main implementations of <code>ByteBuffer</code>:</p>\n<ol>\n<li><p><code>HeapByteBuffer</code></p>\n<p> This is used when <code>ByteBuffer.allocate()</code> is called. It’s called heap because it’s maintained in JVM’s heap space and hence you get all benefits like GC support and caching optimization. However, it’s not page aligned, which means if you need to talk to native code through JNI, JVM would have to make a copy to the aligned buffer space.</p>\n</li>\n<li><p><code>DirectByteBuffer</code></p>\n<p> Used when <code>ByteBuffer.allocateDirect()</code> is called. JVM will allocate memory space outside the heap space using <code>malloc()</code>. Because it’s not managed by JVM, your memory space is page-aligned and not subject to GC, which makes it perfect candidate for working with native code (e.g. when writing OpenGL stuff). However, you are then “deteriorated” to C programmer as you’ll have to allocate and deallocate memory yourself to prevent memory leak.</p>\n</li>\n<li><p><code>MappedByteBuffer</code></p>\n<p> Used when <code>FileChannel.map()</code> is called. Similar to <code>DirectByteBuffer</code> this is also outside of JVM heap. It essentially functions as a wrapper around OS mmap() system call in order for code to directly manipulate mapped physical memory data.</p>\n</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p><code>sendfile()</code> and <code>mmap()</code> offer efficient, low-latency low-level solutions to data manipulation across sockets. Again, no code should assume these are silver bullets as real world scenarios may be complex and it might not be worth the effort to switch code to them if this is not the true bottleneck. For software engineering to get the most ROI, in most cases, it’s better to “make it right” and then “make it fast”. Without the guardrails offered by JVM, it’s easy to make software much more vulnerable to crashing (I literally mean crashing, not exceptions) when it comes to complicated logic.</p>\n<h2 id=\"Quick-Reference\"><a href=\"#Quick-Reference\" class=\"headerlink\" title=\"Quick Reference\"></a>Quick Reference</h2><p><a href=\"https://www.ibm.com/developerworks/library/j-zerocopy/\" target=\"_blank\" rel=\"noopener\">Efficient data transfer through zero copy</a> - It also covers sendfile() performance comparison.</p>\n<p><a href=\"http://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html\" target=\"_blank\" rel=\"noopener\">Getting started with new I/O (NIO)</a></p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>There are use cases where data need to be read from source to a sink without modification. In code this might look quite simple: for example in Java, you may read data from one <code>InputStream</code> chunk by chunk into a small buffer (typically 8KB), and feed them into the <code>OutputStream</code>, or even better, you could create a <code>PipedInputStream</code>, which is basically just a util that maintains that buffer for you. However, if low latency is crucial to your software, this might be quite expensive from the OS perspective and I shall explain.</p>\n<h2 id=\"What-happens-under-the-hood\"><a href=\"#What-happens-under-the-hood\" class=\"headerlink\" title=\"What happens under the hood\"></a>What happens under the hood</h2><p>Well, here’s what happens when the above code is used:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/non_zero_copy.png\">\n\n<ol>\n<li>JVM sends read() syscall. </li>\n<li>OS context switches to kernel mode and reads data into the input socket buffer.</li>\n<li>OS kernel then copies data into user buffer, and context switches back to user mode. read() returns.</li>\n<li>JVM processes code logic and sends write() syscall.</li>\n<li>OS context switches to kernel mode and copies data from user buffer to output socket buffer.</li>\n<li>OS returns to user mode and logic in JVM continues.</li>\n</ol>","more":"<p>This would be fine if latency and throughput aren’t your service’s concern or bottleneck, but it would be annoying if you do care, say for a static asset server. There are 4 context switches and 2 unnecessary copies for the above example.</p>\n<h2 id=\"OS-level-zero-copy-for-the-rescue\"><a href=\"#OS-level-zero-copy-for-the-rescue\" class=\"headerlink\" title=\"OS-level zero copy for the rescue\"></a>OS-level zero copy for the rescue</h2><p>Clearly in this use case, the copy from/to user space memory is totally unnecessary because we didn’t do anything other than dumping data to a different socket. Zero copy can thus be used here to save the 2 extra copies. The actual implementation doesn’t really have a standard and is up to the OS how to achieve that. Typically *nix systems will offer <code>sendfile()</code>. Its man page can be found <a href=\"http://man7.org/linux/man-pages/man2/sendfile.2.html\" target=\"_blank\" rel=\"noopener\">here</a>. Some say some operating systems have broken versions of that with one of them being OSX <a href=\"https://blog.phusion.nl/2015/06/04/the-brokenness-of-the-sendfile-system-call/\" target=\"_blank\" rel=\"noopener\">link</a>. Honestly with such low-level feature, I wouldn’t trust Apple’s BSD-like system so never tested there.</p>\n<p>With that, the diagram would be like this:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/zero_copy.png\">\n\n<p>You may say OS still has to make a copy of the data in kernel memory space. Yes but from OS’s perspective this is already zero-copy because there’s no data copied from kernel space to user space. The reason why kernel needs to make a copy is because general hardware DMA access expects consecutive memory space (and hence the buffer). However this is avoidable if the hardware supports scatter-n-gather:</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/scattergather.png\">\n\n<p>A lot of web servers do support zero-copy such as Tomcat and Apache. For example apache’s related doc can be found <a href=\"https://httpd.apache.org/docs/2.4/mod/core.html#enablesendfile\" target=\"_blank\" rel=\"noopener\">here</a> but by default it’s off.</p>\n<p>Note: Java’s NIO offers this through <code>transferTo</code> (<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/FileChannel.html#transferTo-long-long-java.nio.channels.WritableByteChannel-\" target=\"_blank\" rel=\"noopener\">doc</a>).</p>\n<h2 id=\"mmap\"><a href=\"#mmap\" class=\"headerlink\" title=\"mmap\"></a>mmap</h2><p>The problem with the above zero-copy approach is that because there’s no user mode actually involved, code cannot do anything other than piping the stream. However, there’s a more expensive yet more useful approach - mmap, short for memory-map.</p>\n<img src=\"/2016/09/10/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/mmap.png\">\n\n<p>Mmap allows code to map file to kernel memory and access that directly as if it were in the application user space, thus avoiding the unnecessary copy. As a tradeoff, that will still involve 4 context switches. But since OS maps certain chunk of file into memory, you get all benefits from OS virtual memory management - hot content can be intelligently cached efficiently, and all data are page-aligned thus no buffer copying is needed to write stuff back.</p>\n<p>However, nothing comes for free - while mmap does avoid that extra copy, it doesn’t guarantee the code will always be faster - depending on the OS implementation, there may be quite a bit of setup and teardown overhead (since it needs to find the space and maintain it in the TLB and make sure to flush it after unmapping) and page fault gets much more expensive since kernel now needs to read from hardware (like disk) to update the memory space and TLB. Hence, if performance is this critical, benchmark is always needed as abusing mmap() may yield worse performance than simply doing the copy.</p>\n<p>The corresponding class in Java is <code>MappedByteBuffer</code> from NIO package. It’s actually a variation of <code>DirectByteBuffer</code> though there’s no direct relationship between classes. The actual usage is out of scope of this post.</p>\n<h2 id=\"NIO-DirectByteBuffer\"><a href=\"#NIO-DirectByteBuffer\" class=\"headerlink\" title=\"NIO DirectByteBuffer\"></a>NIO DirectByteBuffer</h2><p>Java NIO introduces <code>ByteBuffer</code> which represents the buffer area used for channels. There are 3 main implementations of <code>ByteBuffer</code>:</p>\n<ol>\n<li><p><code>HeapByteBuffer</code></p>\n<p> This is used when <code>ByteBuffer.allocate()</code> is called. It’s called heap because it’s maintained in JVM’s heap space and hence you get all benefits like GC support and caching optimization. However, it’s not page aligned, which means if you need to talk to native code through JNI, JVM would have to make a copy to the aligned buffer space.</p>\n</li>\n<li><p><code>DirectByteBuffer</code></p>\n<p> Used when <code>ByteBuffer.allocateDirect()</code> is called. JVM will allocate memory space outside the heap space using <code>malloc()</code>. Because it’s not managed by JVM, your memory space is page-aligned and not subject to GC, which makes it perfect candidate for working with native code (e.g. when writing OpenGL stuff). However, you are then “deteriorated” to C programmer as you’ll have to allocate and deallocate memory yourself to prevent memory leak.</p>\n</li>\n<li><p><code>MappedByteBuffer</code></p>\n<p> Used when <code>FileChannel.map()</code> is called. Similar to <code>DirectByteBuffer</code> this is also outside of JVM heap. It essentially functions as a wrapper around OS mmap() system call in order for code to directly manipulate mapped physical memory data.</p>\n</li>\n</ol>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p><code>sendfile()</code> and <code>mmap()</code> offer efficient, low-latency low-level solutions to data manipulation across sockets. Again, no code should assume these are silver bullets as real world scenarios may be complex and it might not be worth the effort to switch code to them if this is not the true bottleneck. For software engineering to get the most ROI, in most cases, it’s better to “make it right” and then “make it fast”. Without the guardrails offered by JVM, it’s easy to make software much more vulnerable to crashing (I literally mean crashing, not exceptions) when it comes to complicated logic.</p>\n<h2 id=\"Quick-Reference\"><a href=\"#Quick-Reference\" class=\"headerlink\" title=\"Quick Reference\"></a>Quick Reference</h2><p><a href=\"https://www.ibm.com/developerworks/library/j-zerocopy/\" target=\"_blank\" rel=\"noopener\">Efficient data transfer through zero copy</a> - It also covers sendfile() performance comparison.</p>\n<p><a href=\"http://www.ibm.com/developerworks/java/tutorials/j-nio/j-nio.html\" target=\"_blank\" rel=\"noopener\">Getting started with new I/O (NIO)</a></p>"},{"title":"Make Wireless BackHaul Great Again: Disable Orbi 2.4G Backhaul","date":"2020-04-05T04:14:57.000Z","_content":"\n## TL;DR;\nI was able to \"break\" Orbi's 2.4G backhaul fallback\nand hence force it onto 5G.\n\nSo instead of this\n\n<img src=\"{% asset_path slowspeed.png %}\" style=\"width: 400px\" />\n\nI got this:\n\n<img src=\"{% asset_path speed.png %}\" style=\"width: 400px\" />\n\nThe solution isn't clean. Basically telnet to the satellite and then\n```console\nroot@RBS20:/# config set wlg_sta_ssid=<original ssid>_disabled\nroot@RBS20:/# config commit \n```\n\nThen reboot.\n\nMore details and investigation<br>\n↓\n\n<!-- more -->\n\n## Background\n\nA while back, I got the Netgear Orbi [RBK20](https://www.netgear.com/support/product/RBK20.aspx)\nto replace my original not so reliable powerline setup.\n\n{% asset_img RBK20.png %}\n\nIt's a wifi mesh solution that aims to solve the problem\nwhere traditional single pointer router fails -\nto provide good signal coverage\nin complex indoor environment with walls in between rooms.\nThis is esp. important in the AC world where\nthe 5G signal falls short as it tends to be more easily blocked/\nthan 2.4G.\n\nOne thing worth mentioning though is that Orbi isn't\na true mesh system, that is, to support 802.11s mesh standard.\nA true mesh system allows satellites to cooperate together\nthrough a routing algorithm to find the optimal data transfer path\nbut Orbi basically supports only star topology or daisy chaining.\nThat said though, in practice, some of the \"advanced\" true mesh systems\non the other hand suffer from lack of dedicated backhaul channel\nfor inter satellite uplink (e.g. Google Wifi) and hence actually\nperform much worse in reality as they essentially just become\nmore advanced repeaters.\n\n## Problem\n\nIn order for Orbi to have max power, we need to\nensure that Orbi has the dedicated backhaul operate in 5G mode,\notherwise anything connected to satellites would be bound to\n2.4G speed which is 192Mbps.\n\nIt's not unusable technically but it sort of defeats the purpose.\nWhat makes things worse is that Netgear decides on a strategy\nthat if 5G backhaul isn't stable, it would fall back onto 2.4G,\nwhich isn't dedicated but shared with regular 2.4G radio.\nThis isn't a bad idea per se as home layout may be complex so\nthey sacrifice throughtput in favor of usability in certain\nscenarios.\n\nHowever this setup doesn't work well in practice.\nFor whatever reason, the system would fall back onto 2.4G\nrandomly even if 5G signal is perfectly fine. And the only\nway to fix that would be to power cycle the satellite.\n\n## Investigation\n\nSince Orbi is OpenWRT based, I took a look at the configs\nthat potentially control the behavior and here they are:\n\n```console\nroot@RBS20:/# uci show | grep WiFiLink\n...\nrepacd.WiFiLink.RSSIThresholdFar='-75'\nrepacd.WiFiLink.RSSIThresholdFar5g='-82'\nrepacd.WiFiLink.RSSIThresholdFar24g='-76'\nrepacd.WiFiLink.RSSIThresholdNear='-60'\nrepacd.WiFiLink.RSSIThresholdMin='-75'\nrepacd.WiFiLink.RSSIThresholdPrefer2GBackhaul='-82'\nrepacd.WiFiLink.2GBackhaulSwitchDownTime='10'\nrepacd.WiFiLink.MaxMeasuringStateAttempts='30'\nrepacd.WiFiLink.DaisyChain='1'\nrepacd.WiFiLink.RateNumMeasurements='5'\nrepacd.WiFiLink.RateThresholdMin5GInPercent='35'\nrepacd.WiFiLink.RateThresholdMax5GInPercent='95'\nrepacd.WiFiLink.RateThresholdPrefer2GBackhaulInPercent='5'\nrepacd.WiFiLink.5GBackhaulBadlinkTimeout='60'\nrepacd.WiFiLink.BSSIDAssociationTimeout='170'\nrepacd.WiFiLink.RateScalingFactor='85'\nrepacd.WiFiLink.5GBackhaulEvalTimeShort='330'\nrepacd.WiFiLink.5GBackhaulEvalTimeLong='1800'\nrepacd.WiFiLink.2GBackhaulEvalTime='1800'\n...\n```\n\nSo in theory 2G backhaul should only be preferred\nafter signal drops below -82dbm or rate is below 5%/35%.\nHowever in practice this almost is never the case.\n\n```console\n# From router side:\nroot@RBR20:/# wlanconfig ath11 list\nADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS\n ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE\n                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0\n   b              0           AWPSM 18:46:39     RSN WME IEEE80211_MODE_11AC_VHT80   0\n```\n\nRSSI here is 51 which indicates roughly -44dbm\nwhich is perfectly fine. It's possible that the number would\nfluctuate during operation but as you see the min value\nis still way above the threshold. Also in practice,\nonce Orbi picks 2.4G it will stick there which doesn't make sense\nbut since Orbi's software isn't open sourced there's no way to know\nexactly how it messes things up (looking at you Netgear developers).\n\n## A Hacky Solution\n\n### Enable Telnet\nGo to http://&lt;satellite ip&gt;/debug.htm, log in with router username & password\nand check \"Enable Telnet\".\n\n{% asset_img telnet.png %}\n\n### Initial Attempt\nSince we cannot alter Netgear's software behavior directly,\nwe have to somehow break the 2.4G connection to force it onto 5G.\n\nMy initial thought was to disable the 2.4G wifi interface.\n(Spoiler: this does not work somehow).\n\nThis is doable via OpenWRT's config system.\n\n```console\n# Show all wifi interfaces. The 2.4G is already disabled here but in normal operation it will show something.\nroot@RBS20:/# iwconfig\nath01     IEEE 802.11b  ESSID:\"NETGEAR_ORBI_hidden52\"\n          Mode:Managed  Frequency:2.412 GHz  Access Point: Not-Associated\n          Bit Rate:0 kb/s   Tx-Power:25 dBm\n          RTS thr:off   Fragment thr:off\n          Power Management:off\n          Link Quality=0/94  Signal level=-95 dBm  Noise level=-95 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n\nroot@RBS20:/# vi /etc/config/wireless\nconfig wifi-iface\n        option device 'wifi0'\n        option network '0'\n        option bridge 'br0'\n        option mode 'sta'\n        option wds '1'\n        option athnewind '1'\n        option vap_ind '0'\n        option backhaul '1'\n        option wsplcd_unmanaged '1'\n        option repacd_security_unmanaged '1'\n        option dropmdns '0'\n        option ssid 'NETGEAR_ORBI_hidden52'\n        option encryption 'psk2+ccmp'\n        option ifname 'ath01'\n        option wps_config 'virtual_push_button physical_push_button'\n        option wps_pbc '1'\n        option dyn_bw_rts '0'\n        option disabled '0'\n```\n\n^ From there we can see `ath01` is bound to physical interface `wifi0`.\nWe can just change the disabled value from 0 to 1.\nThen `uci commit` will persist the value.\n\nHowever for some reason, Orbi will restore values in OpenWRT config,\npresumably for system integrity reason. YMMV but at least this does\nnot work for RBK20 system.\n\n### The Hacky Attempt\nWhile Orbi restores uci configs, it does keep its own configs\nthat are alterable via `config`.\n\nThen essentially the solution becomes that we can change the 2.4G\nbackhaul SSID such that it cannot find the right one.\n\nIn my system the original SSID is `NETGEAR_ORBI_hidden52` from\n`iwconfig`.\nWe can grab all related configs from\n\n```console\nroot@RBS20:/# config show | grep hidden52\nwlg_ap_bh_ssid=NETGEAR_ORBI_hidden52\nwla_ap_bh_ssid=NETGEAR_ORBI_hidden52\nwla_sta_ssid=NETGEAR_ORBI_hidden52\nwlg_sta_ssid=NETGEAR_ORBI_hidden52\n```\n\nHere anything starts with `wla` is 5G and `wlg` is 2.4G.\n\nThen we can do\n\n```console\nroot@RBS20:/# config set wlg_sta_ssid=NETGEAR_ORBI_hidden52_disabled\nroot@RBS20:/# config commit\n```\n\nThe `_disabled` suffix is arbitrary with the idea to prevent\nOrbi from connecting to router via 2.4G.\n\n`wlg_ap_bh_ssid` does not need to be set. The `ap` setup will\nautomatically follow the `sta` setup.\n\n`nvram show | grep ssid` should now show the persisted value.\n\nIn RBS20, if you use `reboot` to restart the system,\nit will somehow get stuck with pink led light.\nSo I always just power cycle it, which works just fine.\n\nTo confirm this works, on satellite side, once restarted,\n`iwconfig` should show the new SSID and signal strength should be\n-95dbm indicating it's disconnected.\n\nEnable Telnet in router and log into it. \n```\n# ath01 is 2.4G wifi interface. It should have nothing connected now.\nroot@RBR20:/# wlanconfig ath01 list\n# ath11 is 5G. It should have satellite(s) connected.\nroot@RBR20:/# wlanconfig ath11 list\nADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS\n ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE\n                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0\n   b              0           AWPSM 19:26:27     RSN WME IEEE80211_MODE_11AC_VHT80   0\n```\n","source":"_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul.md","raw":"---\ntitle: 'Make Wireless BackHaul Great Again: Disable Orbi 2.4G Backhaul'\ndate: 2020-04-04 21:14:57\ntags: wifi, openwrt\n---\n\n## TL;DR;\nI was able to \"break\" Orbi's 2.4G backhaul fallback\nand hence force it onto 5G.\n\nSo instead of this\n\n<img src=\"{% asset_path slowspeed.png %}\" style=\"width: 400px\" />\n\nI got this:\n\n<img src=\"{% asset_path speed.png %}\" style=\"width: 400px\" />\n\nThe solution isn't clean. Basically telnet to the satellite and then\n```console\nroot@RBS20:/# config set wlg_sta_ssid=<original ssid>_disabled\nroot@RBS20:/# config commit \n```\n\nThen reboot.\n\nMore details and investigation<br>\n↓\n\n<!-- more -->\n\n## Background\n\nA while back, I got the Netgear Orbi [RBK20](https://www.netgear.com/support/product/RBK20.aspx)\nto replace my original not so reliable powerline setup.\n\n{% asset_img RBK20.png %}\n\nIt's a wifi mesh solution that aims to solve the problem\nwhere traditional single pointer router fails -\nto provide good signal coverage\nin complex indoor environment with walls in between rooms.\nThis is esp. important in the AC world where\nthe 5G signal falls short as it tends to be more easily blocked/\nthan 2.4G.\n\nOne thing worth mentioning though is that Orbi isn't\na true mesh system, that is, to support 802.11s mesh standard.\nA true mesh system allows satellites to cooperate together\nthrough a routing algorithm to find the optimal data transfer path\nbut Orbi basically supports only star topology or daisy chaining.\nThat said though, in practice, some of the \"advanced\" true mesh systems\non the other hand suffer from lack of dedicated backhaul channel\nfor inter satellite uplink (e.g. Google Wifi) and hence actually\nperform much worse in reality as they essentially just become\nmore advanced repeaters.\n\n## Problem\n\nIn order for Orbi to have max power, we need to\nensure that Orbi has the dedicated backhaul operate in 5G mode,\notherwise anything connected to satellites would be bound to\n2.4G speed which is 192Mbps.\n\nIt's not unusable technically but it sort of defeats the purpose.\nWhat makes things worse is that Netgear decides on a strategy\nthat if 5G backhaul isn't stable, it would fall back onto 2.4G,\nwhich isn't dedicated but shared with regular 2.4G radio.\nThis isn't a bad idea per se as home layout may be complex so\nthey sacrifice throughtput in favor of usability in certain\nscenarios.\n\nHowever this setup doesn't work well in practice.\nFor whatever reason, the system would fall back onto 2.4G\nrandomly even if 5G signal is perfectly fine. And the only\nway to fix that would be to power cycle the satellite.\n\n## Investigation\n\nSince Orbi is OpenWRT based, I took a look at the configs\nthat potentially control the behavior and here they are:\n\n```console\nroot@RBS20:/# uci show | grep WiFiLink\n...\nrepacd.WiFiLink.RSSIThresholdFar='-75'\nrepacd.WiFiLink.RSSIThresholdFar5g='-82'\nrepacd.WiFiLink.RSSIThresholdFar24g='-76'\nrepacd.WiFiLink.RSSIThresholdNear='-60'\nrepacd.WiFiLink.RSSIThresholdMin='-75'\nrepacd.WiFiLink.RSSIThresholdPrefer2GBackhaul='-82'\nrepacd.WiFiLink.2GBackhaulSwitchDownTime='10'\nrepacd.WiFiLink.MaxMeasuringStateAttempts='30'\nrepacd.WiFiLink.DaisyChain='1'\nrepacd.WiFiLink.RateNumMeasurements='5'\nrepacd.WiFiLink.RateThresholdMin5GInPercent='35'\nrepacd.WiFiLink.RateThresholdMax5GInPercent='95'\nrepacd.WiFiLink.RateThresholdPrefer2GBackhaulInPercent='5'\nrepacd.WiFiLink.5GBackhaulBadlinkTimeout='60'\nrepacd.WiFiLink.BSSIDAssociationTimeout='170'\nrepacd.WiFiLink.RateScalingFactor='85'\nrepacd.WiFiLink.5GBackhaulEvalTimeShort='330'\nrepacd.WiFiLink.5GBackhaulEvalTimeLong='1800'\nrepacd.WiFiLink.2GBackhaulEvalTime='1800'\n...\n```\n\nSo in theory 2G backhaul should only be preferred\nafter signal drops below -82dbm or rate is below 5%/35%.\nHowever in practice this almost is never the case.\n\n```console\n# From router side:\nroot@RBR20:/# wlanconfig ath11 list\nADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS\n ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE\n                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0\n   b              0           AWPSM 18:46:39     RSN WME IEEE80211_MODE_11AC_VHT80   0\n```\n\nRSSI here is 51 which indicates roughly -44dbm\nwhich is perfectly fine. It's possible that the number would\nfluctuate during operation but as you see the min value\nis still way above the threshold. Also in practice,\nonce Orbi picks 2.4G it will stick there which doesn't make sense\nbut since Orbi's software isn't open sourced there's no way to know\nexactly how it messes things up (looking at you Netgear developers).\n\n## A Hacky Solution\n\n### Enable Telnet\nGo to http://&lt;satellite ip&gt;/debug.htm, log in with router username & password\nand check \"Enable Telnet\".\n\n{% asset_img telnet.png %}\n\n### Initial Attempt\nSince we cannot alter Netgear's software behavior directly,\nwe have to somehow break the 2.4G connection to force it onto 5G.\n\nMy initial thought was to disable the 2.4G wifi interface.\n(Spoiler: this does not work somehow).\n\nThis is doable via OpenWRT's config system.\n\n```console\n# Show all wifi interfaces. The 2.4G is already disabled here but in normal operation it will show something.\nroot@RBS20:/# iwconfig\nath01     IEEE 802.11b  ESSID:\"NETGEAR_ORBI_hidden52\"\n          Mode:Managed  Frequency:2.412 GHz  Access Point: Not-Associated\n          Bit Rate:0 kb/s   Tx-Power:25 dBm\n          RTS thr:off   Fragment thr:off\n          Power Management:off\n          Link Quality=0/94  Signal level=-95 dBm  Noise level=-95 dBm\n          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0\n          Tx excessive retries:0  Invalid misc:0   Missed beacon:0\n\nroot@RBS20:/# vi /etc/config/wireless\nconfig wifi-iface\n        option device 'wifi0'\n        option network '0'\n        option bridge 'br0'\n        option mode 'sta'\n        option wds '1'\n        option athnewind '1'\n        option vap_ind '0'\n        option backhaul '1'\n        option wsplcd_unmanaged '1'\n        option repacd_security_unmanaged '1'\n        option dropmdns '0'\n        option ssid 'NETGEAR_ORBI_hidden52'\n        option encryption 'psk2+ccmp'\n        option ifname 'ath01'\n        option wps_config 'virtual_push_button physical_push_button'\n        option wps_pbc '1'\n        option dyn_bw_rts '0'\n        option disabled '0'\n```\n\n^ From there we can see `ath01` is bound to physical interface `wifi0`.\nWe can just change the disabled value from 0 to 1.\nThen `uci commit` will persist the value.\n\nHowever for some reason, Orbi will restore values in OpenWRT config,\npresumably for system integrity reason. YMMV but at least this does\nnot work for RBK20 system.\n\n### The Hacky Attempt\nWhile Orbi restores uci configs, it does keep its own configs\nthat are alterable via `config`.\n\nThen essentially the solution becomes that we can change the 2.4G\nbackhaul SSID such that it cannot find the right one.\n\nIn my system the original SSID is `NETGEAR_ORBI_hidden52` from\n`iwconfig`.\nWe can grab all related configs from\n\n```console\nroot@RBS20:/# config show | grep hidden52\nwlg_ap_bh_ssid=NETGEAR_ORBI_hidden52\nwla_ap_bh_ssid=NETGEAR_ORBI_hidden52\nwla_sta_ssid=NETGEAR_ORBI_hidden52\nwlg_sta_ssid=NETGEAR_ORBI_hidden52\n```\n\nHere anything starts with `wla` is 5G and `wlg` is 2.4G.\n\nThen we can do\n\n```console\nroot@RBS20:/# config set wlg_sta_ssid=NETGEAR_ORBI_hidden52_disabled\nroot@RBS20:/# config commit\n```\n\nThe `_disabled` suffix is arbitrary with the idea to prevent\nOrbi from connecting to router via 2.4G.\n\n`wlg_ap_bh_ssid` does not need to be set. The `ap` setup will\nautomatically follow the `sta` setup.\n\n`nvram show | grep ssid` should now show the persisted value.\n\nIn RBS20, if you use `reboot` to restart the system,\nit will somehow get stuck with pink led light.\nSo I always just power cycle it, which works just fine.\n\nTo confirm this works, on satellite side, once restarted,\n`iwconfig` should show the new SSID and signal strength should be\n-95dbm indicating it's disconnected.\n\nEnable Telnet in router and log into it. \n```\n# ath01 is 2.4G wifi interface. It should have nothing connected now.\nroot@RBR20:/# wlanconfig ath01 list\n# ath11 is 5G. It should have satellite(s) connected.\nroot@RBR20:/# wlanconfig ath11 list\nADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS\n ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE\n                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0\n   b              0           AWPSM 19:26:27     RSN WME IEEE80211_MODE_11AC_VHT80   0\n```\n","slug":"Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul","published":1,"updated":"2020-05-04T00:05:42.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi30006sxmgmf8zfb1e","content":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR;\"></a>TL;DR;</h2><p>I was able to “break” Orbi’s 2.4G backhaul fallback\nand hence force it onto 5G.</p>\n<p>So instead of this</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/slowspeed.png\" style=\"width: 400px\">\n\n<p>I got this:</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/speed.png\" style=\"width: 400px\">\n\n<p>The solution isn’t clean. Basically telnet to the satellite and then</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config set wlg_sta_ssid=&lt;original ssid&gt;_disabled</span><br><span class=\"line\">root@RBS20:/# config commit</span><br></pre></td></tr></table></figure>\n\n<p>Then reboot.</p>\n<p>More details and investigation<br>\n↓</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>A while back, I got the Netgear Orbi <a href=\"https://www.netgear.com/support/product/RBK20.aspx\" target=\"_blank\" rel=\"noopener\">RBK20</a>\nto replace my original not so reliable powerline setup.</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/RBK20.png\">\n\n<p>It’s a wifi mesh solution that aims to solve the problem\nwhere traditional single pointer router fails -\nto provide good signal coverage\nin complex indoor environment with walls in between rooms.\nThis is esp. important in the AC world where\nthe 5G signal falls short as it tends to be more easily blocked/\nthan 2.4G.</p>\n<p>One thing worth mentioning though is that Orbi isn’t\na true mesh system, that is, to support 802.11s mesh standard.\nA true mesh system allows satellites to cooperate together\nthrough a routing algorithm to find the optimal data transfer path\nbut Orbi basically supports only star topology or daisy chaining.\nThat said though, in practice, some of the “advanced” true mesh systems\non the other hand suffer from lack of dedicated backhaul channel\nfor inter satellite uplink (e.g. Google Wifi) and hence actually\nperform much worse in reality as they essentially just become\nmore advanced repeaters.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>In order for Orbi to have max power, we need to\nensure that Orbi has the dedicated backhaul operate in 5G mode,\notherwise anything connected to satellites would be bound to\n2.4G speed which is 192Mbps.</p>\n<p>It’s not unusable technically but it sort of defeats the purpose.\nWhat makes things worse is that Netgear decides on a strategy\nthat if 5G backhaul isn’t stable, it would fall back onto 2.4G,\nwhich isn’t dedicated but shared with regular 2.4G radio.\nThis isn’t a bad idea per se as home layout may be complex so\nthey sacrifice throughtput in favor of usability in certain\nscenarios.</p>\n<p>However this setup doesn’t work well in practice.\nFor whatever reason, the system would fall back onto 2.4G\nrandomly even if 5G signal is perfectly fine. And the only\nway to fix that would be to power cycle the satellite.</p>\n<h2 id=\"Investigation\"><a href=\"#Investigation\" class=\"headerlink\" title=\"Investigation\"></a>Investigation</h2><p>Since Orbi is OpenWRT based, I took a look at the configs\nthat potentially control the behavior and here they are:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# uci show | grep WiFiLink</span><br><span class=\"line\">...</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar='-75'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar5g='-82'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar24g='-76'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdNear='-60'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdMin='-75'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdPrefer2GBackhaul='-82'</span><br><span class=\"line\">repacd.WiFiLink.2GBackhaulSwitchDownTime='10'</span><br><span class=\"line\">repacd.WiFiLink.MaxMeasuringStateAttempts='30'</span><br><span class=\"line\">repacd.WiFiLink.DaisyChain='1'</span><br><span class=\"line\">repacd.WiFiLink.RateNumMeasurements='5'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdMin5GInPercent='35'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdMax5GInPercent='95'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdPrefer2GBackhaulInPercent='5'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulBadlinkTimeout='60'</span><br><span class=\"line\">repacd.WiFiLink.BSSIDAssociationTimeout='170'</span><br><span class=\"line\">repacd.WiFiLink.RateScalingFactor='85'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulEvalTimeShort='330'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulEvalTimeLong='1800'</span><br><span class=\"line\">repacd.WiFiLink.2GBackhaulEvalTime='1800'</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>So in theory 2G backhaul should only be preferred\nafter signal drops below -82dbm or rate is below 5%/35%.\nHowever in practice this almost is never the case.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> From router side:</span></span><br><span class=\"line\">root@RBR20:/# wlanconfig ath11 list</span><br><span class=\"line\">ADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS</span><br><span class=\"line\"> ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE</span><br><span class=\"line\">                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0</span><br><span class=\"line\">   b              0           AWPSM 18:46:39     RSN WME IEEE80211_MODE_11AC_VHT80   0</span><br></pre></td></tr></table></figure>\n\n<p>RSSI here is 51 which indicates roughly -44dbm\nwhich is perfectly fine. It’s possible that the number would\nfluctuate during operation but as you see the min value\nis still way above the threshold. Also in practice,\nonce Orbi picks 2.4G it will stick there which doesn’t make sense\nbut since Orbi’s software isn’t open sourced there’s no way to know\nexactly how it messes things up (looking at you Netgear developers).</p>\n<h2 id=\"A-Hacky-Solution\"><a href=\"#A-Hacky-Solution\" class=\"headerlink\" title=\"A Hacky Solution\"></a>A Hacky Solution</h2><h3 id=\"Enable-Telnet\"><a href=\"#Enable-Telnet\" class=\"headerlink\" title=\"Enable Telnet\"></a>Enable Telnet</h3><p>Go to http://&lt;satellite ip&gt;/debug.htm, log in with router username &amp; password\nand check “Enable Telnet”.</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/telnet.png\">\n\n<h3 id=\"Initial-Attempt\"><a href=\"#Initial-Attempt\" class=\"headerlink\" title=\"Initial Attempt\"></a>Initial Attempt</h3><p>Since we cannot alter Netgear’s software behavior directly,\nwe have to somehow break the 2.4G connection to force it onto 5G.</p>\n<p>My initial thought was to disable the 2.4G wifi interface.\n(Spoiler: this does not work somehow).</p>\n<p>This is doable via OpenWRT’s config system.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Show all wifi interfaces. The 2.4G is already disabled here but <span class=\"keyword\">in</span> normal operation it will show something.</span></span><br><span class=\"line\">root@RBS20:/# iwconfig</span><br><span class=\"line\">ath01     IEEE 802.11b  ESSID:\"NETGEAR_ORBI_hidden52\"</span><br><span class=\"line\">          Mode:Managed  Frequency:2.412 GHz  Access Point: Not-Associated</span><br><span class=\"line\">          Bit Rate:0 kb/s   Tx-Power:25 dBm</span><br><span class=\"line\">          RTS thr:off   Fragment thr:off</span><br><span class=\"line\">          Power Management:off</span><br><span class=\"line\">          Link Quality=0/94  Signal level=-95 dBm  Noise level=-95 dBm</span><br><span class=\"line\">          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0</span><br><span class=\"line\">          Tx excessive retries:0  Invalid misc:0   Missed beacon:0</span><br><span class=\"line\"></span><br><span class=\"line\">root@RBS20:/# vi /etc/config/wireless</span><br><span class=\"line\">config wifi-iface</span><br><span class=\"line\">        option device 'wifi0'</span><br><span class=\"line\">        option network '0'</span><br><span class=\"line\">        option bridge 'br0'</span><br><span class=\"line\">        option mode 'sta'</span><br><span class=\"line\">        option wds '1'</span><br><span class=\"line\">        option athnewind '1'</span><br><span class=\"line\">        option vap_ind '0'</span><br><span class=\"line\">        option backhaul '1'</span><br><span class=\"line\">        option wsplcd_unmanaged '1'</span><br><span class=\"line\">        option repacd_security_unmanaged '1'</span><br><span class=\"line\">        option dropmdns '0'</span><br><span class=\"line\">        option ssid 'NETGEAR_ORBI_hidden52'</span><br><span class=\"line\">        option encryption 'psk2+ccmp'</span><br><span class=\"line\">        option ifname 'ath01'</span><br><span class=\"line\">        option wps_config 'virtual_push_button physical_push_button'</span><br><span class=\"line\">        option wps_pbc '1'</span><br><span class=\"line\">        option dyn_bw_rts '0'</span><br><span class=\"line\">        option disabled '0'</span><br></pre></td></tr></table></figure>\n\n<p>^ From there we can see <code>ath01</code> is bound to physical interface <code>wifi0</code>.\nWe can just change the disabled value from 0 to 1.\nThen <code>uci commit</code> will persist the value.</p>\n<p>However for some reason, Orbi will restore values in OpenWRT config,\npresumably for system integrity reason. YMMV but at least this does\nnot work for RBK20 system.</p>\n<h3 id=\"The-Hacky-Attempt\"><a href=\"#The-Hacky-Attempt\" class=\"headerlink\" title=\"The Hacky Attempt\"></a>The Hacky Attempt</h3><p>While Orbi restores uci configs, it does keep its own configs\nthat are alterable via <code>config</code>.</p>\n<p>Then essentially the solution becomes that we can change the 2.4G\nbackhaul SSID such that it cannot find the right one.</p>\n<p>In my system the original SSID is <code>NETGEAR_ORBI_hidden52</code> from\n<code>iwconfig</code>.\nWe can grab all related configs from</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config show | grep hidden52</span><br><span class=\"line\">wlg_ap_bh_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wla_ap_bh_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wla_sta_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wlg_sta_ssid=NETGEAR_ORBI_hidden52</span><br></pre></td></tr></table></figure>\n\n<p>Here anything starts with <code>wla</code> is 5G and <code>wlg</code> is 2.4G.</p>\n<p>Then we can do</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config set wlg_sta_ssid=NETGEAR_ORBI_hidden52_disabled</span><br><span class=\"line\">root@RBS20:/# config commit</span><br></pre></td></tr></table></figure>\n\n<p>The <code>_disabled</code> suffix is arbitrary with the idea to prevent\nOrbi from connecting to router via 2.4G.</p>\n<p><code>wlg_ap_bh_ssid</code> does not need to be set. The <code>ap</code> setup will\nautomatically follow the <code>sta</code> setup.</p>\n<p><code>nvram show | grep ssid</code> should now show the persisted value.</p>\n<p>In RBS20, if you use <code>reboot</code> to restart the system,\nit will somehow get stuck with pink led light.\nSo I always just power cycle it, which works just fine.</p>\n<p>To confirm this works, on satellite side, once restarted,\n<code>iwconfig</code> should show the new SSID and signal strength should be\n-95dbm indicating it’s disconnected.</p>\n<p>Enable Telnet in router and log into it. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ath01 is 2.4G wifi interface. It should have nothing connected now.</span><br><span class=\"line\">root@RBR20:/# wlanconfig ath01 list</span><br><span class=\"line\"># ath11 is 5G. It should have satellite(s) connected.</span><br><span class=\"line\">root@RBR20:/# wlanconfig ath11 list</span><br><span class=\"line\">ADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS</span><br><span class=\"line\"> ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE</span><br><span class=\"line\">                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0</span><br><span class=\"line\">   b              0           AWPSM 19:26:27     RSN WME IEEE80211_MODE_11AC_VHT80   0</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<h2 id=\"TL-DR\"><a href=\"#TL-DR\" class=\"headerlink\" title=\"TL;DR;\"></a>TL;DR;</h2><p>I was able to “break” Orbi’s 2.4G backhaul fallback\nand hence force it onto 5G.</p>\n<p>So instead of this</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/slowspeed.png\" style=\"width: 400px\">\n\n<p>I got this:</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/speed.png\" style=\"width: 400px\">\n\n<p>The solution isn’t clean. Basically telnet to the satellite and then</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config set wlg_sta_ssid=&lt;original ssid&gt;_disabled</span><br><span class=\"line\">root@RBS20:/# config commit</span><br></pre></td></tr></table></figure>\n\n<p>Then reboot.</p>\n<p>More details and investigation<br>\n↓</p>","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>A while back, I got the Netgear Orbi <a href=\"https://www.netgear.com/support/product/RBK20.aspx\" target=\"_blank\" rel=\"noopener\">RBK20</a>\nto replace my original not so reliable powerline setup.</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/RBK20.png\">\n\n<p>It’s a wifi mesh solution that aims to solve the problem\nwhere traditional single pointer router fails -\nto provide good signal coverage\nin complex indoor environment with walls in between rooms.\nThis is esp. important in the AC world where\nthe 5G signal falls short as it tends to be more easily blocked/\nthan 2.4G.</p>\n<p>One thing worth mentioning though is that Orbi isn’t\na true mesh system, that is, to support 802.11s mesh standard.\nA true mesh system allows satellites to cooperate together\nthrough a routing algorithm to find the optimal data transfer path\nbut Orbi basically supports only star topology or daisy chaining.\nThat said though, in practice, some of the “advanced” true mesh systems\non the other hand suffer from lack of dedicated backhaul channel\nfor inter satellite uplink (e.g. Google Wifi) and hence actually\nperform much worse in reality as they essentially just become\nmore advanced repeaters.</p>\n<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>In order for Orbi to have max power, we need to\nensure that Orbi has the dedicated backhaul operate in 5G mode,\notherwise anything connected to satellites would be bound to\n2.4G speed which is 192Mbps.</p>\n<p>It’s not unusable technically but it sort of defeats the purpose.\nWhat makes things worse is that Netgear decides on a strategy\nthat if 5G backhaul isn’t stable, it would fall back onto 2.4G,\nwhich isn’t dedicated but shared with regular 2.4G radio.\nThis isn’t a bad idea per se as home layout may be complex so\nthey sacrifice throughtput in favor of usability in certain\nscenarios.</p>\n<p>However this setup doesn’t work well in practice.\nFor whatever reason, the system would fall back onto 2.4G\nrandomly even if 5G signal is perfectly fine. And the only\nway to fix that would be to power cycle the satellite.</p>\n<h2 id=\"Investigation\"><a href=\"#Investigation\" class=\"headerlink\" title=\"Investigation\"></a>Investigation</h2><p>Since Orbi is OpenWRT based, I took a look at the configs\nthat potentially control the behavior and here they are:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# uci show | grep WiFiLink</span><br><span class=\"line\">...</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar='-75'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar5g='-82'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdFar24g='-76'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdNear='-60'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdMin='-75'</span><br><span class=\"line\">repacd.WiFiLink.RSSIThresholdPrefer2GBackhaul='-82'</span><br><span class=\"line\">repacd.WiFiLink.2GBackhaulSwitchDownTime='10'</span><br><span class=\"line\">repacd.WiFiLink.MaxMeasuringStateAttempts='30'</span><br><span class=\"line\">repacd.WiFiLink.DaisyChain='1'</span><br><span class=\"line\">repacd.WiFiLink.RateNumMeasurements='5'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdMin5GInPercent='35'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdMax5GInPercent='95'</span><br><span class=\"line\">repacd.WiFiLink.RateThresholdPrefer2GBackhaulInPercent='5'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulBadlinkTimeout='60'</span><br><span class=\"line\">repacd.WiFiLink.BSSIDAssociationTimeout='170'</span><br><span class=\"line\">repacd.WiFiLink.RateScalingFactor='85'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulEvalTimeShort='330'</span><br><span class=\"line\">repacd.WiFiLink.5GBackhaulEvalTimeLong='1800'</span><br><span class=\"line\">repacd.WiFiLink.2GBackhaulEvalTime='1800'</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>So in theory 2G backhaul should only be preferred\nafter signal drops below -82dbm or rate is below 5%/35%.\nHowever in practice this almost is never the case.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> From router side:</span></span><br><span class=\"line\">root@RBR20:/# wlanconfig ath11 list</span><br><span class=\"line\">ADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS</span><br><span class=\"line\"> ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE</span><br><span class=\"line\">                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0</span><br><span class=\"line\">   b              0           AWPSM 18:46:39     RSN WME IEEE80211_MODE_11AC_VHT80   0</span><br></pre></td></tr></table></figure>\n\n<p>RSSI here is 51 which indicates roughly -44dbm\nwhich is perfectly fine. It’s possible that the number would\nfluctuate during operation but as you see the min value\nis still way above the threshold. Also in practice,\nonce Orbi picks 2.4G it will stick there which doesn’t make sense\nbut since Orbi’s software isn’t open sourced there’s no way to know\nexactly how it messes things up (looking at you Netgear developers).</p>\n<h2 id=\"A-Hacky-Solution\"><a href=\"#A-Hacky-Solution\" class=\"headerlink\" title=\"A Hacky Solution\"></a>A Hacky Solution</h2><h3 id=\"Enable-Telnet\"><a href=\"#Enable-Telnet\" class=\"headerlink\" title=\"Enable Telnet\"></a>Enable Telnet</h3><p>Go to http://&lt;satellite ip&gt;/debug.htm, log in with router username &amp; password\nand check “Enable Telnet”.</p>\n<img src=\"/2020/04/04/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/telnet.png\">\n\n<h3 id=\"Initial-Attempt\"><a href=\"#Initial-Attempt\" class=\"headerlink\" title=\"Initial Attempt\"></a>Initial Attempt</h3><p>Since we cannot alter Netgear’s software behavior directly,\nwe have to somehow break the 2.4G connection to force it onto 5G.</p>\n<p>My initial thought was to disable the 2.4G wifi interface.\n(Spoiler: this does not work somehow).</p>\n<p>This is doable via OpenWRT’s config system.</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Show all wifi interfaces. The 2.4G is already disabled here but <span class=\"keyword\">in</span> normal operation it will show something.</span></span><br><span class=\"line\">root@RBS20:/# iwconfig</span><br><span class=\"line\">ath01     IEEE 802.11b  ESSID:\"NETGEAR_ORBI_hidden52\"</span><br><span class=\"line\">          Mode:Managed  Frequency:2.412 GHz  Access Point: Not-Associated</span><br><span class=\"line\">          Bit Rate:0 kb/s   Tx-Power:25 dBm</span><br><span class=\"line\">          RTS thr:off   Fragment thr:off</span><br><span class=\"line\">          Power Management:off</span><br><span class=\"line\">          Link Quality=0/94  Signal level=-95 dBm  Noise level=-95 dBm</span><br><span class=\"line\">          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0</span><br><span class=\"line\">          Tx excessive retries:0  Invalid misc:0   Missed beacon:0</span><br><span class=\"line\"></span><br><span class=\"line\">root@RBS20:/# vi /etc/config/wireless</span><br><span class=\"line\">config wifi-iface</span><br><span class=\"line\">        option device 'wifi0'</span><br><span class=\"line\">        option network '0'</span><br><span class=\"line\">        option bridge 'br0'</span><br><span class=\"line\">        option mode 'sta'</span><br><span class=\"line\">        option wds '1'</span><br><span class=\"line\">        option athnewind '1'</span><br><span class=\"line\">        option vap_ind '0'</span><br><span class=\"line\">        option backhaul '1'</span><br><span class=\"line\">        option wsplcd_unmanaged '1'</span><br><span class=\"line\">        option repacd_security_unmanaged '1'</span><br><span class=\"line\">        option dropmdns '0'</span><br><span class=\"line\">        option ssid 'NETGEAR_ORBI_hidden52'</span><br><span class=\"line\">        option encryption 'psk2+ccmp'</span><br><span class=\"line\">        option ifname 'ath01'</span><br><span class=\"line\">        option wps_config 'virtual_push_button physical_push_button'</span><br><span class=\"line\">        option wps_pbc '1'</span><br><span class=\"line\">        option dyn_bw_rts '0'</span><br><span class=\"line\">        option disabled '0'</span><br></pre></td></tr></table></figure>\n\n<p>^ From there we can see <code>ath01</code> is bound to physical interface <code>wifi0</code>.\nWe can just change the disabled value from 0 to 1.\nThen <code>uci commit</code> will persist the value.</p>\n<p>However for some reason, Orbi will restore values in OpenWRT config,\npresumably for system integrity reason. YMMV but at least this does\nnot work for RBK20 system.</p>\n<h3 id=\"The-Hacky-Attempt\"><a href=\"#The-Hacky-Attempt\" class=\"headerlink\" title=\"The Hacky Attempt\"></a>The Hacky Attempt</h3><p>While Orbi restores uci configs, it does keep its own configs\nthat are alterable via <code>config</code>.</p>\n<p>Then essentially the solution becomes that we can change the 2.4G\nbackhaul SSID such that it cannot find the right one.</p>\n<p>In my system the original SSID is <code>NETGEAR_ORBI_hidden52</code> from\n<code>iwconfig</code>.\nWe can grab all related configs from</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config show | grep hidden52</span><br><span class=\"line\">wlg_ap_bh_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wla_ap_bh_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wla_sta_ssid=NETGEAR_ORBI_hidden52</span><br><span class=\"line\">wlg_sta_ssid=NETGEAR_ORBI_hidden52</span><br></pre></td></tr></table></figure>\n\n<p>Here anything starts with <code>wla</code> is 5G and <code>wlg</code> is 2.4G.</p>\n<p>Then we can do</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@RBS20:/# config set wlg_sta_ssid=NETGEAR_ORBI_hidden52_disabled</span><br><span class=\"line\">root@RBS20:/# config commit</span><br></pre></td></tr></table></figure>\n\n<p>The <code>_disabled</code> suffix is arbitrary with the idea to prevent\nOrbi from connecting to router via 2.4G.</p>\n<p><code>wlg_ap_bh_ssid</code> does not need to be set. The <code>ap</code> setup will\nautomatically follow the <code>sta</code> setup.</p>\n<p><code>nvram show | grep ssid</code> should now show the persisted value.</p>\n<p>In RBS20, if you use <code>reboot</code> to restart the system,\nit will somehow get stuck with pink led light.\nSo I always just power cycle it, which works just fine.</p>\n<p>To confirm this works, on satellite side, once restarted,\n<code>iwconfig</code> should show the new SSID and signal strength should be\n-95dbm indicating it’s disconnected.</p>\n<p>Enable Telnet in router and log into it. </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ath01 is 2.4G wifi interface. It should have nothing connected now.</span><br><span class=\"line\">root@RBR20:/# wlanconfig ath01 list</span><br><span class=\"line\"># ath11 is 5G. It should have satellite(s) connected.</span><br><span class=\"line\">root@RBR20:/# wlanconfig ath11 list</span><br><span class=\"line\">ADDR               AID CHAN TXRATE RXRATE RSSI MINRSSI MAXRSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS</span><br><span class=\"line\"> ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE                   PSMODE</span><br><span class=\"line\">                     1  157 866M    780M   51      44      58    0      0   65535   EPs         0</span><br><span class=\"line\">   b              0           AWPSM 19:26:27     RSN WME IEEE80211_MODE_11AC_VHT80   0</span><br></pre></td></tr></table></figure>"},{"title":"Implementing Regex from Scratch: 1 - The Basics of Regex and Finite Automata","date":"2018-05-13T00:32:25.000Z","_content":"\n# Intro\n\nImplementing a regular expression engine is a fun topic and it can be quite complex.\nUnfortunately most of the tutorials are either too complex to follow,\nor impractical, meaning you can't just read it and build one yourself.\n\nWe are going to fix it in this series.\nOur goal here is not to build a fully-fledged engine\nthat can performantly handle all cases since that's already provided by popular languages,\nbut rather we will try to build a usable one from ground up\nthat can handle a clearly defined set of features.\nThrough this we can get a better understanding\nof how it works and where it can be optimized.\n\n# Index\n\nThere's no concrete plan as of now but I'll update the list as we move on.\n\nThe topics we are going to cover includes basics, lexing, parsing, processing and basic optimization.\n\n# Prerequisites\n\nAs the title says, readers aren't supposed to be equipped with much knowledge\nabout this before reading this as they will be explained and discussed in this post.\n\nHowever since we are building an engine from scratch, this post assumes you:\n\n- Know what a regex is and how to read/write regex\n- Have heard about finite automata/NFA/DFA\n- Know what lexing and parsing mean\n- Basic knowledge about algorithm - e.g. BFS and DFS\n\nIf you don't, you might want to check Wikipedia first to\nfamilarize yourself with those topics.\nIt wouldn't hurt if you don't have deep understanding of those\nbut basic knowledge would help.\n\n# Goal\n\nOur goal is to implement a regex processor that understands\n\n- Basic literal and escaping - `abc123\\?`\n- Alternation - `ab|cd`\n- Quantification - `a?`, `a+`, `a*`, `{1,2}`, `{2}`\n- Grouping - `(ab)+`, `a(b|c)d`\n- Wildcard - `.`\n- Anchors - `^`, `$`\n- Extended characters - `\\d`, `\\w`, `\\s`\n- Character classes - `[a-z]`, `[^a]`\n\nSo it should understand that `^a(b+|[c-z]?)+\\?d.+$` would match `abbcw?ds`\nbut not `bbcw?ds` or `abbcds`.\n\nNotice that there is a lot of features missing here:\nwe don't support non-capturing group `(?:)`,\ncapturing group replacement `$1`,\nnon-greedy matching like `.*?`,\nor any other basic/advanced regex syntax.\nIt's possible to cover those topics but that might make the post too\ncomplex to follow for first-time readers. So we will keep the scope minimal\nif possible and only include topics if time permits.\n\n# The Basics\n\nRegular expression is a typical context-free language,\nwhich means there a finite number of predefined replacement rules\n(or more formally, production rules) that can be applied regardless of context,\nyielding a stable \"converged\" state from the original one.\n\nWhile one can possibly search in text through basic regex using DFS and backtracking,\nthe actual implementation can be very complicated once more features are added in.\nSo in practice, they are typically implemented through state machines, or finite automata.\n\nFor example this would be the finite automata that checks if a string is \"ab\".\n{% asset_img sm.png %}\nAnd this is how it is evaluated in practice.\n\n|        Current State            |            Input Char                  |\n|:-------------------------------:|:--------------------------------------:|\n|          `<Start>`              |                `a`                     |\n|            `s1`                 |                `b`                     |\n|          `<End>`                |              `<EOS>`                   |\n\nIf we reach state `<End>` then the input string is a match, otherwise it's not.\n\nThis one is a deterministic finite automata, or DFA.\nThe nice thing about DFA is that each state transition is determined based on input\nso there's no need to backtrack.\nThis implies you could implement that in code with nothing but\na two dimensional array with on representing the possible states (nodes)\nand the other representing transitions (edges).\n\nHere's how that one will be represented (row -> state, column -> input).\nThe cell value represents the next state (row id) with -1 being invalid.\n\n|     |  a  |  b  |\n|:---:|:---:|:---:|\n|  S  |  1  | -1  |\n|  1  | -1  |  2  |\n|  E  | -1  | -1  |\n\n```python\ntrans_mat = [\n    [1, -1],\n    [-1, 2],\n    [-1, -1]\n]\n```\n\nThen the actual implementation is just a for loop and checks if we are in state E.\n\n# Using NFA to Represent Advanced Regex Syntax\n\nSo if DFA is easy on the implementation side, can we actually implement regex in that?\n\nThe answer is YES. However, it's not intuitive to write down the DFA directly.\nSo let's first take an intermediate step.\n\nSay we need to implement `a|bc`. One intuitive thought is to write down a graph like this:\n{% asset_img example2.png %}\nNotice that we actually introduced epsilon (ε) transition here.\nAn epsilon transition is one that allows for spontanous transition (without consuming input).\nYou might wonder how is that different from just connecting the nodes directly,\nand you are totally right - they are effectively the same. That is called compression, but in\nthis post we are going to focus only on the basics and we'll talk about optimization later.\n\nHowever, this branching causes that this is no longer a DFA but rather a non-deterministic\nfinite automata, or NFA, because the transition from start to the next state is no longer\nuniquely determined. This would make the implementation trickier. There are basically two\nways to simulate an NFA: DFS with backtracking, or Thompson's algorithm, which is somewhat\nlike a BFS.\n\nThere's proof that every NFA has a corresponding DFA. The conversion can be done through\nalgorithm called \"powerset construction\", which we will talk about in later optimization topic.\n\nEven though NFA is not as performant as DFA in terms of implementation, it greatly reduces\nbrainwork to abstract the regex. Below we can see how some of the common syntaxes can be\nrepresented through NFA with the help of ε transition and additional pseudo states.\n","source":"_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata.md","raw":"---\ntitle: 'Implementing Regex from Scratch: 1 - The Basics of Regex and Finite Automata'\ndate: 2018-05-12 17:32:25\ntags:\n- regex\n- parsing\n- lexing\n- nfa\n- dfa\n- algorithm\n- python\n---\n\n# Intro\n\nImplementing a regular expression engine is a fun topic and it can be quite complex.\nUnfortunately most of the tutorials are either too complex to follow,\nor impractical, meaning you can't just read it and build one yourself.\n\nWe are going to fix it in this series.\nOur goal here is not to build a fully-fledged engine\nthat can performantly handle all cases since that's already provided by popular languages,\nbut rather we will try to build a usable one from ground up\nthat can handle a clearly defined set of features.\nThrough this we can get a better understanding\nof how it works and where it can be optimized.\n\n# Index\n\nThere's no concrete plan as of now but I'll update the list as we move on.\n\nThe topics we are going to cover includes basics, lexing, parsing, processing and basic optimization.\n\n# Prerequisites\n\nAs the title says, readers aren't supposed to be equipped with much knowledge\nabout this before reading this as they will be explained and discussed in this post.\n\nHowever since we are building an engine from scratch, this post assumes you:\n\n- Know what a regex is and how to read/write regex\n- Have heard about finite automata/NFA/DFA\n- Know what lexing and parsing mean\n- Basic knowledge about algorithm - e.g. BFS and DFS\n\nIf you don't, you might want to check Wikipedia first to\nfamilarize yourself with those topics.\nIt wouldn't hurt if you don't have deep understanding of those\nbut basic knowledge would help.\n\n# Goal\n\nOur goal is to implement a regex processor that understands\n\n- Basic literal and escaping - `abc123\\?`\n- Alternation - `ab|cd`\n- Quantification - `a?`, `a+`, `a*`, `{1,2}`, `{2}`\n- Grouping - `(ab)+`, `a(b|c)d`\n- Wildcard - `.`\n- Anchors - `^`, `$`\n- Extended characters - `\\d`, `\\w`, `\\s`\n- Character classes - `[a-z]`, `[^a]`\n\nSo it should understand that `^a(b+|[c-z]?)+\\?d.+$` would match `abbcw?ds`\nbut not `bbcw?ds` or `abbcds`.\n\nNotice that there is a lot of features missing here:\nwe don't support non-capturing group `(?:)`,\ncapturing group replacement `$1`,\nnon-greedy matching like `.*?`,\nor any other basic/advanced regex syntax.\nIt's possible to cover those topics but that might make the post too\ncomplex to follow for first-time readers. So we will keep the scope minimal\nif possible and only include topics if time permits.\n\n# The Basics\n\nRegular expression is a typical context-free language,\nwhich means there a finite number of predefined replacement rules\n(or more formally, production rules) that can be applied regardless of context,\nyielding a stable \"converged\" state from the original one.\n\nWhile one can possibly search in text through basic regex using DFS and backtracking,\nthe actual implementation can be very complicated once more features are added in.\nSo in practice, they are typically implemented through state machines, or finite automata.\n\nFor example this would be the finite automata that checks if a string is \"ab\".\n{% asset_img sm.png %}\nAnd this is how it is evaluated in practice.\n\n|        Current State            |            Input Char                  |\n|:-------------------------------:|:--------------------------------------:|\n|          `<Start>`              |                `a`                     |\n|            `s1`                 |                `b`                     |\n|          `<End>`                |              `<EOS>`                   |\n\nIf we reach state `<End>` then the input string is a match, otherwise it's not.\n\nThis one is a deterministic finite automata, or DFA.\nThe nice thing about DFA is that each state transition is determined based on input\nso there's no need to backtrack.\nThis implies you could implement that in code with nothing but\na two dimensional array with on representing the possible states (nodes)\nand the other representing transitions (edges).\n\nHere's how that one will be represented (row -> state, column -> input).\nThe cell value represents the next state (row id) with -1 being invalid.\n\n|     |  a  |  b  |\n|:---:|:---:|:---:|\n|  S  |  1  | -1  |\n|  1  | -1  |  2  |\n|  E  | -1  | -1  |\n\n```python\ntrans_mat = [\n    [1, -1],\n    [-1, 2],\n    [-1, -1]\n]\n```\n\nThen the actual implementation is just a for loop and checks if we are in state E.\n\n# Using NFA to Represent Advanced Regex Syntax\n\nSo if DFA is easy on the implementation side, can we actually implement regex in that?\n\nThe answer is YES. However, it's not intuitive to write down the DFA directly.\nSo let's first take an intermediate step.\n\nSay we need to implement `a|bc`. One intuitive thought is to write down a graph like this:\n{% asset_img example2.png %}\nNotice that we actually introduced epsilon (ε) transition here.\nAn epsilon transition is one that allows for spontanous transition (without consuming input).\nYou might wonder how is that different from just connecting the nodes directly,\nand you are totally right - they are effectively the same. That is called compression, but in\nthis post we are going to focus only on the basics and we'll talk about optimization later.\n\nHowever, this branching causes that this is no longer a DFA but rather a non-deterministic\nfinite automata, or NFA, because the transition from start to the next state is no longer\nuniquely determined. This would make the implementation trickier. There are basically two\nways to simulate an NFA: DFS with backtracking, or Thompson's algorithm, which is somewhat\nlike a BFS.\n\nThere's proof that every NFA has a corresponding DFA. The conversion can be done through\nalgorithm called \"powerset construction\", which we will talk about in later optimization topic.\n\nEven though NFA is not as performant as DFA in terms of implementation, it greatly reduces\nbrainwork to abstract the regex. Below we can see how some of the common syntaxes can be\nrepresented through NFA with the help of ε transition and additional pseudo states.\n","slug":"Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata","published":0,"updated":"2020-05-04T00:05:42.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi50007sxmggfye2q2a","content":"<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>Implementing a regular expression engine is a fun topic and it can be quite complex.\nUnfortunately most of the tutorials are either too complex to follow,\nor impractical, meaning you can’t just read it and build one yourself.</p>\n<p>We are going to fix it in this series.\nOur goal here is not to build a fully-fledged engine\nthat can performantly handle all cases since that’s already provided by popular languages,\nbut rather we will try to build a usable one from ground up\nthat can handle a clearly defined set of features.\nThrough this we can get a better understanding\nof how it works and where it can be optimized.</p>\n<h1 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h1><p>There’s no concrete plan as of now but I’ll update the list as we move on.</p>\n<p>The topics we are going to cover includes basics, lexing, parsing, processing and basic optimization.</p>\n<h1 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h1><p>As the title says, readers aren’t supposed to be equipped with much knowledge\nabout this before reading this as they will be explained and discussed in this post.</p>\n<p>However since we are building an engine from scratch, this post assumes you:</p>\n<ul>\n<li>Know what a regex is and how to read/write regex</li>\n<li>Have heard about finite automata/NFA/DFA</li>\n<li>Know what lexing and parsing mean</li>\n<li>Basic knowledge about algorithm - e.g. BFS and DFS</li>\n</ul>\n<p>If you don’t, you might want to check Wikipedia first to\nfamilarize yourself with those topics.\nIt wouldn’t hurt if you don’t have deep understanding of those\nbut basic knowledge would help.</p>\n<h1 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h1><p>Our goal is to implement a regex processor that understands</p>\n<ul>\n<li>Basic literal and escaping - <code>abc123\\?</code></li>\n<li>Alternation - <code>ab|cd</code></li>\n<li>Quantification - <code>a?</code>, <code>a+</code>, <code>a*</code>, <code>{1,2}</code>, <code>{2}</code></li>\n<li>Grouping - <code>(ab)+</code>, <code>a(b|c)d</code></li>\n<li>Wildcard - <code>.</code></li>\n<li>Anchors - <code>^</code>, <code>$</code></li>\n<li>Extended characters - <code>\\d</code>, <code>\\w</code>, <code>\\s</code></li>\n<li>Character classes - <code>[a-z]</code>, <code>[^a]</code></li>\n</ul>\n<p>So it should understand that <code>^a(b+|[c-z]?)+\\?d.+$</code> would match <code>abbcw?ds</code>\nbut not <code>bbcw?ds</code> or <code>abbcds</code>.</p>\n<p>Notice that there is a lot of features missing here:\nwe don’t support non-capturing group <code>(?:)</code>,\ncapturing group replacement <code>$1</code>,\nnon-greedy matching like <code>.*?</code>,\nor any other basic/advanced regex syntax.\nIt’s possible to cover those topics but that might make the post too\ncomplex to follow for first-time readers. So we will keep the scope minimal\nif possible and only include topics if time permits.</p>\n<h1 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h1><p>Regular expression is a typical context-free language,\nwhich means there a finite number of predefined replacement rules\n(or more formally, production rules) that can be applied regardless of context,\nyielding a stable “converged” state from the original one.</p>\n<p>While one can possibly search in text through basic regex using DFS and backtracking,\nthe actual implementation can be very complicated once more features are added in.\nSo in practice, they are typically implemented through state machines, or finite automata.</p>\n<p>For example this would be the finite automata that checks if a string is “ab”.</p>\n<img src=\"/2018/05/12/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/sm.png\">\n<p>And this is how it is evaluated in practice.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Current State</th>\n<th align=\"center\">Input Char</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&lt;Start&gt;</code></td>\n<td align=\"center\"><code>a</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>s1</code></td>\n<td align=\"center\"><code>b</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;End&gt;</code></td>\n<td align=\"center\"><code>&lt;EOS&gt;</code></td>\n</tr>\n</tbody></table>\n<p>If we reach state <code>&lt;End&gt;</code> then the input string is a match, otherwise it’s not.</p>\n<p>This one is a deterministic finite automata, or DFA.\nThe nice thing about DFA is that each state transition is determined based on input\nso there’s no need to backtrack.\nThis implies you could implement that in code with nothing but\na two dimensional array with on representing the possible states (nodes)\nand the other representing transitions (edges).</p>\n<p>Here’s how that one will be represented (row -&gt; state, column -&gt; input).\nThe cell value represents the next state (row id) with -1 being invalid.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">S</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">-1</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans_mat = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">-1</span>],</span><br><span class=\"line\">    [<span class=\"number\">-1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>Then the actual implementation is just a for loop and checks if we are in state E.</p>\n<h1 id=\"Using-NFA-to-Represent-Advanced-Regex-Syntax\"><a href=\"#Using-NFA-to-Represent-Advanced-Regex-Syntax\" class=\"headerlink\" title=\"Using NFA to Represent Advanced Regex Syntax\"></a>Using NFA to Represent Advanced Regex Syntax</h1><p>So if DFA is easy on the implementation side, can we actually implement regex in that?</p>\n<p>The answer is YES. However, it’s not intuitive to write down the DFA directly.\nSo let’s first take an intermediate step.</p>\n<p>Say we need to implement <code>a|bc</code>. One intuitive thought is to write down a graph like this:</p>\n<img src=\"/2018/05/12/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/example2.png\">\n<p>Notice that we actually introduced epsilon (ε) transition here.\nAn epsilon transition is one that allows for spontanous transition (without consuming input).\nYou might wonder how is that different from just connecting the nodes directly,\nand you are totally right - they are effectively the same. That is called compression, but in\nthis post we are going to focus only on the basics and we’ll talk about optimization later.</p>\n<p>However, this branching causes that this is no longer a DFA but rather a non-deterministic\nfinite automata, or NFA, because the transition from start to the next state is no longer\nuniquely determined. This would make the implementation trickier. There are basically two\nways to simulate an NFA: DFS with backtracking, or Thompson’s algorithm, which is somewhat\nlike a BFS.</p>\n<p>There’s proof that every NFA has a corresponding DFA. The conversion can be done through\nalgorithm called “powerset construction”, which we will talk about in later optimization topic.</p>\n<p>Even though NFA is not as performant as DFA in terms of implementation, it greatly reduces\nbrainwork to abstract the regex. Below we can see how some of the common syntaxes can be\nrepresented through NFA with the help of ε transition and additional pseudo states.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<h1 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h1><p>Implementing a regular expression engine is a fun topic and it can be quite complex.\nUnfortunately most of the tutorials are either too complex to follow,\nor impractical, meaning you can’t just read it and build one yourself.</p>\n<p>We are going to fix it in this series.\nOur goal here is not to build a fully-fledged engine\nthat can performantly handle all cases since that’s already provided by popular languages,\nbut rather we will try to build a usable one from ground up\nthat can handle a clearly defined set of features.\nThrough this we can get a better understanding\nof how it works and where it can be optimized.</p>\n<h1 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h1><p>There’s no concrete plan as of now but I’ll update the list as we move on.</p>\n<p>The topics we are going to cover includes basics, lexing, parsing, processing and basic optimization.</p>\n<h1 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h1><p>As the title says, readers aren’t supposed to be equipped with much knowledge\nabout this before reading this as they will be explained and discussed in this post.</p>\n<p>However since we are building an engine from scratch, this post assumes you:</p>\n<ul>\n<li>Know what a regex is and how to read/write regex</li>\n<li>Have heard about finite automata/NFA/DFA</li>\n<li>Know what lexing and parsing mean</li>\n<li>Basic knowledge about algorithm - e.g. BFS and DFS</li>\n</ul>\n<p>If you don’t, you might want to check Wikipedia first to\nfamilarize yourself with those topics.\nIt wouldn’t hurt if you don’t have deep understanding of those\nbut basic knowledge would help.</p>\n<h1 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h1><p>Our goal is to implement a regex processor that understands</p>\n<ul>\n<li>Basic literal and escaping - <code>abc123\\?</code></li>\n<li>Alternation - <code>ab|cd</code></li>\n<li>Quantification - <code>a?</code>, <code>a+</code>, <code>a*</code>, <code>{1,2}</code>, <code>{2}</code></li>\n<li>Grouping - <code>(ab)+</code>, <code>a(b|c)d</code></li>\n<li>Wildcard - <code>.</code></li>\n<li>Anchors - <code>^</code>, <code>$</code></li>\n<li>Extended characters - <code>\\d</code>, <code>\\w</code>, <code>\\s</code></li>\n<li>Character classes - <code>[a-z]</code>, <code>[^a]</code></li>\n</ul>\n<p>So it should understand that <code>^a(b+|[c-z]?)+\\?d.+$</code> would match <code>abbcw?ds</code>\nbut not <code>bbcw?ds</code> or <code>abbcds</code>.</p>\n<p>Notice that there is a lot of features missing here:\nwe don’t support non-capturing group <code>(?:)</code>,\ncapturing group replacement <code>$1</code>,\nnon-greedy matching like <code>.*?</code>,\nor any other basic/advanced regex syntax.\nIt’s possible to cover those topics but that might make the post too\ncomplex to follow for first-time readers. So we will keep the scope minimal\nif possible and only include topics if time permits.</p>\n<h1 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h1><p>Regular expression is a typical context-free language,\nwhich means there a finite number of predefined replacement rules\n(or more formally, production rules) that can be applied regardless of context,\nyielding a stable “converged” state from the original one.</p>\n<p>While one can possibly search in text through basic regex using DFS and backtracking,\nthe actual implementation can be very complicated once more features are added in.\nSo in practice, they are typically implemented through state machines, or finite automata.</p>\n<p>For example this would be the finite automata that checks if a string is “ab”.</p>\n<img src=\"/2018/05/12/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/sm.png\">\n<p>And this is how it is evaluated in practice.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Current State</th>\n<th align=\"center\">Input Char</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>&lt;Start&gt;</code></td>\n<td align=\"center\"><code>a</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>s1</code></td>\n<td align=\"center\"><code>b</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>&lt;End&gt;</code></td>\n<td align=\"center\"><code>&lt;EOS&gt;</code></td>\n</tr>\n</tbody></table>\n<p>If we reach state <code>&lt;End&gt;</code> then the input string is a match, otherwise it’s not.</p>\n<p>This one is a deterministic finite automata, or DFA.\nThe nice thing about DFA is that each state transition is determined based on input\nso there’s no need to backtrack.\nThis implies you could implement that in code with nothing but\na two dimensional array with on representing the possible states (nodes)\nand the other representing transitions (edges).</p>\n<p>Here’s how that one will be represented (row -&gt; state, column -&gt; input).\nThe cell value represents the next state (row id) with -1 being invalid.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">a</th>\n<th align=\"center\">b</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">S</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-1</td>\n</tr>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">E</td>\n<td align=\"center\">-1</td>\n<td align=\"center\">-1</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trans_mat = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">-1</span>],</span><br><span class=\"line\">    [<span class=\"number\">-1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">    [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>Then the actual implementation is just a for loop and checks if we are in state E.</p>\n<h1 id=\"Using-NFA-to-Represent-Advanced-Regex-Syntax\"><a href=\"#Using-NFA-to-Represent-Advanced-Regex-Syntax\" class=\"headerlink\" title=\"Using NFA to Represent Advanced Regex Syntax\"></a>Using NFA to Represent Advanced Regex Syntax</h1><p>So if DFA is easy on the implementation side, can we actually implement regex in that?</p>\n<p>The answer is YES. However, it’s not intuitive to write down the DFA directly.\nSo let’s first take an intermediate step.</p>\n<p>Say we need to implement <code>a|bc</code>. One intuitive thought is to write down a graph like this:</p>\n<img src=\"/2018/05/12/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/example2.png\">\n<p>Notice that we actually introduced epsilon (ε) transition here.\nAn epsilon transition is one that allows for spontanous transition (without consuming input).\nYou might wonder how is that different from just connecting the nodes directly,\nand you are totally right - they are effectively the same. That is called compression, but in\nthis post we are going to focus only on the basics and we’ll talk about optimization later.</p>\n<p>However, this branching causes that this is no longer a DFA but rather a non-deterministic\nfinite automata, or NFA, because the transition from start to the next state is no longer\nuniquely determined. This would make the implementation trickier. There are basically two\nways to simulate an NFA: DFS with backtracking, or Thompson’s algorithm, which is somewhat\nlike a BFS.</p>\n<p>There’s proof that every NFA has a corresponding DFA. The conversion can be done through\nalgorithm called “powerset construction”, which we will talk about in later optimization topic.</p>\n<p>Even though NFA is not as performant as DFA in terms of implementation, it greatly reduces\nbrainwork to abstract the regex. Below we can see how some of the common syntaxes can be\nrepresented through NFA with the help of ε transition and additional pseudo states.</p>\n"},{"title":"Monitor gRPC Microservices in Kubernetes with Amazon X-Ray","date":"2018-11-25T22:11:39.000Z","coverImage":"xray.png","coverMeta":"out","coverSize":"partial","_content":"\nMicroservice architecture is typically useful to solve certain scaling problems where service decoupling/segregation is required to improve development velocity, make service more fault tolerant or handle performance hotspots.\n\nHowever, everything comes with a price and so does microservice. One typical issue is:\n\n<img src=\"{% asset_path ms-failure.png %}\" style=\"width: 600px\" />\n\nWhile this is half joking, monitoring and fault resilency are definitely more challenging in microservice world. While there are frameworks like Hystrix and resilience4j to handle circuit breaking, rate limiting and stuff like that, this post focuses on the first thing: how the heck are my services talking to each other?\n\nAWS X-Ray can fill the gap here by offering service mapping and tracing and thus you can see something like\n\n{% asset_img xray.png %}\n\n{% asset_img tracing.png %}\n\nCompared to generic service monitoring,\nX-Ray has some additional benefits around AWS ecosystem in that\nit will auto expose your AWS resource write\n(yes only write unfortunately) call insights when you use AWS SDK.\nThis applies to SQS, SNS and DynamoDB.\n\n<!-- more -->\n\nBut first of all, you need to understand how X-Ray works:\n\n- X-Ray requires application to forward insights to the daemon.\n  In EC2, this means the daemon process alongside with your application.\n  In Kubenetes, this means you'd need to install it as a daemonset so it would run with your node.\n- When a request enters the first service (typically an API gateway),\n  the service is responsible for creating the first `segment` and generate the `trace ID`\n  (typically created by AWS X-Ray SDK).\n  A `segment` represents the overall lifecycle of a request within **one** application,\n  identified by `segment ID`.\n  A `trace ID` identifies the overall roundtrip of a request across **multiple** applications.\n- A service, when making requests to other services,\n  should generate corresponding `subsegment`s.\n  A `subsegment` is used to identify activities within one application.\n  This is not required for service mapping but nice to have for tracing purposes.\n- A service, when accepting traffic from other services,\n  should relay the trace ID and the previous segment ID (called parent ID in SDK).\n  This is such that the service mapping can be generated.\n\nFor inter-service communication, gRPC is often used. Compared to JSON over REST, gRPC offers more flexibility around query design and better performance thanks to the efficiency of (de)serialization with protobuf and the usage of http2 multiplexing. The extra typing and backward compatibility from protobuf also help documentation and maintenance, improving the overall quality of service quorum.\n\nHowever, while X-Ray SDK offers J2EE servlet filter for general http servers, gRPC does not follow that. The canonical [gRPC Java implementation](https://github.com/grpc/grpc-java) uses netty and has no knowledge around that.\n\nThis means we'd have to write some custom code. Unfortunately the documentation around that is [next to none](https://grpc.io/docs/quickstart/java.html). Luckily, gRPC has implicit support via `io.grpc.ServerInterceptor` and `io.grpc.ClientInterceptor` so it's just a matter of how to wire pieces together.\n\nOverall there are 4 steps:\n\n1. Set up Kubernetes daemonset\n2. Grant permission to Kubernetes nodes so they can write metrics to X-Ray.\n3. Write/use interceptors in code\n4. Route metrics to X-Ray daemon\n\nLet's do this step by step:\n\n#### Set up Kubernetes daemonset\n\nThere's an example offered by Amazon regarding how to install it: [link](https://github.com/aws-samples/aws-xray-kubernetes)\n\n#### Grant permission to Kubernetes nodes\n\nThis is a bit tricky depending how your kube cluster is set up.\n\nIf you use EKS/EC2, you need to grant X-Ray write permission by\nattaching the canned policy to your IAM role for the worker nodes.\n\n<img src=\"{% asset_path iam.png %}\" style=\"width: 400px\" />\n\nIf you host your kubenetes outside AWS ecosystem,\nwell chances are you don't need X-Ray but something generic like Istio's sidecar approach.\nBut if you do need it then you can create IAM users,\nattach the policy and use these users in your code.\n\n#### Write/use interceptors in code\n\nFirst, we need to make sure we use the same language between server and client.\nIn typical HTTP this is the headers.\nIn gRPC this is the metadata, keyed by `Key`.\n\n```java\npublic class Keys {\n\n    public static final Metadata.Key<String> TRACE_ID_HEADER = Metadata.Key.of(\"traceId\", Metadata.ASCII_STRING_MARSHALLER);\n    public static final Metadata.Key<String> PARENT_ID_HEADER = Metadata.Key.of(\"parentId\", Metadata.ASCII_STRING_MARSHALLER);\n\n}\n```\n\nNow, let's implement client interceptor.\n\nFirst you need some X-Ray stuff in classpath\n(assuming Gradle is used for dependence managmement, should be similar for maven/ivy/sbt):\n\n```groovy\ndependencies {\n  compile (\n    \"com.amazonaws:aws-xray-recorder-sdk-core\",\n    \"com.amazonaws:aws-xray-recorder-sdk-aws-sdk\",\n  )\n}\n```\n\nNote for demonstration purpose the verion is omitted here,\nfor actual usage you should peg the latest version at the time.\n\nIf you want X-Ray to instrument your AWS resource calls, you also need:\n\n```groovy\ncompile(\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor\")\n```\n\nNow the code:\n\n```java\npublic class XRayClientInterceptor implements ClientInterceptor {\n\n    private final AWSXRayRecorder recorder = AWSXRayRecorderBuilder.defaultRecorder();\n\n    @Override\n    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n            MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n        final Segment segment = recorder.getCurrentSegmentOptional().orElseGet(() -> {\n            //noinspection CodeBlock2Expr\n            return recorder.beginSegment(method.getFullMethodName());\n        });\n        final String segmentId = segment.getId();\n        final String traceId = segment.getTraceId().toString();\n        ClientCall<ReqT, RespT> call = next.newCall(method, callOptions);\n        return new ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT>(call) {\n            @Override\n            public void start(Listener<RespT> responseListener, Metadata headers) {\n                Subsegment callSegment = recorder.beginSubsegment(method.getFullMethodName());\n                final Entity context = recorder.getTraceEntity();\n                headers.discardAll(Keys.PARENT_ID_HEADER);\n                headers.put(Keys.PARENT_ID_HEADER, segmentId);\n                headers.put(Keys.TRACE_ID_HEADER, traceId);\n                delegate().start(\n                        new ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT>(responseListener) {\n                            @Override\n                            public void onClose(io.grpc.Status status, Metadata trailers) {\n                                if (status.getCause() != null) {\n                                    callSegment.addException(status.getCause());\n                                } else if (!status.isOk()) {\n                                    callSegment.setError(true);\n                                }\n                                try {\n                                    super.onClose(status, trailers);\n                                } finally {\n                                    Entity originalContext = recorder.getTraceEntity();\n                                    recorder.setTraceEntity(context);\n                                    try {\n                                        callSegment.close();\n                                    } finally {\n                                        recorder.setTraceEntity(originalContext);\n                                    }\n                                }\n                            }\n                        },\n                        headers);\n            }\n        };\n    }\n}\n```\n\nThere's quite a lot of code here but the key gotchas are:\n\n- You should always use an existing segment if one exists,\n  which is what `getCurrentSegmentOptional()` is for.\n  Fail to do so would result in the loss of previous segment.\n  If in some other code the previous segment is still referenced,\n  you will get missing context exceptions when trying to close it.\n- Always bear in mind that data streaming/async handling is baked in gRPC design.\n  So never close the segment directly after starting forwarding the client call.\n  Instead, implement `ClientCallListener` and let gRPC tell you when\n  it actually starts/finishes it.\n- `AWSXRayRecorder` is thread safe so using one for all calls should be fine.\n  However, all the segments are tracked via `ThreadLocalSegmentContext` by default.\n  That is shared by **all** instances across the entire app by default\n  even if you have multiple `AWSXRayRecorder` instances.\n  What that implies is you should\n  **always remember the corresponding context for that segment/subsegment**,\n  especially when crossing threads. Failure to do so would result in weird errors.\n  This is what `getTraceEntity()` and `setTraceEntity()` are for.\n- The `put()` calls would append if key with the same name already exists.\n  So remember to clean it up first.\n  The trace ID meta doesn't need to be cleared because\n  it's supposed to be the same as mentioned.\n\nAfter that, wire it up when you build the client:\n\n```java\nnewBlockingStub(channel).withInterceptors(new XRayClientInterceptor());\n```\n\nNext, let's build the server side interceptor:\n\nThis has some extra flavors in that it assumes you use a spring based\ngRPC server like the [LogNet Springboot](https://github.com/LogNet/grpc-spring-boot-starter) one.\nThe `GRpcGlobalInterceptor` would tell the runner to inject the interceptor automagically.\nIf that's not the case, that's fine,\njust replace the `appName` with some other logic,\nand wire up the interceptor using `ServerInterceptors.intercept(serviceDefinition, interceptors)`.\n\n```java\n@GRpcGlobalInterceptor\npublic class XRayServerInterceptor implements ServerInterceptor {\n\n    @Value(\"${spring.application.name}\")\n    private String appName;\n\n    @Override\n    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n        String traceId = headers.get(Keys.TRACE_ID_HEADER);\n        String parentId = headers.get(Keys.PARENT_ID_HEADER);\n        TraceID tId = new TraceID();\n        if (traceId != null) {\n            tId = TraceID.fromString(traceId);\n        }\n        Segment segment = recorder.beginSegment(appName, tId, parentId);\n        headers.discardAll(Keys.PARENT_ID_HEADER);\n        headers.discardAll(Keys.TRACE_ID_HEADER);\n        headers.put(Keys.PARENT_ID_HEADER, segment.getId());\n        headers.put(Keys.TRACE_ID_HEADER, tId.toString());\n        ServerCall.Listener<ReqT> listener = next.startCall(call, headers);\n\n        return new ForwardingListener<>(listener, call, recorder, recorder.getTraceEntity(), segment);\n    }\n}\n\npublic class ForwardingListener<T, R>\n        extends ForwardingServerCallListener.SimpleForwardingServerCallListener<T> {\n\n    private ServerCall<T, R> call;\n    private AWSXRayRecorder recorder;\n    private Entity entity;\n    private Segment segment;\n\n    public ForwardingListener(ServerCall.Listener<T> delegate,\n            ServerCall<T, R> call,\n            AWSXRayRecorder recorder,\n            Entity entity,\n            Segment segment\n    ) {\n        super(delegate);\n        this.call = call;\n        this.recorder = recorder;\n        this.entity = entity;\n        this.segment = segment;\n    }\n\n    @Override\n    public void onCancel() {\n        recorder.setTraceEntity(entity);\n        if (call.isCancelled()) {\n            return;\n        }\n        segment.setFault(true);\n        try {\n            super.onCancel();\n        }\n        finally {\n            segment.close();\n        }\n    }\n\n    @Override\n    public void onComplete() {\n        recorder.setTraceEntity(entity);\n        try {\n            super.onComplete();\n        }\n        catch (Throwable e) {\n            segment.setError(true);\n        }\n        finally {\n            segment.close();\n        }\n    }\n\n}\n```\n\n#### Route metrics to X-Ray daemon\n\nLast but not least, we need to tell X-Ray SDK to forward them to our daemon:\n\n```yaml\n    spec:\n      containers:\n      ...\n        - name: ...\n          env:\n          - name: AWS_XRAY_DAEMON_ADDRESS \n            value: xray-daemon:2000\n```\n\nThe value corresponds to your daemon name.\n\n`AWS_XRAY_DAEMON_ADDRESS` will be read by AWS SDK at runtime.\n\n#### Done\n\nAnd that's it. Just deploy the apps to kube cluster.\nBear in mind that the service map is bound to time range.\nIt won't show up until you get traffic across your apps.\nAnd if you have traffic split like A/B testing or service\nmigration, you'll see how things evolve over time,\nwhich is pretty cool.\n","source":"_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray.md","raw":"---\ntitle: Monitor gRPC Microservices in Kubernetes with Amazon X-Ray\ndate: 2018-11-25 14:11:39\ncategories:\n- Operation\n- Architecture\ntags:\n- monitoring\n- grpc\n- microservice\n- kubernetes\n- aws\n- xray\ncoverImage: xray.png\ncoverMeta: out\ncoverSize: partial\n---\n\nMicroservice architecture is typically useful to solve certain scaling problems where service decoupling/segregation is required to improve development velocity, make service more fault tolerant or handle performance hotspots.\n\nHowever, everything comes with a price and so does microservice. One typical issue is:\n\n<img src=\"{% asset_path ms-failure.png %}\" style=\"width: 600px\" />\n\nWhile this is half joking, monitoring and fault resilency are definitely more challenging in microservice world. While there are frameworks like Hystrix and resilience4j to handle circuit breaking, rate limiting and stuff like that, this post focuses on the first thing: how the heck are my services talking to each other?\n\nAWS X-Ray can fill the gap here by offering service mapping and tracing and thus you can see something like\n\n{% asset_img xray.png %}\n\n{% asset_img tracing.png %}\n\nCompared to generic service monitoring,\nX-Ray has some additional benefits around AWS ecosystem in that\nit will auto expose your AWS resource write\n(yes only write unfortunately) call insights when you use AWS SDK.\nThis applies to SQS, SNS and DynamoDB.\n\n<!-- more -->\n\nBut first of all, you need to understand how X-Ray works:\n\n- X-Ray requires application to forward insights to the daemon.\n  In EC2, this means the daemon process alongside with your application.\n  In Kubenetes, this means you'd need to install it as a daemonset so it would run with your node.\n- When a request enters the first service (typically an API gateway),\n  the service is responsible for creating the first `segment` and generate the `trace ID`\n  (typically created by AWS X-Ray SDK).\n  A `segment` represents the overall lifecycle of a request within **one** application,\n  identified by `segment ID`.\n  A `trace ID` identifies the overall roundtrip of a request across **multiple** applications.\n- A service, when making requests to other services,\n  should generate corresponding `subsegment`s.\n  A `subsegment` is used to identify activities within one application.\n  This is not required for service mapping but nice to have for tracing purposes.\n- A service, when accepting traffic from other services,\n  should relay the trace ID and the previous segment ID (called parent ID in SDK).\n  This is such that the service mapping can be generated.\n\nFor inter-service communication, gRPC is often used. Compared to JSON over REST, gRPC offers more flexibility around query design and better performance thanks to the efficiency of (de)serialization with protobuf and the usage of http2 multiplexing. The extra typing and backward compatibility from protobuf also help documentation and maintenance, improving the overall quality of service quorum.\n\nHowever, while X-Ray SDK offers J2EE servlet filter for general http servers, gRPC does not follow that. The canonical [gRPC Java implementation](https://github.com/grpc/grpc-java) uses netty and has no knowledge around that.\n\nThis means we'd have to write some custom code. Unfortunately the documentation around that is [next to none](https://grpc.io/docs/quickstart/java.html). Luckily, gRPC has implicit support via `io.grpc.ServerInterceptor` and `io.grpc.ClientInterceptor` so it's just a matter of how to wire pieces together.\n\nOverall there are 4 steps:\n\n1. Set up Kubernetes daemonset\n2. Grant permission to Kubernetes nodes so they can write metrics to X-Ray.\n3. Write/use interceptors in code\n4. Route metrics to X-Ray daemon\n\nLet's do this step by step:\n\n#### Set up Kubernetes daemonset\n\nThere's an example offered by Amazon regarding how to install it: [link](https://github.com/aws-samples/aws-xray-kubernetes)\n\n#### Grant permission to Kubernetes nodes\n\nThis is a bit tricky depending how your kube cluster is set up.\n\nIf you use EKS/EC2, you need to grant X-Ray write permission by\nattaching the canned policy to your IAM role for the worker nodes.\n\n<img src=\"{% asset_path iam.png %}\" style=\"width: 400px\" />\n\nIf you host your kubenetes outside AWS ecosystem,\nwell chances are you don't need X-Ray but something generic like Istio's sidecar approach.\nBut if you do need it then you can create IAM users,\nattach the policy and use these users in your code.\n\n#### Write/use interceptors in code\n\nFirst, we need to make sure we use the same language between server and client.\nIn typical HTTP this is the headers.\nIn gRPC this is the metadata, keyed by `Key`.\n\n```java\npublic class Keys {\n\n    public static final Metadata.Key<String> TRACE_ID_HEADER = Metadata.Key.of(\"traceId\", Metadata.ASCII_STRING_MARSHALLER);\n    public static final Metadata.Key<String> PARENT_ID_HEADER = Metadata.Key.of(\"parentId\", Metadata.ASCII_STRING_MARSHALLER);\n\n}\n```\n\nNow, let's implement client interceptor.\n\nFirst you need some X-Ray stuff in classpath\n(assuming Gradle is used for dependence managmement, should be similar for maven/ivy/sbt):\n\n```groovy\ndependencies {\n  compile (\n    \"com.amazonaws:aws-xray-recorder-sdk-core\",\n    \"com.amazonaws:aws-xray-recorder-sdk-aws-sdk\",\n  )\n}\n```\n\nNote for demonstration purpose the verion is omitted here,\nfor actual usage you should peg the latest version at the time.\n\nIf you want X-Ray to instrument your AWS resource calls, you also need:\n\n```groovy\ncompile(\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor\")\n```\n\nNow the code:\n\n```java\npublic class XRayClientInterceptor implements ClientInterceptor {\n\n    private final AWSXRayRecorder recorder = AWSXRayRecorderBuilder.defaultRecorder();\n\n    @Override\n    public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n            MethodDescriptor<ReqT, RespT> method, CallOptions callOptions, Channel next) {\n        final Segment segment = recorder.getCurrentSegmentOptional().orElseGet(() -> {\n            //noinspection CodeBlock2Expr\n            return recorder.beginSegment(method.getFullMethodName());\n        });\n        final String segmentId = segment.getId();\n        final String traceId = segment.getTraceId().toString();\n        ClientCall<ReqT, RespT> call = next.newCall(method, callOptions);\n        return new ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT>(call) {\n            @Override\n            public void start(Listener<RespT> responseListener, Metadata headers) {\n                Subsegment callSegment = recorder.beginSubsegment(method.getFullMethodName());\n                final Entity context = recorder.getTraceEntity();\n                headers.discardAll(Keys.PARENT_ID_HEADER);\n                headers.put(Keys.PARENT_ID_HEADER, segmentId);\n                headers.put(Keys.TRACE_ID_HEADER, traceId);\n                delegate().start(\n                        new ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT>(responseListener) {\n                            @Override\n                            public void onClose(io.grpc.Status status, Metadata trailers) {\n                                if (status.getCause() != null) {\n                                    callSegment.addException(status.getCause());\n                                } else if (!status.isOk()) {\n                                    callSegment.setError(true);\n                                }\n                                try {\n                                    super.onClose(status, trailers);\n                                } finally {\n                                    Entity originalContext = recorder.getTraceEntity();\n                                    recorder.setTraceEntity(context);\n                                    try {\n                                        callSegment.close();\n                                    } finally {\n                                        recorder.setTraceEntity(originalContext);\n                                    }\n                                }\n                            }\n                        },\n                        headers);\n            }\n        };\n    }\n}\n```\n\nThere's quite a lot of code here but the key gotchas are:\n\n- You should always use an existing segment if one exists,\n  which is what `getCurrentSegmentOptional()` is for.\n  Fail to do so would result in the loss of previous segment.\n  If in some other code the previous segment is still referenced,\n  you will get missing context exceptions when trying to close it.\n- Always bear in mind that data streaming/async handling is baked in gRPC design.\n  So never close the segment directly after starting forwarding the client call.\n  Instead, implement `ClientCallListener` and let gRPC tell you when\n  it actually starts/finishes it.\n- `AWSXRayRecorder` is thread safe so using one for all calls should be fine.\n  However, all the segments are tracked via `ThreadLocalSegmentContext` by default.\n  That is shared by **all** instances across the entire app by default\n  even if you have multiple `AWSXRayRecorder` instances.\n  What that implies is you should\n  **always remember the corresponding context for that segment/subsegment**,\n  especially when crossing threads. Failure to do so would result in weird errors.\n  This is what `getTraceEntity()` and `setTraceEntity()` are for.\n- The `put()` calls would append if key with the same name already exists.\n  So remember to clean it up first.\n  The trace ID meta doesn't need to be cleared because\n  it's supposed to be the same as mentioned.\n\nAfter that, wire it up when you build the client:\n\n```java\nnewBlockingStub(channel).withInterceptors(new XRayClientInterceptor());\n```\n\nNext, let's build the server side interceptor:\n\nThis has some extra flavors in that it assumes you use a spring based\ngRPC server like the [LogNet Springboot](https://github.com/LogNet/grpc-spring-boot-starter) one.\nThe `GRpcGlobalInterceptor` would tell the runner to inject the interceptor automagically.\nIf that's not the case, that's fine,\njust replace the `appName` with some other logic,\nand wire up the interceptor using `ServerInterceptors.intercept(serviceDefinition, interceptors)`.\n\n```java\n@GRpcGlobalInterceptor\npublic class XRayServerInterceptor implements ServerInterceptor {\n\n    @Value(\"${spring.application.name}\")\n    private String appName;\n\n    @Override\n    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n        String traceId = headers.get(Keys.TRACE_ID_HEADER);\n        String parentId = headers.get(Keys.PARENT_ID_HEADER);\n        TraceID tId = new TraceID();\n        if (traceId != null) {\n            tId = TraceID.fromString(traceId);\n        }\n        Segment segment = recorder.beginSegment(appName, tId, parentId);\n        headers.discardAll(Keys.PARENT_ID_HEADER);\n        headers.discardAll(Keys.TRACE_ID_HEADER);\n        headers.put(Keys.PARENT_ID_HEADER, segment.getId());\n        headers.put(Keys.TRACE_ID_HEADER, tId.toString());\n        ServerCall.Listener<ReqT> listener = next.startCall(call, headers);\n\n        return new ForwardingListener<>(listener, call, recorder, recorder.getTraceEntity(), segment);\n    }\n}\n\npublic class ForwardingListener<T, R>\n        extends ForwardingServerCallListener.SimpleForwardingServerCallListener<T> {\n\n    private ServerCall<T, R> call;\n    private AWSXRayRecorder recorder;\n    private Entity entity;\n    private Segment segment;\n\n    public ForwardingListener(ServerCall.Listener<T> delegate,\n            ServerCall<T, R> call,\n            AWSXRayRecorder recorder,\n            Entity entity,\n            Segment segment\n    ) {\n        super(delegate);\n        this.call = call;\n        this.recorder = recorder;\n        this.entity = entity;\n        this.segment = segment;\n    }\n\n    @Override\n    public void onCancel() {\n        recorder.setTraceEntity(entity);\n        if (call.isCancelled()) {\n            return;\n        }\n        segment.setFault(true);\n        try {\n            super.onCancel();\n        }\n        finally {\n            segment.close();\n        }\n    }\n\n    @Override\n    public void onComplete() {\n        recorder.setTraceEntity(entity);\n        try {\n            super.onComplete();\n        }\n        catch (Throwable e) {\n            segment.setError(true);\n        }\n        finally {\n            segment.close();\n        }\n    }\n\n}\n```\n\n#### Route metrics to X-Ray daemon\n\nLast but not least, we need to tell X-Ray SDK to forward them to our daemon:\n\n```yaml\n    spec:\n      containers:\n      ...\n        - name: ...\n          env:\n          - name: AWS_XRAY_DAEMON_ADDRESS \n            value: xray-daemon:2000\n```\n\nThe value corresponds to your daemon name.\n\n`AWS_XRAY_DAEMON_ADDRESS` will be read by AWS SDK at runtime.\n\n#### Done\n\nAnd that's it. Just deploy the apps to kube cluster.\nBear in mind that the service map is bound to time range.\nIt won't show up until you get traffic across your apps.\nAnd if you have traffic split like A/B testing or service\nmigration, you'll see how things evolve over time,\nwhich is pretty cool.\n","slug":"Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray","published":1,"updated":"2020-05-04T00:05:42.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi60008sxmgfged66ie","content":"<p>Microservice architecture is typically useful to solve certain scaling problems where service decoupling/segregation is required to improve development velocity, make service more fault tolerant or handle performance hotspots.</p>\n<p>However, everything comes with a price and so does microservice. One typical issue is:</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/ms-failure.png\" style=\"width: 600px\">\n\n<p>While this is half joking, monitoring and fault resilency are definitely more challenging in microservice world. While there are frameworks like Hystrix and resilience4j to handle circuit breaking, rate limiting and stuff like that, this post focuses on the first thing: how the heck are my services talking to each other?</p>\n<p>AWS X-Ray can fill the gap here by offering service mapping and tracing and thus you can see something like</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/xray.png\">\n\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/tracing.png\">\n\n<p>Compared to generic service monitoring,\nX-Ray has some additional benefits around AWS ecosystem in that\nit will auto expose your AWS resource write\n(yes only write unfortunately) call insights when you use AWS SDK.\nThis applies to SQS, SNS and DynamoDB.</p>\n<a id=\"more\"></a>\n\n<p>But first of all, you need to understand how X-Ray works:</p>\n<ul>\n<li>X-Ray requires application to forward insights to the daemon.\nIn EC2, this means the daemon process alongside with your application.\nIn Kubenetes, this means you’d need to install it as a daemonset so it would run with your node.</li>\n<li>When a request enters the first service (typically an API gateway),\nthe service is responsible for creating the first <code>segment</code> and generate the <code>trace ID</code>\n(typically created by AWS X-Ray SDK).\nA <code>segment</code> represents the overall lifecycle of a request within <strong>one</strong> application,\nidentified by <code>segment ID</code>.\nA <code>trace ID</code> identifies the overall roundtrip of a request across <strong>multiple</strong> applications.</li>\n<li>A service, when making requests to other services,\nshould generate corresponding <code>subsegment</code>s.\nA <code>subsegment</code> is used to identify activities within one application.\nThis is not required for service mapping but nice to have for tracing purposes.</li>\n<li>A service, when accepting traffic from other services,\nshould relay the trace ID and the previous segment ID (called parent ID in SDK).\nThis is such that the service mapping can be generated.</li>\n</ul>\n<p>For inter-service communication, gRPC is often used. Compared to JSON over REST, gRPC offers more flexibility around query design and better performance thanks to the efficiency of (de)serialization with protobuf and the usage of http2 multiplexing. The extra typing and backward compatibility from protobuf also help documentation and maintenance, improving the overall quality of service quorum.</p>\n<p>However, while X-Ray SDK offers J2EE servlet filter for general http servers, gRPC does not follow that. The canonical <a href=\"https://github.com/grpc/grpc-java\" target=\"_blank\" rel=\"noopener\">gRPC Java implementation</a> uses netty and has no knowledge around that.</p>\n<p>This means we’d have to write some custom code. Unfortunately the documentation around that is <a href=\"https://grpc.io/docs/quickstart/java.html\" target=\"_blank\" rel=\"noopener\">next to none</a>. Luckily, gRPC has implicit support via <code>io.grpc.ServerInterceptor</code> and <code>io.grpc.ClientInterceptor</code> so it’s just a matter of how to wire pieces together.</p>\n<p>Overall there are 4 steps:</p>\n<ol>\n<li>Set up Kubernetes daemonset</li>\n<li>Grant permission to Kubernetes nodes so they can write metrics to X-Ray.</li>\n<li>Write/use interceptors in code</li>\n<li>Route metrics to X-Ray daemon</li>\n</ol>\n<p>Let’s do this step by step:</p>\n<h4 id=\"Set-up-Kubernetes-daemonset\"><a href=\"#Set-up-Kubernetes-daemonset\" class=\"headerlink\" title=\"Set up Kubernetes daemonset\"></a>Set up Kubernetes daemonset</h4><p>There’s an example offered by Amazon regarding how to install it: <a href=\"https://github.com/aws-samples/aws-xray-kubernetes\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<h4 id=\"Grant-permission-to-Kubernetes-nodes\"><a href=\"#Grant-permission-to-Kubernetes-nodes\" class=\"headerlink\" title=\"Grant permission to Kubernetes nodes\"></a>Grant permission to Kubernetes nodes</h4><p>This is a bit tricky depending how your kube cluster is set up.</p>\n<p>If you use EKS/EC2, you need to grant X-Ray write permission by\nattaching the canned policy to your IAM role for the worker nodes.</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/iam.png\" style=\"width: 400px\">\n\n<p>If you host your kubenetes outside AWS ecosystem,\nwell chances are you don’t need X-Ray but something generic like Istio’s sidecar approach.\nBut if you do need it then you can create IAM users,\nattach the policy and use these users in your code.</p>\n<h4 id=\"Write-use-interceptors-in-code\"><a href=\"#Write-use-interceptors-in-code\" class=\"headerlink\" title=\"Write/use interceptors in code\"></a>Write/use interceptors in code</h4><p>First, we need to make sure we use the same language between server and client.\nIn typical HTTP this is the headers.\nIn gRPC this is the metadata, keyed by <code>Key</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Keys</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Metadata.Key&lt;String&gt; TRACE_ID_HEADER = Metadata.Key.of(<span class=\"string\">\"traceId\"</span>, Metadata.ASCII_STRING_MARSHALLER);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Metadata.Key&lt;String&gt; PARENT_ID_HEADER = Metadata.Key.of(<span class=\"string\">\"parentId\"</span>, Metadata.ASCII_STRING_MARSHALLER);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, let’s implement client interceptor.</p>\n<p>First you need some X-Ray stuff in classpath\n(assuming Gradle is used for dependence managmement, should be similar for maven/ivy/sbt):</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  compile (</span><br><span class=\"line\">    <span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-core\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk\"</span>,</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note for demonstration purpose the verion is omitted here,\nfor actual usage you should peg the latest version at the time.</p>\n<p>If you want X-Ray to instrument your AWS resource calls, you also need:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(<span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Now the code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XRayClientInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClientInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AWSXRayRecorder recorder = AWSXRayRecorderBuilder.defaultRecorder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;ReqT, RespT&gt; <span class=\"function\">ClientCall&lt;ReqT, RespT&gt; <span class=\"title\">interceptCall</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MethodDescriptor&lt;ReqT, RespT&gt; method, CallOptions callOptions, Channel next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Segment segment = recorder.getCurrentSegmentOptional().orElseGet(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection CodeBlock2Expr</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recorder.beginSegment(method.getFullMethodName());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String segmentId = segment.getId();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String traceId = segment.getTraceId().toString();</span><br><span class=\"line\">        ClientCall&lt;ReqT, RespT&gt; call = next.newCall(method, callOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForwardingClientCall.SimpleForwardingClientCall&lt;ReqT, RespT&gt;(call) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(Listener&lt;RespT&gt; responseListener, Metadata headers)</span> </span>&#123;</span><br><span class=\"line\">                Subsegment callSegment = recorder.beginSubsegment(method.getFullMethodName());</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Entity context = recorder.getTraceEntity();</span><br><span class=\"line\">                headers.discardAll(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">                headers.put(Keys.PARENT_ID_HEADER, segmentId);</span><br><span class=\"line\">                headers.put(Keys.TRACE_ID_HEADER, traceId);</span><br><span class=\"line\">                delegate().start(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> ForwardingClientCallListener.SimpleForwardingClientCallListener&lt;RespT&gt;(responseListener) &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(io.grpc.Status status, Metadata trailers)</span> </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (status.getCause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                    callSegment.addException(status.getCause());</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!status.isOk()) &#123;</span><br><span class=\"line\">                                    callSegment.setError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">super</span>.onClose(status, trailers);</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                                    Entity originalContext = recorder.getTraceEntity();</span><br><span class=\"line\">                                    recorder.setTraceEntity(context);</span><br><span class=\"line\">                                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                        callSegment.close();</span><br><span class=\"line\">                                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                                        recorder.setTraceEntity(originalContext);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        headers);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There’s quite a lot of code here but the key gotchas are:</p>\n<ul>\n<li>You should always use an existing segment if one exists,\nwhich is what <code>getCurrentSegmentOptional()</code> is for.\nFail to do so would result in the loss of previous segment.\nIf in some other code the previous segment is still referenced,\nyou will get missing context exceptions when trying to close it.</li>\n<li>Always bear in mind that data streaming/async handling is baked in gRPC design.\nSo never close the segment directly after starting forwarding the client call.\nInstead, implement <code>ClientCallListener</code> and let gRPC tell you when\nit actually starts/finishes it.</li>\n<li><code>AWSXRayRecorder</code> is thread safe so using one for all calls should be fine.\nHowever, all the segments are tracked via <code>ThreadLocalSegmentContext</code> by default.\nThat is shared by <strong>all</strong> instances across the entire app by default\neven if you have multiple <code>AWSXRayRecorder</code> instances.\nWhat that implies is you should\n<strong>always remember the corresponding context for that segment/subsegment</strong>,\nespecially when crossing threads. Failure to do so would result in weird errors.\nThis is what <code>getTraceEntity()</code> and <code>setTraceEntity()</code> are for.</li>\n<li>The <code>put()</code> calls would append if key with the same name already exists.\nSo remember to clean it up first.\nThe trace ID meta doesn’t need to be cleared because\nit’s supposed to be the same as mentioned.</li>\n</ul>\n<p>After that, wire it up when you build the client:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newBlockingStub(channel).withInterceptors(<span class=\"keyword\">new</span> XRayClientInterceptor());</span><br></pre></td></tr></table></figure>\n\n<p>Next, let’s build the server side interceptor:</p>\n<p>This has some extra flavors in that it assumes you use a spring based\ngRPC server like the <a href=\"https://github.com/LogNet/grpc-spring-boot-starter\" target=\"_blank\" rel=\"noopener\">LogNet Springboot</a> one.\nThe <code>GRpcGlobalInterceptor</code> would tell the runner to inject the interceptor automagically.\nIf that’s not the case, that’s fine,\njust replace the <code>appName</code> with some other logic,\nand wire up the interceptor using <code>ServerInterceptors.intercept(serviceDefinition, interceptors)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GRpcGlobalInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XRayServerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.application.name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;ReqT, RespT&gt; ServerCall.<span class=\"function\">Listener&lt;ReqT&gt; <span class=\"title\">interceptCall</span><span class=\"params\">(ServerCall&lt;ReqT, RespT&gt; call, Metadata headers, ServerCallHandler&lt;ReqT, RespT&gt; next)</span> </span>&#123;</span><br><span class=\"line\">        String traceId = headers.get(Keys.TRACE_ID_HEADER);</span><br><span class=\"line\">        String parentId = headers.get(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">        TraceID tId = <span class=\"keyword\">new</span> TraceID();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (traceId != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tId = TraceID.fromString(traceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Segment segment = recorder.beginSegment(appName, tId, parentId);</span><br><span class=\"line\">        headers.discardAll(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">        headers.discardAll(Keys.TRACE_ID_HEADER);</span><br><span class=\"line\">        headers.put(Keys.PARENT_ID_HEADER, segment.getId());</span><br><span class=\"line\">        headers.put(Keys.TRACE_ID_HEADER, tId.toString());</span><br><span class=\"line\">        ServerCall.Listener&lt;ReqT&gt; listener = next.startCall(call, headers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForwardingListener&lt;&gt;(listener, call, recorder, recorder.getTraceEntity(), segment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForwardingListener</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">extends</span> <span class=\"title\">ForwardingServerCallListener</span>.<span class=\"title\">SimpleForwardingServerCallListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerCall&lt;T, R&gt; call;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AWSXRayRecorder recorder;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Entity entity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Segment segment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForwardingListener</span><span class=\"params\">(ServerCall.Listener&lt;T&gt; delegate,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ServerCall&lt;T, R&gt; call,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            AWSXRayRecorder recorder,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Entity entity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Segment segment</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(delegate);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.call = call;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.recorder = recorder;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entity = entity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.segment = segment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        recorder.setTraceEntity(entity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (call.isCancelled()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        segment.setFault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onCancel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            segment.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        recorder.setTraceEntity(entity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            segment.setError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            segment.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Route-metrics-to-X-Ray-daemon\"><a href=\"#Route-metrics-to-X-Ray-daemon\" class=\"headerlink\" title=\"Route metrics to X-Ray daemon\"></a>Route metrics to X-Ray daemon</h4><p>Last but not least, we need to tell X-Ray SDK to forward them to our daemon:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  containers:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">    - name:</span> <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">      env:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">AWS_XRAY_DAEMON_ADDRESS</span> </span><br><span class=\"line\"><span class=\"attr\">        value:</span> <span class=\"attr\">xray-daemon:2000</span></span><br></pre></td></tr></table></figure>\n\n<p>The value corresponds to your daemon name.</p>\n<p><code>AWS_XRAY_DAEMON_ADDRESS</code> will be read by AWS SDK at runtime.</p>\n<h4 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h4><p>And that’s it. Just deploy the apps to kube cluster.\nBear in mind that the service map is bound to time range.\nIt won’t show up until you get traffic across your apps.\nAnd if you have traffic split like A/B testing or service\nmigration, you’ll see how things evolve over time,\nwhich is pretty cool.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<p>Microservice architecture is typically useful to solve certain scaling problems where service decoupling/segregation is required to improve development velocity, make service more fault tolerant or handle performance hotspots.</p>\n<p>However, everything comes with a price and so does microservice. One typical issue is:</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/ms-failure.png\" style=\"width: 600px\">\n\n<p>While this is half joking, monitoring and fault resilency are definitely more challenging in microservice world. While there are frameworks like Hystrix and resilience4j to handle circuit breaking, rate limiting and stuff like that, this post focuses on the first thing: how the heck are my services talking to each other?</p>\n<p>AWS X-Ray can fill the gap here by offering service mapping and tracing and thus you can see something like</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/xray.png\">\n\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/tracing.png\">\n\n<p>Compared to generic service monitoring,\nX-Ray has some additional benefits around AWS ecosystem in that\nit will auto expose your AWS resource write\n(yes only write unfortunately) call insights when you use AWS SDK.\nThis applies to SQS, SNS and DynamoDB.</p>","more":"<p>But first of all, you need to understand how X-Ray works:</p>\n<ul>\n<li>X-Ray requires application to forward insights to the daemon.\nIn EC2, this means the daemon process alongside with your application.\nIn Kubenetes, this means you’d need to install it as a daemonset so it would run with your node.</li>\n<li>When a request enters the first service (typically an API gateway),\nthe service is responsible for creating the first <code>segment</code> and generate the <code>trace ID</code>\n(typically created by AWS X-Ray SDK).\nA <code>segment</code> represents the overall lifecycle of a request within <strong>one</strong> application,\nidentified by <code>segment ID</code>.\nA <code>trace ID</code> identifies the overall roundtrip of a request across <strong>multiple</strong> applications.</li>\n<li>A service, when making requests to other services,\nshould generate corresponding <code>subsegment</code>s.\nA <code>subsegment</code> is used to identify activities within one application.\nThis is not required for service mapping but nice to have for tracing purposes.</li>\n<li>A service, when accepting traffic from other services,\nshould relay the trace ID and the previous segment ID (called parent ID in SDK).\nThis is such that the service mapping can be generated.</li>\n</ul>\n<p>For inter-service communication, gRPC is often used. Compared to JSON over REST, gRPC offers more flexibility around query design and better performance thanks to the efficiency of (de)serialization with protobuf and the usage of http2 multiplexing. The extra typing and backward compatibility from protobuf also help documentation and maintenance, improving the overall quality of service quorum.</p>\n<p>However, while X-Ray SDK offers J2EE servlet filter for general http servers, gRPC does not follow that. The canonical <a href=\"https://github.com/grpc/grpc-java\" target=\"_blank\" rel=\"noopener\">gRPC Java implementation</a> uses netty and has no knowledge around that.</p>\n<p>This means we’d have to write some custom code. Unfortunately the documentation around that is <a href=\"https://grpc.io/docs/quickstart/java.html\" target=\"_blank\" rel=\"noopener\">next to none</a>. Luckily, gRPC has implicit support via <code>io.grpc.ServerInterceptor</code> and <code>io.grpc.ClientInterceptor</code> so it’s just a matter of how to wire pieces together.</p>\n<p>Overall there are 4 steps:</p>\n<ol>\n<li>Set up Kubernetes daemonset</li>\n<li>Grant permission to Kubernetes nodes so they can write metrics to X-Ray.</li>\n<li>Write/use interceptors in code</li>\n<li>Route metrics to X-Ray daemon</li>\n</ol>\n<p>Let’s do this step by step:</p>\n<h4 id=\"Set-up-Kubernetes-daemonset\"><a href=\"#Set-up-Kubernetes-daemonset\" class=\"headerlink\" title=\"Set up Kubernetes daemonset\"></a>Set up Kubernetes daemonset</h4><p>There’s an example offered by Amazon regarding how to install it: <a href=\"https://github.com/aws-samples/aws-xray-kubernetes\" target=\"_blank\" rel=\"noopener\">link</a></p>\n<h4 id=\"Grant-permission-to-Kubernetes-nodes\"><a href=\"#Grant-permission-to-Kubernetes-nodes\" class=\"headerlink\" title=\"Grant permission to Kubernetes nodes\"></a>Grant permission to Kubernetes nodes</h4><p>This is a bit tricky depending how your kube cluster is set up.</p>\n<p>If you use EKS/EC2, you need to grant X-Ray write permission by\nattaching the canned policy to your IAM role for the worker nodes.</p>\n<img src=\"/2018/11/25/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/iam.png\" style=\"width: 400px\">\n\n<p>If you host your kubenetes outside AWS ecosystem,\nwell chances are you don’t need X-Ray but something generic like Istio’s sidecar approach.\nBut if you do need it then you can create IAM users,\nattach the policy and use these users in your code.</p>\n<h4 id=\"Write-use-interceptors-in-code\"><a href=\"#Write-use-interceptors-in-code\" class=\"headerlink\" title=\"Write/use interceptors in code\"></a>Write/use interceptors in code</h4><p>First, we need to make sure we use the same language between server and client.\nIn typical HTTP this is the headers.\nIn gRPC this is the metadata, keyed by <code>Key</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Keys</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Metadata.Key&lt;String&gt; TRACE_ID_HEADER = Metadata.Key.of(<span class=\"string\">\"traceId\"</span>, Metadata.ASCII_STRING_MARSHALLER);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Metadata.Key&lt;String&gt; PARENT_ID_HEADER = Metadata.Key.of(<span class=\"string\">\"parentId\"</span>, Metadata.ASCII_STRING_MARSHALLER);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now, let’s implement client interceptor.</p>\n<p>First you need some X-Ray stuff in classpath\n(assuming Gradle is used for dependence managmement, should be similar for maven/ivy/sbt):</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  compile (</span><br><span class=\"line\">    <span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-core\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk\"</span>,</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Note for demonstration purpose the verion is omitted here,\nfor actual usage you should peg the latest version at the time.</p>\n<p>If you want X-Ray to instrument your AWS resource calls, you also need:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile(<span class=\"string\">\"com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Now the code:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XRayClientInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClientInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AWSXRayRecorder recorder = AWSXRayRecorderBuilder.defaultRecorder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;ReqT, RespT&gt; <span class=\"function\">ClientCall&lt;ReqT, RespT&gt; <span class=\"title\">interceptCall</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            MethodDescriptor&lt;ReqT, RespT&gt; method, CallOptions callOptions, Channel next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Segment segment = recorder.getCurrentSegmentOptional().orElseGet(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection CodeBlock2Expr</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> recorder.beginSegment(method.getFullMethodName());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String segmentId = segment.getId();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String traceId = segment.getTraceId().toString();</span><br><span class=\"line\">        ClientCall&lt;ReqT, RespT&gt; call = next.newCall(method, callOptions);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForwardingClientCall.SimpleForwardingClientCall&lt;ReqT, RespT&gt;(call) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(Listener&lt;RespT&gt; responseListener, Metadata headers)</span> </span>&#123;</span><br><span class=\"line\">                Subsegment callSegment = recorder.beginSubsegment(method.getFullMethodName());</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Entity context = recorder.getTraceEntity();</span><br><span class=\"line\">                headers.discardAll(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">                headers.put(Keys.PARENT_ID_HEADER, segmentId);</span><br><span class=\"line\">                headers.put(Keys.TRACE_ID_HEADER, traceId);</span><br><span class=\"line\">                delegate().start(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> ForwardingClientCallListener.SimpleForwardingClientCallListener&lt;RespT&gt;(responseListener) &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">(io.grpc.Status status, Metadata trailers)</span> </span>&#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (status.getCause() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                    callSegment.addException(status.getCause());</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!status.isOk()) &#123;</span><br><span class=\"line\">                                    callSegment.setError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    <span class=\"keyword\">super</span>.onClose(status, trailers);</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                                    Entity originalContext = recorder.getTraceEntity();</span><br><span class=\"line\">                                    recorder.setTraceEntity(context);</span><br><span class=\"line\">                                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                        callSegment.close();</span><br><span class=\"line\">                                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                                        recorder.setTraceEntity(originalContext);</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        headers);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>There’s quite a lot of code here but the key gotchas are:</p>\n<ul>\n<li>You should always use an existing segment if one exists,\nwhich is what <code>getCurrentSegmentOptional()</code> is for.\nFail to do so would result in the loss of previous segment.\nIf in some other code the previous segment is still referenced,\nyou will get missing context exceptions when trying to close it.</li>\n<li>Always bear in mind that data streaming/async handling is baked in gRPC design.\nSo never close the segment directly after starting forwarding the client call.\nInstead, implement <code>ClientCallListener</code> and let gRPC tell you when\nit actually starts/finishes it.</li>\n<li><code>AWSXRayRecorder</code> is thread safe so using one for all calls should be fine.\nHowever, all the segments are tracked via <code>ThreadLocalSegmentContext</code> by default.\nThat is shared by <strong>all</strong> instances across the entire app by default\neven if you have multiple <code>AWSXRayRecorder</code> instances.\nWhat that implies is you should\n<strong>always remember the corresponding context for that segment/subsegment</strong>,\nespecially when crossing threads. Failure to do so would result in weird errors.\nThis is what <code>getTraceEntity()</code> and <code>setTraceEntity()</code> are for.</li>\n<li>The <code>put()</code> calls would append if key with the same name already exists.\nSo remember to clean it up first.\nThe trace ID meta doesn’t need to be cleared because\nit’s supposed to be the same as mentioned.</li>\n</ul>\n<p>After that, wire it up when you build the client:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newBlockingStub(channel).withInterceptors(<span class=\"keyword\">new</span> XRayClientInterceptor());</span><br></pre></td></tr></table></figure>\n\n<p>Next, let’s build the server side interceptor:</p>\n<p>This has some extra flavors in that it assumes you use a spring based\ngRPC server like the <a href=\"https://github.com/LogNet/grpc-spring-boot-starter\" target=\"_blank\" rel=\"noopener\">LogNet Springboot</a> one.\nThe <code>GRpcGlobalInterceptor</code> would tell the runner to inject the interceptor automagically.\nIf that’s not the case, that’s fine,\njust replace the <code>appName</code> with some other logic,\nand wire up the interceptor using <code>ServerInterceptors.intercept(serviceDefinition, interceptors)</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GRpcGlobalInterceptor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XRayServerInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServerInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.application.name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String appName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;ReqT, RespT&gt; ServerCall.<span class=\"function\">Listener&lt;ReqT&gt; <span class=\"title\">interceptCall</span><span class=\"params\">(ServerCall&lt;ReqT, RespT&gt; call, Metadata headers, ServerCallHandler&lt;ReqT, RespT&gt; next)</span> </span>&#123;</span><br><span class=\"line\">        String traceId = headers.get(Keys.TRACE_ID_HEADER);</span><br><span class=\"line\">        String parentId = headers.get(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">        TraceID tId = <span class=\"keyword\">new</span> TraceID();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (traceId != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            tId = TraceID.fromString(traceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Segment segment = recorder.beginSegment(appName, tId, parentId);</span><br><span class=\"line\">        headers.discardAll(Keys.PARENT_ID_HEADER);</span><br><span class=\"line\">        headers.discardAll(Keys.TRACE_ID_HEADER);</span><br><span class=\"line\">        headers.put(Keys.PARENT_ID_HEADER, segment.getId());</span><br><span class=\"line\">        headers.put(Keys.TRACE_ID_HEADER, tId.toString());</span><br><span class=\"line\">        ServerCall.Listener&lt;ReqT&gt; listener = next.startCall(call, headers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ForwardingListener&lt;&gt;(listener, call, recorder, recorder.getTraceEntity(), segment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForwardingListener</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">extends</span> <span class=\"title\">ForwardingServerCallListener</span>.<span class=\"title\">SimpleForwardingServerCallListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerCall&lt;T, R&gt; call;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AWSXRayRecorder recorder;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Entity entity;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Segment segment;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForwardingListener</span><span class=\"params\">(ServerCall.Listener&lt;T&gt; delegate,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            ServerCall&lt;T, R&gt; call,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            AWSXRayRecorder recorder,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Entity entity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Segment segment</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(delegate);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.call = call;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.recorder = recorder;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.entity = entity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.segment = segment;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        recorder.setTraceEntity(entity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (call.isCancelled()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        segment.setFault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onCancel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            segment.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        recorder.setTraceEntity(entity);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onComplete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            segment.setError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            segment.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Route-metrics-to-X-Ray-daemon\"><a href=\"#Route-metrics-to-X-Ray-daemon\" class=\"headerlink\" title=\"Route metrics to X-Ray daemon\"></a>Route metrics to X-Ray daemon</h4><p>Last but not least, we need to tell X-Ray SDK to forward them to our daemon:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  containers:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">    - name:</span> <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">      env:</span></span><br><span class=\"line\"><span class=\"attr\">      - name:</span> <span class=\"string\">AWS_XRAY_DAEMON_ADDRESS</span> </span><br><span class=\"line\"><span class=\"attr\">        value:</span> <span class=\"attr\">xray-daemon:2000</span></span><br></pre></td></tr></table></figure>\n\n<p>The value corresponds to your daemon name.</p>\n<p><code>AWS_XRAY_DAEMON_ADDRESS</code> will be read by AWS SDK at runtime.</p>\n<h4 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h4><p>And that’s it. Just deploy the apps to kube cluster.\nBear in mind that the service map is bound to time range.\nIt won’t show up until you get traffic across your apps.\nAnd if you have traffic split like A/B testing or service\nmigration, you’ll see how things evolve over time,\nwhich is pretty cool.</p>"},{"title":"Why you should ditch Browserify and CommonJS in the http/2 world","date":"2016-09-18T17:15:36.000Z","_content":"\n{% alert info no-icon %}\nStop bundling in the http/2 world since it does it for you.\n{% endalert %}\n\n<!-- toc -->\n\n# Modularization is a great idea\n\nBack in the old days where there were no concept regarding frontend package management, we would lay out all the scripts in order in the html file, and hope for the best that they would somehow work together if order were right. This surely doesn't work well with huge projects, but luckily back then JavaScripts weren't so shiny anyways - UIs weren't so cool and logic was much simpler. However, things do evolve. People soon noticed that this approach wouldn't scale - cooperation across multiple teams becomes super tricky, if not impossible, and it doesn't play well with DRY either.\n\nThen people came up with a great idea of modularizing JS code (probably back in 2003?) the same way you would do for your beloved Java/C++ code libraries. And then there came the CommonJS definition concept by Kevin Dangoor back in 2009. Many people got to know this idea thanks to Node.js, and it works quite well, especially for server side code. Now you can easily use npm and build both the frontend and backend using the same tool very quickly, thanks to the JS community. Since people have the same interface for code modularization, team cooperation becomes much easier and projects gain benefit from much better encapsulation.\n\n<!-- more -->\n\n# And browserify was a great tool\n\nBrowerify is a bundling tool based on CommonJS definition by providing polyfill for `require` and `define` calls in browser. Back in the days when AMD wasn't ready, it gave people an easy way of defining your modules the same way as for other node modules and serving everything together as one giant bundle. The idea is based on the fact that browsers have concurrent http request limit, let alone now full-site https becomes popular and SSL handshaking is quite expensive. So by bundling, you cut the number of required requests and hence you get faster page loading.\n\n# However, there are a few small problems...\n\nUnlike AMD, CommonJS is synchronous and you can tell from their API design:\n\n{% codeblock AMD lang:js %}\ndefine(['foo', 'bar'], function (foo, bar) {\n    // code begins\n});\n{% endcodeblock %}\n\n{% codeblock CommonJS lang:js %}\nvar foo = require('foo');\nvar bar = require('bar');\n\n// code begins\n{% endcodeblock %}\n\nIt's easy to load AMD modules asynchronously because the actual code lives in a callback so your loader can play scatter-n-gather. For CommonJS, however, each require call would have to wait until the previous one comes back, which means the loader cannot utilize Ajax and spread the load to multiple http requests in order to speed up the loading process. The solution for browserify is to bundle everything together and hence it can just grab that reference for you in a map. However, if your code library is huge, then it means your initial page load time and above-the-fold time (time between user hits enter and the content in the current browser window stops changing) will be negatively impacted. Moreover, on demand module loading becomes impossible here while in AMD, it's pretty simple.\n\nAnother problem with browserify, which is the main reason why I don't like it, is that bundling becomes mandatory. This makes local dev environment setup and testing tricky and surprise-prone. Using browserify means if my app requires ABC in general, I still need to bundle everything together while I just want to test C. To me that's just ridiculous.\n\n# And http/2 increases the gap\n\nHttp/2 introduces multiplexing which makes CommonJS approach even more crippled. Multiplexing means now you can use one TCP connection to transfer different content from different sources (URLs) on a single host, which makes asynchronous module loading greater. But if you bundle everything together, sorry you are just ignoring all those benefits.\n\nA lot of CDNs support http/2 now, including Akamai, Cloudflare and Cloudfront, you name it. Here's a demo from cloudflare:\n\n{% asset_img comparison.gif %}\n\n(Tested in Chrome 53.0)\n\n# So what to use instead?\n\nECMA 6 is really the way to go. It consolidates the nice API design from CommonJS and the asynchronous and on-demand module loading feature from AMD. Currently, most browsers don't support it yet (as of Sep 2016). Surprisingly Microsoft leads the way this time by [allowing you to turn on this experimental feature](https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond). Regardless of that, Babel can help you turn es6 code to es5, and System.js can fill the gap as the module loader.\n\nJSPM, Babel and System.js is a good combination for the time being. Everything just works seamlessly across different scenarios - you don't need to bundle anything in dev environment while getting all the benefits in production with the same set of configuration. You have the freedom - choose to bundle your scripts for best performance for legacy browser support, or on demand, no bundling for best performance under http/2. The actual workflow configuration is out of the scope of this post. I'll write a post later to discuss this in details, including comparison with the popular bundler - webpack.\n\nHowever, if you can't switch to that for some reason, you can still keep using AMD. The major problems with AMD are:\n\n1. tedious API design (I don't see how this can be changed without a transpiler due to native JS limit)\n2. not friendly to IDE due to separation of module naming and configuration (and webpack suffers from similar issues)\n\nHttp/2 makes a lot of old \"golden rules\" no longer correct. Spriting for images and bundling for scripts used to be so true that some people just blindly follow them. However, the world keeps involving so time to keep our eyes open.","source":"_posts/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world.md","raw":"---\ntitle: Why you should ditch Browserify and CommonJS in the http/2 world\ndate: 2016-09-18 10:15:36\ncategories:\n- Frontend\ntags:\n- http2\n- browserify\n- javascript\n- dependency-management\n- modular-design\n- es6\n---\n\n{% alert info no-icon %}\nStop bundling in the http/2 world since it does it for you.\n{% endalert %}\n\n<!-- toc -->\n\n# Modularization is a great idea\n\nBack in the old days where there were no concept regarding frontend package management, we would lay out all the scripts in order in the html file, and hope for the best that they would somehow work together if order were right. This surely doesn't work well with huge projects, but luckily back then JavaScripts weren't so shiny anyways - UIs weren't so cool and logic was much simpler. However, things do evolve. People soon noticed that this approach wouldn't scale - cooperation across multiple teams becomes super tricky, if not impossible, and it doesn't play well with DRY either.\n\nThen people came up with a great idea of modularizing JS code (probably back in 2003?) the same way you would do for your beloved Java/C++ code libraries. And then there came the CommonJS definition concept by Kevin Dangoor back in 2009. Many people got to know this idea thanks to Node.js, and it works quite well, especially for server side code. Now you can easily use npm and build both the frontend and backend using the same tool very quickly, thanks to the JS community. Since people have the same interface for code modularization, team cooperation becomes much easier and projects gain benefit from much better encapsulation.\n\n<!-- more -->\n\n# And browserify was a great tool\n\nBrowerify is a bundling tool based on CommonJS definition by providing polyfill for `require` and `define` calls in browser. Back in the days when AMD wasn't ready, it gave people an easy way of defining your modules the same way as for other node modules and serving everything together as one giant bundle. The idea is based on the fact that browsers have concurrent http request limit, let alone now full-site https becomes popular and SSL handshaking is quite expensive. So by bundling, you cut the number of required requests and hence you get faster page loading.\n\n# However, there are a few small problems...\n\nUnlike AMD, CommonJS is synchronous and you can tell from their API design:\n\n{% codeblock AMD lang:js %}\ndefine(['foo', 'bar'], function (foo, bar) {\n    // code begins\n});\n{% endcodeblock %}\n\n{% codeblock CommonJS lang:js %}\nvar foo = require('foo');\nvar bar = require('bar');\n\n// code begins\n{% endcodeblock %}\n\nIt's easy to load AMD modules asynchronously because the actual code lives in a callback so your loader can play scatter-n-gather. For CommonJS, however, each require call would have to wait until the previous one comes back, which means the loader cannot utilize Ajax and spread the load to multiple http requests in order to speed up the loading process. The solution for browserify is to bundle everything together and hence it can just grab that reference for you in a map. However, if your code library is huge, then it means your initial page load time and above-the-fold time (time between user hits enter and the content in the current browser window stops changing) will be negatively impacted. Moreover, on demand module loading becomes impossible here while in AMD, it's pretty simple.\n\nAnother problem with browserify, which is the main reason why I don't like it, is that bundling becomes mandatory. This makes local dev environment setup and testing tricky and surprise-prone. Using browserify means if my app requires ABC in general, I still need to bundle everything together while I just want to test C. To me that's just ridiculous.\n\n# And http/2 increases the gap\n\nHttp/2 introduces multiplexing which makes CommonJS approach even more crippled. Multiplexing means now you can use one TCP connection to transfer different content from different sources (URLs) on a single host, which makes asynchronous module loading greater. But if you bundle everything together, sorry you are just ignoring all those benefits.\n\nA lot of CDNs support http/2 now, including Akamai, Cloudflare and Cloudfront, you name it. Here's a demo from cloudflare:\n\n{% asset_img comparison.gif %}\n\n(Tested in Chrome 53.0)\n\n# So what to use instead?\n\nECMA 6 is really the way to go. It consolidates the nice API design from CommonJS and the asynchronous and on-demand module loading feature from AMD. Currently, most browsers don't support it yet (as of Sep 2016). Surprisingly Microsoft leads the way this time by [allowing you to turn on this experimental feature](https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond). Regardless of that, Babel can help you turn es6 code to es5, and System.js can fill the gap as the module loader.\n\nJSPM, Babel and System.js is a good combination for the time being. Everything just works seamlessly across different scenarios - you don't need to bundle anything in dev environment while getting all the benefits in production with the same set of configuration. You have the freedom - choose to bundle your scripts for best performance for legacy browser support, or on demand, no bundling for best performance under http/2. The actual workflow configuration is out of the scope of this post. I'll write a post later to discuss this in details, including comparison with the popular bundler - webpack.\n\nHowever, if you can't switch to that for some reason, you can still keep using AMD. The major problems with AMD are:\n\n1. tedious API design (I don't see how this can be changed without a transpiler due to native JS limit)\n2. not friendly to IDE due to separation of module naming and configuration (and webpack suffers from similar issues)\n\nHttp/2 makes a lot of old \"golden rules\" no longer correct. Spriting for images and bundling for scripts used to be so true that some people just blindly follow them. However, the world keeps involving so time to keep our eyes open.","slug":"Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world","published":1,"updated":"2020-05-04T00:05:42.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi70009sxmg39ypbwto","content":"<div class=\"alert info no-icon\"><p>Stop bundling in the http/2 world since it does it for you.</p>\n</div>\n\n<!-- toc -->\n\n<h1 id=\"Modularization-is-a-great-idea\"><a href=\"#Modularization-is-a-great-idea\" class=\"headerlink\" title=\"Modularization is a great idea\"></a>Modularization is a great idea</h1><p>Back in the old days where there were no concept regarding frontend package management, we would lay out all the scripts in order in the html file, and hope for the best that they would somehow work together if order were right. This surely doesn’t work well with huge projects, but luckily back then JavaScripts weren’t so shiny anyways - UIs weren’t so cool and logic was much simpler. However, things do evolve. People soon noticed that this approach wouldn’t scale - cooperation across multiple teams becomes super tricky, if not impossible, and it doesn’t play well with DRY either.</p>\n<p>Then people came up with a great idea of modularizing JS code (probably back in 2003?) the same way you would do for your beloved Java/C++ code libraries. And then there came the CommonJS definition concept by Kevin Dangoor back in 2009. Many people got to know this idea thanks to Node.js, and it works quite well, especially for server side code. Now you can easily use npm and build both the frontend and backend using the same tool very quickly, thanks to the JS community. Since people have the same interface for code modularization, team cooperation becomes much easier and projects gain benefit from much better encapsulation.</p>\n<a id=\"more\"></a>\n\n<h1 id=\"And-browserify-was-a-great-tool\"><a href=\"#And-browserify-was-a-great-tool\" class=\"headerlink\" title=\"And browserify was a great tool\"></a>And browserify was a great tool</h1><p>Browerify is a bundling tool based on CommonJS definition by providing polyfill for <code>require</code> and <code>define</code> calls in browser. Back in the days when AMD wasn’t ready, it gave people an easy way of defining your modules the same way as for other node modules and serving everything together as one giant bundle. The idea is based on the fact that browsers have concurrent http request limit, let alone now full-site https becomes popular and SSL handshaking is quite expensive. So by bundling, you cut the number of required requests and hence you get faster page loading.</p>\n<h1 id=\"However-there-are-a-few-small-problems…\"><a href=\"#However-there-are-a-few-small-problems…\" class=\"headerlink\" title=\"However, there are a few small problems…\"></a>However, there are a few small problems…</h1><p>Unlike AMD, CommonJS is synchronous and you can tell from their API design:</p>\n<figure class=\"highlight js\"><figcaption><span>AMD</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">foo, bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code begins</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>CommonJS</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"built_in\">require</span>(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code begins</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s easy to load AMD modules asynchronously because the actual code lives in a callback so your loader can play scatter-n-gather. For CommonJS, however, each require call would have to wait until the previous one comes back, which means the loader cannot utilize Ajax and spread the load to multiple http requests in order to speed up the loading process. The solution for browserify is to bundle everything together and hence it can just grab that reference for you in a map. However, if your code library is huge, then it means your initial page load time and above-the-fold time (time between user hits enter and the content in the current browser window stops changing) will be negatively impacted. Moreover, on demand module loading becomes impossible here while in AMD, it’s pretty simple.</p>\n<p>Another problem with browserify, which is the main reason why I don’t like it, is that bundling becomes mandatory. This makes local dev environment setup and testing tricky and surprise-prone. Using browserify means if my app requires ABC in general, I still need to bundle everything together while I just want to test C. To me that’s just ridiculous.</p>\n<h1 id=\"And-http-2-increases-the-gap\"><a href=\"#And-http-2-increases-the-gap\" class=\"headerlink\" title=\"And http/2 increases the gap\"></a>And http/2 increases the gap</h1><p>Http/2 introduces multiplexing which makes CommonJS approach even more crippled. Multiplexing means now you can use one TCP connection to transfer different content from different sources (URLs) on a single host, which makes asynchronous module loading greater. But if you bundle everything together, sorry you are just ignoring all those benefits.</p>\n<p>A lot of CDNs support http/2 now, including Akamai, Cloudflare and Cloudfront, you name it. Here’s a demo from cloudflare:</p>\n<img src=\"/2016/09/18/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world/comparison.gif\">\n\n<p>(Tested in Chrome 53.0)</p>\n<h1 id=\"So-what-to-use-instead\"><a href=\"#So-what-to-use-instead\" class=\"headerlink\" title=\"So what to use instead?\"></a>So what to use instead?</h1><p>ECMA 6 is really the way to go. It consolidates the nice API design from CommonJS and the asynchronous and on-demand module loading feature from AMD. Currently, most browsers don’t support it yet (as of Sep 2016). Surprisingly Microsoft leads the way this time by <a href=\"https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond\" target=\"_blank\" rel=\"noopener\">allowing you to turn on this experimental feature</a>. Regardless of that, Babel can help you turn es6 code to es5, and System.js can fill the gap as the module loader.</p>\n<p>JSPM, Babel and System.js is a good combination for the time being. Everything just works seamlessly across different scenarios - you don’t need to bundle anything in dev environment while getting all the benefits in production with the same set of configuration. You have the freedom - choose to bundle your scripts for best performance for legacy browser support, or on demand, no bundling for best performance under http/2. The actual workflow configuration is out of the scope of this post. I’ll write a post later to discuss this in details, including comparison with the popular bundler - webpack.</p>\n<p>However, if you can’t switch to that for some reason, you can still keep using AMD. The major problems with AMD are:</p>\n<ol>\n<li>tedious API design (I don’t see how this can be changed without a transpiler due to native JS limit)</li>\n<li>not friendly to IDE due to separation of module naming and configuration (and webpack suffers from similar issues)</li>\n</ol>\n<p>Http/2 makes a lot of old “golden rules” no longer correct. Spriting for images and bundling for scripts used to be so true that some people just blindly follow them. However, the world keeps involving so time to keep our eyes open.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<div class=\"alert info no-icon\"><p>Stop bundling in the http/2 world since it does it for you.</p>\n</div>\n\n<!-- toc -->\n\n<h1 id=\"Modularization-is-a-great-idea\"><a href=\"#Modularization-is-a-great-idea\" class=\"headerlink\" title=\"Modularization is a great idea\"></a>Modularization is a great idea</h1><p>Back in the old days where there were no concept regarding frontend package management, we would lay out all the scripts in order in the html file, and hope for the best that they would somehow work together if order were right. This surely doesn’t work well with huge projects, but luckily back then JavaScripts weren’t so shiny anyways - UIs weren’t so cool and logic was much simpler. However, things do evolve. People soon noticed that this approach wouldn’t scale - cooperation across multiple teams becomes super tricky, if not impossible, and it doesn’t play well with DRY either.</p>\n<p>Then people came up with a great idea of modularizing JS code (probably back in 2003?) the same way you would do for your beloved Java/C++ code libraries. And then there came the CommonJS definition concept by Kevin Dangoor back in 2009. Many people got to know this idea thanks to Node.js, and it works quite well, especially for server side code. Now you can easily use npm and build both the frontend and backend using the same tool very quickly, thanks to the JS community. Since people have the same interface for code modularization, team cooperation becomes much easier and projects gain benefit from much better encapsulation.</p>","more":"<h1 id=\"And-browserify-was-a-great-tool\"><a href=\"#And-browserify-was-a-great-tool\" class=\"headerlink\" title=\"And browserify was a great tool\"></a>And browserify was a great tool</h1><p>Browerify is a bundling tool based on CommonJS definition by providing polyfill for <code>require</code> and <code>define</code> calls in browser. Back in the days when AMD wasn’t ready, it gave people an easy way of defining your modules the same way as for other node modules and serving everything together as one giant bundle. The idea is based on the fact that browsers have concurrent http request limit, let alone now full-site https becomes popular and SSL handshaking is quite expensive. So by bundling, you cut the number of required requests and hence you get faster page loading.</p>\n<h1 id=\"However-there-are-a-few-small-problems…\"><a href=\"#However-there-are-a-few-small-problems…\" class=\"headerlink\" title=\"However, there are a few small problems…\"></a>However, there are a few small problems…</h1><p>Unlike AMD, CommonJS is synchronous and you can tell from their API design:</p>\n<figure class=\"highlight js\"><figcaption><span>AMD</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">foo, bar</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code begins</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>CommonJS</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"built_in\">require</span>(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code begins</span></span><br></pre></td></tr></table></figure>\n\n<p>It’s easy to load AMD modules asynchronously because the actual code lives in a callback so your loader can play scatter-n-gather. For CommonJS, however, each require call would have to wait until the previous one comes back, which means the loader cannot utilize Ajax and spread the load to multiple http requests in order to speed up the loading process. The solution for browserify is to bundle everything together and hence it can just grab that reference for you in a map. However, if your code library is huge, then it means your initial page load time and above-the-fold time (time between user hits enter and the content in the current browser window stops changing) will be negatively impacted. Moreover, on demand module loading becomes impossible here while in AMD, it’s pretty simple.</p>\n<p>Another problem with browserify, which is the main reason why I don’t like it, is that bundling becomes mandatory. This makes local dev environment setup and testing tricky and surprise-prone. Using browserify means if my app requires ABC in general, I still need to bundle everything together while I just want to test C. To me that’s just ridiculous.</p>\n<h1 id=\"And-http-2-increases-the-gap\"><a href=\"#And-http-2-increases-the-gap\" class=\"headerlink\" title=\"And http/2 increases the gap\"></a>And http/2 increases the gap</h1><p>Http/2 introduces multiplexing which makes CommonJS approach even more crippled. Multiplexing means now you can use one TCP connection to transfer different content from different sources (URLs) on a single host, which makes asynchronous module loading greater. But if you bundle everything together, sorry you are just ignoring all those benefits.</p>\n<p>A lot of CDNs support http/2 now, including Akamai, Cloudflare and Cloudfront, you name it. Here’s a demo from cloudflare:</p>\n<img src=\"/2016/09/18/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world/comparison.gif\">\n\n<p>(Tested in Chrome 53.0)</p>\n<h1 id=\"So-what-to-use-instead\"><a href=\"#So-what-to-use-instead\" class=\"headerlink\" title=\"So what to use instead?\"></a>So what to use instead?</h1><p>ECMA 6 is really the way to go. It consolidates the nice API design from CommonJS and the asynchronous and on-demand module loading feature from AMD. Currently, most browsers don’t support it yet (as of Sep 2016). Surprisingly Microsoft leads the way this time by <a href=\"https://blogs.windows.com/msedgedev/2016/05/17/es6-modules-and-beyond\" target=\"_blank\" rel=\"noopener\">allowing you to turn on this experimental feature</a>. Regardless of that, Babel can help you turn es6 code to es5, and System.js can fill the gap as the module loader.</p>\n<p>JSPM, Babel and System.js is a good combination for the time being. Everything just works seamlessly across different scenarios - you don’t need to bundle anything in dev environment while getting all the benefits in production with the same set of configuration. You have the freedom - choose to bundle your scripts for best performance for legacy browser support, or on demand, no bundling for best performance under http/2. The actual workflow configuration is out of the scope of this post. I’ll write a post later to discuss this in details, including comparison with the popular bundler - webpack.</p>\n<p>However, if you can’t switch to that for some reason, you can still keep using AMD. The major problems with AMD are:</p>\n<ol>\n<li>tedious API design (I don’t see how this can be changed without a transpiler due to native JS limit)</li>\n<li>not friendly to IDE due to separation of module naming and configuration (and webpack suffers from similar issues)</li>\n</ol>\n<p>Http/2 makes a lot of old “golden rules” no longer correct. Spriting for images and bundling for scripts used to be so true that some people just blindly follow them. However, the world keeps involving so time to keep our eyes open.</p>"},{"title":"Workflow Processing Engine Overview 2018: Airflow vs Azkaban vs Conductor vs Oozie vs Amazon Step Functions","date":"2018-04-14T04:33:33.000Z","_content":"|                                 | Airflow                                | Azkaban                                         | Conductor                      | Oozie                                      | Step Functions                      |\n|:-------------------------------:|----------------------------------------|-------------------------------------------------|--------------------------------|--------------------------------------------|-------------------------------------|\n|            **Owner**            | Apache<br>(previously Airbnb)          | LinkedIn                                        | Netflix                        | Apache                                     | Amazon                              |\n|          **Community**          | Very Active                            | Somewhat active                                 | Active                         | Active                                     | N/A                                 |\n|           **History**           | 4 years                                | 7 years                                         | 1.5 years                      | 8 years                                    | 1.5 years                           |\n|         **Main Purpose**        | General Purpose Batch Processing       | Hadoop Job Scheduling                           | Microservice orchestration     | Hadoop Job Scheduling                      | General Purpose Workflow Processing |\n|       **Flow Definition**       | Python                                 | Custom DSL                                      | JSON                           | XML                                        | JSON                                |\n|   **Support for single node**   | Yes                                    | Yes                                             | Yes                            | Yes                                        | N/A                                 |\n|       **Quick demo setup**      | Yes                                    | Yes                                             | Yes                            | No                                         | N/A                                 |\n|        **Support for HA**       | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|   **Single Point of Failure**   | Yes<br>(Single scheduler)              | Yes<br>(Single web and scheduler combined node) | No                             | No                                         | No                                  |\n|     **HA Extra Requirement**    | Celery/Dask/Mesos + Load Balancer + DB | DB                                              | Load Balancer (web nodes) + DB | Load Balancer (web nodes) + DB + Zookeeper | Native                              |\n|           **Cron Job**          | Yes                                    | Yes                                             | No                             | Yes                                        | Yes                                 |\n|       **Execution Model**       | Push                                   | Push                                            | Poll                           | Poll                                       | Unknown                             |\n|       **Rest API Trigger**      | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|   **Parameterized Execution**   | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|  **Trigger by External Event**  | Yes                                    | No                                              | No                             | Yes                                        | Yes                                 |\n| **Native Waiting Task Support** | Yes                                    | No                                              | Yes (external signal required) | No                                         | Yes                                 |\n|     **Backfilling support**     | Yes                                    | No                                              | No                             | Yes                                        | No                                  |\n|  **Native Web Authentication**  | LDAP/Password                          | XML Password                                    | No                             | Kerberos                                   | N/A (AWS login)                 |\n|          **Monitoring**         | Yes                                    | Limited                                         | Limited                        | Yes                                        | Limited                             |\n|         **Scalability**         | Depending on executor setup            | Good                                            | Very Good                      | Very Good                                  | Very Good                           |\n\n## Update\n\n- *(2018.11) Oozie has Kerberos auth over SPNEGO for web (thanks to Justin Miller for pointing it out)*\n\n## Disclaimer\nI'm not an expert in any of those engines.\nI've used some of those (Airflow & Azkaban) and checked the code.\nFor some others I either only read the code (Conductor) or the docs (Oozie/AWS Step Functions).\nAs most of them are OSS projects, it's certainly possible that I might have missed certain undocumented features,\nor community-contributed plugins. I'm happy to update this if you see anything wrong.\n\nBottom line: Use your own judgement when reading this post.\n\n## Airflow\n\n### The Good\nAirflow is a super feature rich engine compared to all other solutions.\nNot only you can use plugins to support all kinds of jobs,\nranging from data processing jobs: Hive, Pig (though you can also submit them via shell command),\nto general flow management like triggering by existence of file/db entry/s3 content,\nor waiting for expected output from a web endpoint,\nbut also it provides a nice UI that allows you to check your DAGs (workflow dependencies) through code/graph,\nand monitors the real time execution of jobs.\n\nAirflow is also highly customizable with a currently vigorous community.\nYou can run all your jobs through a single node using local executor,\nor distribute them onto a group of worker nodes through Celery/Dask/Mesos orchestration.\n\n### The Bad\nAirflow by itself is still not very mature (in fact maybe Oozie is the only \"mature\" engine here).\nThe scheduler would need to periodically poll the scheduling plan and send jobs to executors.\nThis means it along would continuously dump enormous amount of logs out of the box.\nAs it works by \"ticking\", your jobs are not guaranteed to get scheduled in \"real-time\" if that makes sense\nand this would get worse as the number of concurrent jobs increases.\nMeanwhile as you have one centralized scheduler, if it goes down or gets stuck, your running jobs won't be\naffected as that the job of executors, but no new jobs will get scheduled. This is especially confusing when\nyou run this with a HA setup where you have multiple web nodes, a scheduler, a broker\n(typically a message queue in Celery case), multiple executors. When scheduler is stuck for whatever reason,\nall you see in web UI is all tasks are running, but in fact they are not actually moving forward while executors\nare happily reporting they are fine. In other words, the default monitoring is still far from bullet proof.\n\nThe web UI is very nice from the first look. However it sometimes is confusing to new users.\nWhat does it mean my DAG runs are \"running\" but my tasks have no state? The charts are not search friendly either,\nlet alone some of the features are still far from well documented\n(though the document does look nice, I mean, compared to Oozie, which does seem out-dated).\n\nThe backfilling design is good in certain cases but very error prone in others.\nIf you have a flow with cron schedules disabled and re-enabled later, it would try to play catch up,\nand if your jobs is not designed to be idempotent, shit would happen for real.\n\n## Azkaban\n\n### The Good\nOf all the engines, Azkaban is probably the easiest to get going out of the box.\nUI is very intuitive and easy to use. Scheduling and REST APIs works just fine.\n\nLimited HA setup works out of the box.\nThere's no need for load balancer because you can only have one web node.\nYou can configure how it selects executor nodes to push jobs to and it generally seems to scale pretty nicely.\nYou can easily run tens of thousands of jobs as long as you have enough capacity for the executor nodes.\n\n### The Bad\nIt is not very feature rich out of the box as a general purpose orchestration engine,\nbut likely that's not what's originally designed for. It's strength lies in native support for Hadoop/Pig/Hive,\nthough you can also achieve those using command line. But itself cannot trigger jobs through external resources like\nAirflow, nor does it support job waiting pattern. Although you can do busy waiting through java code/scripts, that\nleads to bad resource utilization.\n\nThe documentation and configuration are generally a bit confusing compared to others. It's likely that it wasn't supposed\nto be OSed at the beginning. The design is okish but you better have a big data center to run the executors as scheduling \nwould get stalled when executors run out of resources without extra monitoring stuff. The code quality overall is a bit towards\nthe lower end compared to others so it generally only scales well when resource is not a problem.\n\nThe setup/design is not cloud friendly. You are pretty much supposed to have stable bare metal rather than dynamically\nallocated virtual instances with dynamic IPs. Scheduling would go south if machines vanish.\n\nThe monitoring part is sort of acceptable through JMX (does not seem documented). But it generally doesn't work well if your\nmachines are heavily loaded, unfortunately, as the endpoints may get stuck.\n\n## Conductor\n\n### The Good\nIt's a bit unfair to put Conductor into this competition as it's real purpose is for microservice orchestration, whatever that means.\nIt's HA model involves a quorum of servers sitting behind load balancer putting tasks onto a message queue which the worker nodes would\npoll from, which means it's less likely you'll run into stalled scheduling.\nWith the help of parameterized execution through API, it's actually quite good at scheduling and scaling provided\nthat you set up your load balancer/service discovery layer properly.\n\n### The Bad\nThe UI needs a bit more love. There's currently very limited monitoring there. Although for general purpose scheduling that's probably\ngood enough.\n\nIt's pretty bare-bone out of the box. There's not even native support for running shell scripts, though it's pretty easy to implement\na task worker through python to do the job with the examples provided.\n\n## Oozie\n\n### The Good\nOozie provides a seemingly reliable HA model through the db setup (seemingly b/c I've not dug into it).\nIt provides native support for Hadoop related jobs as it was sort of built for that eco system.\n\n### The Bad\nNot a very good candidate for general purpose flow scheduling as the XML definition is quite verbose\nand cumbersome for defining light weight jobs.\n\nIt also requires quite a bit of peripheral setup. You need a zookeeper cluster, a db, a load balancer\nand each node needs to run a web app container like Tomcat. The initial setup also takes some time which is\nnot friendly to first time users to pilot stuff.\n\n## Step Functions\n\n### The Good\nStep Functions is fairly new (launch in Dec 2016). However the future seems promising. With the HA nature of cloud\nplatform and lambda functions, it almost feels like it can easily scale infinitely (compared to others).\n\nIt also offers some useful features for general purpose workflow handling like waiting support and dynamic branching\nbased on output.\n\nIt's also fairly cheap:\n\n- 4,000 state transitions are free each month\n- $0.025 per 1,000 state transitions thereafter ($0.000025 per state transition)\n\nIf you don't run tens of thousands of jobs, this might be even better than running your own cluster of things.\n\n### The Bad\nCan only be used by AWS users. Deal breaker if you are not one of them yet.\n\nLambda requires extra work for production level iteration/deployment.\n\nThere's no UI (well there is but it's really just a console).\nSo if you need any level of monitoring beyond that you need to build it using cloudwatch by yourself.\n","source":"_posts/Workflow-Processing-Engine-Overview-2018-Airflow-vs-Azkaban-vs-Conductor-vs-Oozie-vs-Amazon-Step-Functions.md","raw":"---\ntitle: \"Workflow Processing Engine Overview 2018: Airflow vs Azkaban vs Conductor vs Oozie vs Amazon Step Functions\"\ndate: 2018-04-13 21:33:33\ntags:\n    - opensource\n    - workflow\n    - aws\n    - airflow\n    - azkaban\n    - review\n---\n|                                 | Airflow                                | Azkaban                                         | Conductor                      | Oozie                                      | Step Functions                      |\n|:-------------------------------:|----------------------------------------|-------------------------------------------------|--------------------------------|--------------------------------------------|-------------------------------------|\n|            **Owner**            | Apache<br>(previously Airbnb)          | LinkedIn                                        | Netflix                        | Apache                                     | Amazon                              |\n|          **Community**          | Very Active                            | Somewhat active                                 | Active                         | Active                                     | N/A                                 |\n|           **History**           | 4 years                                | 7 years                                         | 1.5 years                      | 8 years                                    | 1.5 years                           |\n|         **Main Purpose**        | General Purpose Batch Processing       | Hadoop Job Scheduling                           | Microservice orchestration     | Hadoop Job Scheduling                      | General Purpose Workflow Processing |\n|       **Flow Definition**       | Python                                 | Custom DSL                                      | JSON                           | XML                                        | JSON                                |\n|   **Support for single node**   | Yes                                    | Yes                                             | Yes                            | Yes                                        | N/A                                 |\n|       **Quick demo setup**      | Yes                                    | Yes                                             | Yes                            | No                                         | N/A                                 |\n|        **Support for HA**       | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|   **Single Point of Failure**   | Yes<br>(Single scheduler)              | Yes<br>(Single web and scheduler combined node) | No                             | No                                         | No                                  |\n|     **HA Extra Requirement**    | Celery/Dask/Mesos + Load Balancer + DB | DB                                              | Load Balancer (web nodes) + DB | Load Balancer (web nodes) + DB + Zookeeper | Native                              |\n|           **Cron Job**          | Yes                                    | Yes                                             | No                             | Yes                                        | Yes                                 |\n|       **Execution Model**       | Push                                   | Push                                            | Poll                           | Poll                                       | Unknown                             |\n|       **Rest API Trigger**      | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|   **Parameterized Execution**   | Yes                                    | Yes                                             | Yes                            | Yes                                        | Yes                                 |\n|  **Trigger by External Event**  | Yes                                    | No                                              | No                             | Yes                                        | Yes                                 |\n| **Native Waiting Task Support** | Yes                                    | No                                              | Yes (external signal required) | No                                         | Yes                                 |\n|     **Backfilling support**     | Yes                                    | No                                              | No                             | Yes                                        | No                                  |\n|  **Native Web Authentication**  | LDAP/Password                          | XML Password                                    | No                             | Kerberos                                   | N/A (AWS login)                 |\n|          **Monitoring**         | Yes                                    | Limited                                         | Limited                        | Yes                                        | Limited                             |\n|         **Scalability**         | Depending on executor setup            | Good                                            | Very Good                      | Very Good                                  | Very Good                           |\n\n## Update\n\n- *(2018.11) Oozie has Kerberos auth over SPNEGO for web (thanks to Justin Miller for pointing it out)*\n\n## Disclaimer\nI'm not an expert in any of those engines.\nI've used some of those (Airflow & Azkaban) and checked the code.\nFor some others I either only read the code (Conductor) or the docs (Oozie/AWS Step Functions).\nAs most of them are OSS projects, it's certainly possible that I might have missed certain undocumented features,\nor community-contributed plugins. I'm happy to update this if you see anything wrong.\n\nBottom line: Use your own judgement when reading this post.\n\n## Airflow\n\n### The Good\nAirflow is a super feature rich engine compared to all other solutions.\nNot only you can use plugins to support all kinds of jobs,\nranging from data processing jobs: Hive, Pig (though you can also submit them via shell command),\nto general flow management like triggering by existence of file/db entry/s3 content,\nor waiting for expected output from a web endpoint,\nbut also it provides a nice UI that allows you to check your DAGs (workflow dependencies) through code/graph,\nand monitors the real time execution of jobs.\n\nAirflow is also highly customizable with a currently vigorous community.\nYou can run all your jobs through a single node using local executor,\nor distribute them onto a group of worker nodes through Celery/Dask/Mesos orchestration.\n\n### The Bad\nAirflow by itself is still not very mature (in fact maybe Oozie is the only \"mature\" engine here).\nThe scheduler would need to periodically poll the scheduling plan and send jobs to executors.\nThis means it along would continuously dump enormous amount of logs out of the box.\nAs it works by \"ticking\", your jobs are not guaranteed to get scheduled in \"real-time\" if that makes sense\nand this would get worse as the number of concurrent jobs increases.\nMeanwhile as you have one centralized scheduler, if it goes down or gets stuck, your running jobs won't be\naffected as that the job of executors, but no new jobs will get scheduled. This is especially confusing when\nyou run this with a HA setup where you have multiple web nodes, a scheduler, a broker\n(typically a message queue in Celery case), multiple executors. When scheduler is stuck for whatever reason,\nall you see in web UI is all tasks are running, but in fact they are not actually moving forward while executors\nare happily reporting they are fine. In other words, the default monitoring is still far from bullet proof.\n\nThe web UI is very nice from the first look. However it sometimes is confusing to new users.\nWhat does it mean my DAG runs are \"running\" but my tasks have no state? The charts are not search friendly either,\nlet alone some of the features are still far from well documented\n(though the document does look nice, I mean, compared to Oozie, which does seem out-dated).\n\nThe backfilling design is good in certain cases but very error prone in others.\nIf you have a flow with cron schedules disabled and re-enabled later, it would try to play catch up,\nand if your jobs is not designed to be idempotent, shit would happen for real.\n\n## Azkaban\n\n### The Good\nOf all the engines, Azkaban is probably the easiest to get going out of the box.\nUI is very intuitive and easy to use. Scheduling and REST APIs works just fine.\n\nLimited HA setup works out of the box.\nThere's no need for load balancer because you can only have one web node.\nYou can configure how it selects executor nodes to push jobs to and it generally seems to scale pretty nicely.\nYou can easily run tens of thousands of jobs as long as you have enough capacity for the executor nodes.\n\n### The Bad\nIt is not very feature rich out of the box as a general purpose orchestration engine,\nbut likely that's not what's originally designed for. It's strength lies in native support for Hadoop/Pig/Hive,\nthough you can also achieve those using command line. But itself cannot trigger jobs through external resources like\nAirflow, nor does it support job waiting pattern. Although you can do busy waiting through java code/scripts, that\nleads to bad resource utilization.\n\nThe documentation and configuration are generally a bit confusing compared to others. It's likely that it wasn't supposed\nto be OSed at the beginning. The design is okish but you better have a big data center to run the executors as scheduling \nwould get stalled when executors run out of resources without extra monitoring stuff. The code quality overall is a bit towards\nthe lower end compared to others so it generally only scales well when resource is not a problem.\n\nThe setup/design is not cloud friendly. You are pretty much supposed to have stable bare metal rather than dynamically\nallocated virtual instances with dynamic IPs. Scheduling would go south if machines vanish.\n\nThe monitoring part is sort of acceptable through JMX (does not seem documented). But it generally doesn't work well if your\nmachines are heavily loaded, unfortunately, as the endpoints may get stuck.\n\n## Conductor\n\n### The Good\nIt's a bit unfair to put Conductor into this competition as it's real purpose is for microservice orchestration, whatever that means.\nIt's HA model involves a quorum of servers sitting behind load balancer putting tasks onto a message queue which the worker nodes would\npoll from, which means it's less likely you'll run into stalled scheduling.\nWith the help of parameterized execution through API, it's actually quite good at scheduling and scaling provided\nthat you set up your load balancer/service discovery layer properly.\n\n### The Bad\nThe UI needs a bit more love. There's currently very limited monitoring there. Although for general purpose scheduling that's probably\ngood enough.\n\nIt's pretty bare-bone out of the box. There's not even native support for running shell scripts, though it's pretty easy to implement\na task worker through python to do the job with the examples provided.\n\n## Oozie\n\n### The Good\nOozie provides a seemingly reliable HA model through the db setup (seemingly b/c I've not dug into it).\nIt provides native support for Hadoop related jobs as it was sort of built for that eco system.\n\n### The Bad\nNot a very good candidate for general purpose flow scheduling as the XML definition is quite verbose\nand cumbersome for defining light weight jobs.\n\nIt also requires quite a bit of peripheral setup. You need a zookeeper cluster, a db, a load balancer\nand each node needs to run a web app container like Tomcat. The initial setup also takes some time which is\nnot friendly to first time users to pilot stuff.\n\n## Step Functions\n\n### The Good\nStep Functions is fairly new (launch in Dec 2016). However the future seems promising. With the HA nature of cloud\nplatform and lambda functions, it almost feels like it can easily scale infinitely (compared to others).\n\nIt also offers some useful features for general purpose workflow handling like waiting support and dynamic branching\nbased on output.\n\nIt's also fairly cheap:\n\n- 4,000 state transitions are free each month\n- $0.025 per 1,000 state transitions thereafter ($0.000025 per state transition)\n\nIf you don't run tens of thousands of jobs, this might be even better than running your own cluster of things.\n\n### The Bad\nCan only be used by AWS users. Deal breaker if you are not one of them yet.\n\nLambda requires extra work for production level iteration/deployment.\n\nThere's no UI (well there is but it's really just a console).\nSo if you need any level of monitoring beyond that you need to build it using cloudwatch by yourself.\n","slug":"Workflow-Processing-Engine-Overview-2018-Airflow-vs-Azkaban-vs-Conductor-vs-Oozie-vs-Amazon-Step-Functions","published":1,"updated":"2020-05-04T00:05:42.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi8000asxmg4ipkcimd","content":"<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>Airflow</th>\n<th>Azkaban</th>\n<th>Conductor</th>\n<th>Oozie</th>\n<th>Step Functions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>Owner</strong></td>\n<td>Apache<br>(previously Airbnb)</td>\n<td>LinkedIn</td>\n<td>Netflix</td>\n<td>Apache</td>\n<td>Amazon</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Community</strong></td>\n<td>Very Active</td>\n<td>Somewhat active</td>\n<td>Active</td>\n<td>Active</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>History</strong></td>\n<td>4 years</td>\n<td>7 years</td>\n<td>1.5 years</td>\n<td>8 years</td>\n<td>1.5 years</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Main Purpose</strong></td>\n<td>General Purpose Batch Processing</td>\n<td>Hadoop Job Scheduling</td>\n<td>Microservice orchestration</td>\n<td>Hadoop Job Scheduling</td>\n<td>General Purpose Workflow Processing</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Flow Definition</strong></td>\n<td>Python</td>\n<td>Custom DSL</td>\n<td>JSON</td>\n<td>XML</td>\n<td>JSON</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Support for single node</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Quick demo setup</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Support for HA</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Single Point of Failure</strong></td>\n<td>Yes<br>(Single scheduler)</td>\n<td>Yes<br>(Single web and scheduler combined node)</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>HA Extra Requirement</strong></td>\n<td>Celery/Dask/Mesos + Load Balancer + DB</td>\n<td>DB</td>\n<td>Load Balancer (web nodes) + DB</td>\n<td>Load Balancer (web nodes) + DB + Zookeeper</td>\n<td>Native</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Cron Job</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Execution Model</strong></td>\n<td>Push</td>\n<td>Push</td>\n<td>Poll</td>\n<td>Poll</td>\n<td>Unknown</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Rest API Trigger</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Parameterized Execution</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Trigger by External Event</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Native Waiting Task Support</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes (external signal required)</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Backfilling support</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Native Web Authentication</strong></td>\n<td>LDAP/Password</td>\n<td>XML Password</td>\n<td>No</td>\n<td>Kerberos</td>\n<td>N/A (AWS login)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Monitoring</strong></td>\n<td>Yes</td>\n<td>Limited</td>\n<td>Limited</td>\n<td>Yes</td>\n<td>Limited</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Scalability</strong></td>\n<td>Depending on executor setup</td>\n<td>Good</td>\n<td>Very Good</td>\n<td>Very Good</td>\n<td>Very Good</td>\n</tr>\n</tbody></table>\n<h2 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h2><ul>\n<li><em>(2018.11) Oozie has Kerberos auth over SPNEGO for web (thanks to Justin Miller for pointing it out)</em></li>\n</ul>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>I’m not an expert in any of those engines.\nI’ve used some of those (Airflow &amp; Azkaban) and checked the code.\nFor some others I either only read the code (Conductor) or the docs (Oozie/AWS Step Functions).\nAs most of them are OSS projects, it’s certainly possible that I might have missed certain undocumented features,\nor community-contributed plugins. I’m happy to update this if you see anything wrong.</p>\n<p>Bottom line: Use your own judgement when reading this post.</p>\n<h2 id=\"Airflow\"><a href=\"#Airflow\" class=\"headerlink\" title=\"Airflow\"></a>Airflow</h2><h3 id=\"The-Good\"><a href=\"#The-Good\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Airflow is a super feature rich engine compared to all other solutions.\nNot only you can use plugins to support all kinds of jobs,\nranging from data processing jobs: Hive, Pig (though you can also submit them via shell command),\nto general flow management like triggering by existence of file/db entry/s3 content,\nor waiting for expected output from a web endpoint,\nbut also it provides a nice UI that allows you to check your DAGs (workflow dependencies) through code/graph,\nand monitors the real time execution of jobs.</p>\n<p>Airflow is also highly customizable with a currently vigorous community.\nYou can run all your jobs through a single node using local executor,\nor distribute them onto a group of worker nodes through Celery/Dask/Mesos orchestration.</p>\n<h3 id=\"The-Bad\"><a href=\"#The-Bad\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Airflow by itself is still not very mature (in fact maybe Oozie is the only “mature” engine here).\nThe scheduler would need to periodically poll the scheduling plan and send jobs to executors.\nThis means it along would continuously dump enormous amount of logs out of the box.\nAs it works by “ticking”, your jobs are not guaranteed to get scheduled in “real-time” if that makes sense\nand this would get worse as the number of concurrent jobs increases.\nMeanwhile as you have one centralized scheduler, if it goes down or gets stuck, your running jobs won’t be\naffected as that the job of executors, but no new jobs will get scheduled. This is especially confusing when\nyou run this with a HA setup where you have multiple web nodes, a scheduler, a broker\n(typically a message queue in Celery case), multiple executors. When scheduler is stuck for whatever reason,\nall you see in web UI is all tasks are running, but in fact they are not actually moving forward while executors\nare happily reporting they are fine. In other words, the default monitoring is still far from bullet proof.</p>\n<p>The web UI is very nice from the first look. However it sometimes is confusing to new users.\nWhat does it mean my DAG runs are “running” but my tasks have no state? The charts are not search friendly either,\nlet alone some of the features are still far from well documented\n(though the document does look nice, I mean, compared to Oozie, which does seem out-dated).</p>\n<p>The backfilling design is good in certain cases but very error prone in others.\nIf you have a flow with cron schedules disabled and re-enabled later, it would try to play catch up,\nand if your jobs is not designed to be idempotent, shit would happen for real.</p>\n<h2 id=\"Azkaban\"><a href=\"#Azkaban\" class=\"headerlink\" title=\"Azkaban\"></a>Azkaban</h2><h3 id=\"The-Good-1\"><a href=\"#The-Good-1\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Of all the engines, Azkaban is probably the easiest to get going out of the box.\nUI is very intuitive and easy to use. Scheduling and REST APIs works just fine.</p>\n<p>Limited HA setup works out of the box.\nThere’s no need for load balancer because you can only have one web node.\nYou can configure how it selects executor nodes to push jobs to and it generally seems to scale pretty nicely.\nYou can easily run tens of thousands of jobs as long as you have enough capacity for the executor nodes.</p>\n<h3 id=\"The-Bad-1\"><a href=\"#The-Bad-1\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>It is not very feature rich out of the box as a general purpose orchestration engine,\nbut likely that’s not what’s originally designed for. It’s strength lies in native support for Hadoop/Pig/Hive,\nthough you can also achieve those using command line. But itself cannot trigger jobs through external resources like\nAirflow, nor does it support job waiting pattern. Although you can do busy waiting through java code/scripts, that\nleads to bad resource utilization.</p>\n<p>The documentation and configuration are generally a bit confusing compared to others. It’s likely that it wasn’t supposed\nto be OSed at the beginning. The design is okish but you better have a big data center to run the executors as scheduling \nwould get stalled when executors run out of resources without extra monitoring stuff. The code quality overall is a bit towards\nthe lower end compared to others so it generally only scales well when resource is not a problem.</p>\n<p>The setup/design is not cloud friendly. You are pretty much supposed to have stable bare metal rather than dynamically\nallocated virtual instances with dynamic IPs. Scheduling would go south if machines vanish.</p>\n<p>The monitoring part is sort of acceptable through JMX (does not seem documented). But it generally doesn’t work well if your\nmachines are heavily loaded, unfortunately, as the endpoints may get stuck.</p>\n<h2 id=\"Conductor\"><a href=\"#Conductor\" class=\"headerlink\" title=\"Conductor\"></a>Conductor</h2><h3 id=\"The-Good-2\"><a href=\"#The-Good-2\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>It’s a bit unfair to put Conductor into this competition as it’s real purpose is for microservice orchestration, whatever that means.\nIt’s HA model involves a quorum of servers sitting behind load balancer putting tasks onto a message queue which the worker nodes would\npoll from, which means it’s less likely you’ll run into stalled scheduling.\nWith the help of parameterized execution through API, it’s actually quite good at scheduling and scaling provided\nthat you set up your load balancer/service discovery layer properly.</p>\n<h3 id=\"The-Bad-2\"><a href=\"#The-Bad-2\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>The UI needs a bit more love. There’s currently very limited monitoring there. Although for general purpose scheduling that’s probably\ngood enough.</p>\n<p>It’s pretty bare-bone out of the box. There’s not even native support for running shell scripts, though it’s pretty easy to implement\na task worker through python to do the job with the examples provided.</p>\n<h2 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h2><h3 id=\"The-Good-3\"><a href=\"#The-Good-3\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Oozie provides a seemingly reliable HA model through the db setup (seemingly b/c I’ve not dug into it).\nIt provides native support for Hadoop related jobs as it was sort of built for that eco system.</p>\n<h3 id=\"The-Bad-3\"><a href=\"#The-Bad-3\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Not a very good candidate for general purpose flow scheduling as the XML definition is quite verbose\nand cumbersome for defining light weight jobs.</p>\n<p>It also requires quite a bit of peripheral setup. You need a zookeeper cluster, a db, a load balancer\nand each node needs to run a web app container like Tomcat. The initial setup also takes some time which is\nnot friendly to first time users to pilot stuff.</p>\n<h2 id=\"Step-Functions\"><a href=\"#Step-Functions\" class=\"headerlink\" title=\"Step Functions\"></a>Step Functions</h2><h3 id=\"The-Good-4\"><a href=\"#The-Good-4\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Step Functions is fairly new (launch in Dec 2016). However the future seems promising. With the HA nature of cloud\nplatform and lambda functions, it almost feels like it can easily scale infinitely (compared to others).</p>\n<p>It also offers some useful features for general purpose workflow handling like waiting support and dynamic branching\nbased on output.</p>\n<p>It’s also fairly cheap:</p>\n<ul>\n<li>4,000 state transitions are free each month</li>\n<li>$0.025 per 1,000 state transitions thereafter ($0.000025 per state transition)</li>\n</ul>\n<p>If you don’t run tens of thousands of jobs, this might be even better than running your own cluster of things.</p>\n<h3 id=\"The-Bad-4\"><a href=\"#The-Bad-4\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Can only be used by AWS users. Deal breaker if you are not one of them yet.</p>\n<p>Lambda requires extra work for production level iteration/deployment.</p>\n<p>There’s no UI (well there is but it’s really just a console).\nSo if you need any level of monitoring beyond that you need to build it using cloudwatch by yourself.</p>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th>Airflow</th>\n<th>Azkaban</th>\n<th>Conductor</th>\n<th>Oozie</th>\n<th>Step Functions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>Owner</strong></td>\n<td>Apache<br>(previously Airbnb)</td>\n<td>LinkedIn</td>\n<td>Netflix</td>\n<td>Apache</td>\n<td>Amazon</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Community</strong></td>\n<td>Very Active</td>\n<td>Somewhat active</td>\n<td>Active</td>\n<td>Active</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>History</strong></td>\n<td>4 years</td>\n<td>7 years</td>\n<td>1.5 years</td>\n<td>8 years</td>\n<td>1.5 years</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Main Purpose</strong></td>\n<td>General Purpose Batch Processing</td>\n<td>Hadoop Job Scheduling</td>\n<td>Microservice orchestration</td>\n<td>Hadoop Job Scheduling</td>\n<td>General Purpose Workflow Processing</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Flow Definition</strong></td>\n<td>Python</td>\n<td>Custom DSL</td>\n<td>JSON</td>\n<td>XML</td>\n<td>JSON</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Support for single node</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Quick demo setup</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Support for HA</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Single Point of Failure</strong></td>\n<td>Yes<br>(Single scheduler)</td>\n<td>Yes<br>(Single web and scheduler combined node)</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>HA Extra Requirement</strong></td>\n<td>Celery/Dask/Mesos + Load Balancer + DB</td>\n<td>DB</td>\n<td>Load Balancer (web nodes) + DB</td>\n<td>Load Balancer (web nodes) + DB + Zookeeper</td>\n<td>Native</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Cron Job</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Execution Model</strong></td>\n<td>Push</td>\n<td>Push</td>\n<td>Poll</td>\n<td>Poll</td>\n<td>Unknown</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Rest API Trigger</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Parameterized Execution</strong></td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Trigger by External Event</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Native Waiting Task Support</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>Yes (external signal required)</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Backfilling support</strong></td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Native Web Authentication</strong></td>\n<td>LDAP/Password</td>\n<td>XML Password</td>\n<td>No</td>\n<td>Kerberos</td>\n<td>N/A (AWS login)</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Monitoring</strong></td>\n<td>Yes</td>\n<td>Limited</td>\n<td>Limited</td>\n<td>Yes</td>\n<td>Limited</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>Scalability</strong></td>\n<td>Depending on executor setup</td>\n<td>Good</td>\n<td>Very Good</td>\n<td>Very Good</td>\n<td>Very Good</td>\n</tr>\n</tbody></table>\n<h2 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h2><ul>\n<li><em>(2018.11) Oozie has Kerberos auth over SPNEGO for web (thanks to Justin Miller for pointing it out)</em></li>\n</ul>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>I’m not an expert in any of those engines.\nI’ve used some of those (Airflow &amp; Azkaban) and checked the code.\nFor some others I either only read the code (Conductor) or the docs (Oozie/AWS Step Functions).\nAs most of them are OSS projects, it’s certainly possible that I might have missed certain undocumented features,\nor community-contributed plugins. I’m happy to update this if you see anything wrong.</p>\n<p>Bottom line: Use your own judgement when reading this post.</p>\n<h2 id=\"Airflow\"><a href=\"#Airflow\" class=\"headerlink\" title=\"Airflow\"></a>Airflow</h2><h3 id=\"The-Good\"><a href=\"#The-Good\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Airflow is a super feature rich engine compared to all other solutions.\nNot only you can use plugins to support all kinds of jobs,\nranging from data processing jobs: Hive, Pig (though you can also submit them via shell command),\nto general flow management like triggering by existence of file/db entry/s3 content,\nor waiting for expected output from a web endpoint,\nbut also it provides a nice UI that allows you to check your DAGs (workflow dependencies) through code/graph,\nand monitors the real time execution of jobs.</p>\n<p>Airflow is also highly customizable with a currently vigorous community.\nYou can run all your jobs through a single node using local executor,\nor distribute them onto a group of worker nodes through Celery/Dask/Mesos orchestration.</p>\n<h3 id=\"The-Bad\"><a href=\"#The-Bad\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Airflow by itself is still not very mature (in fact maybe Oozie is the only “mature” engine here).\nThe scheduler would need to periodically poll the scheduling plan and send jobs to executors.\nThis means it along would continuously dump enormous amount of logs out of the box.\nAs it works by “ticking”, your jobs are not guaranteed to get scheduled in “real-time” if that makes sense\nand this would get worse as the number of concurrent jobs increases.\nMeanwhile as you have one centralized scheduler, if it goes down or gets stuck, your running jobs won’t be\naffected as that the job of executors, but no new jobs will get scheduled. This is especially confusing when\nyou run this with a HA setup where you have multiple web nodes, a scheduler, a broker\n(typically a message queue in Celery case), multiple executors. When scheduler is stuck for whatever reason,\nall you see in web UI is all tasks are running, but in fact they are not actually moving forward while executors\nare happily reporting they are fine. In other words, the default monitoring is still far from bullet proof.</p>\n<p>The web UI is very nice from the first look. However it sometimes is confusing to new users.\nWhat does it mean my DAG runs are “running” but my tasks have no state? The charts are not search friendly either,\nlet alone some of the features are still far from well documented\n(though the document does look nice, I mean, compared to Oozie, which does seem out-dated).</p>\n<p>The backfilling design is good in certain cases but very error prone in others.\nIf you have a flow with cron schedules disabled and re-enabled later, it would try to play catch up,\nand if your jobs is not designed to be idempotent, shit would happen for real.</p>\n<h2 id=\"Azkaban\"><a href=\"#Azkaban\" class=\"headerlink\" title=\"Azkaban\"></a>Azkaban</h2><h3 id=\"The-Good-1\"><a href=\"#The-Good-1\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Of all the engines, Azkaban is probably the easiest to get going out of the box.\nUI is very intuitive and easy to use. Scheduling and REST APIs works just fine.</p>\n<p>Limited HA setup works out of the box.\nThere’s no need for load balancer because you can only have one web node.\nYou can configure how it selects executor nodes to push jobs to and it generally seems to scale pretty nicely.\nYou can easily run tens of thousands of jobs as long as you have enough capacity for the executor nodes.</p>\n<h3 id=\"The-Bad-1\"><a href=\"#The-Bad-1\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>It is not very feature rich out of the box as a general purpose orchestration engine,\nbut likely that’s not what’s originally designed for. It’s strength lies in native support for Hadoop/Pig/Hive,\nthough you can also achieve those using command line. But itself cannot trigger jobs through external resources like\nAirflow, nor does it support job waiting pattern. Although you can do busy waiting through java code/scripts, that\nleads to bad resource utilization.</p>\n<p>The documentation and configuration are generally a bit confusing compared to others. It’s likely that it wasn’t supposed\nto be OSed at the beginning. The design is okish but you better have a big data center to run the executors as scheduling \nwould get stalled when executors run out of resources without extra monitoring stuff. The code quality overall is a bit towards\nthe lower end compared to others so it generally only scales well when resource is not a problem.</p>\n<p>The setup/design is not cloud friendly. You are pretty much supposed to have stable bare metal rather than dynamically\nallocated virtual instances with dynamic IPs. Scheduling would go south if machines vanish.</p>\n<p>The monitoring part is sort of acceptable through JMX (does not seem documented). But it generally doesn’t work well if your\nmachines are heavily loaded, unfortunately, as the endpoints may get stuck.</p>\n<h2 id=\"Conductor\"><a href=\"#Conductor\" class=\"headerlink\" title=\"Conductor\"></a>Conductor</h2><h3 id=\"The-Good-2\"><a href=\"#The-Good-2\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>It’s a bit unfair to put Conductor into this competition as it’s real purpose is for microservice orchestration, whatever that means.\nIt’s HA model involves a quorum of servers sitting behind load balancer putting tasks onto a message queue which the worker nodes would\npoll from, which means it’s less likely you’ll run into stalled scheduling.\nWith the help of parameterized execution through API, it’s actually quite good at scheduling and scaling provided\nthat you set up your load balancer/service discovery layer properly.</p>\n<h3 id=\"The-Bad-2\"><a href=\"#The-Bad-2\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>The UI needs a bit more love. There’s currently very limited monitoring there. Although for general purpose scheduling that’s probably\ngood enough.</p>\n<p>It’s pretty bare-bone out of the box. There’s not even native support for running shell scripts, though it’s pretty easy to implement\na task worker through python to do the job with the examples provided.</p>\n<h2 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h2><h3 id=\"The-Good-3\"><a href=\"#The-Good-3\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Oozie provides a seemingly reliable HA model through the db setup (seemingly b/c I’ve not dug into it).\nIt provides native support for Hadoop related jobs as it was sort of built for that eco system.</p>\n<h3 id=\"The-Bad-3\"><a href=\"#The-Bad-3\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Not a very good candidate for general purpose flow scheduling as the XML definition is quite verbose\nand cumbersome for defining light weight jobs.</p>\n<p>It also requires quite a bit of peripheral setup. You need a zookeeper cluster, a db, a load balancer\nand each node needs to run a web app container like Tomcat. The initial setup also takes some time which is\nnot friendly to first time users to pilot stuff.</p>\n<h2 id=\"Step-Functions\"><a href=\"#Step-Functions\" class=\"headerlink\" title=\"Step Functions\"></a>Step Functions</h2><h3 id=\"The-Good-4\"><a href=\"#The-Good-4\" class=\"headerlink\" title=\"The Good\"></a>The Good</h3><p>Step Functions is fairly new (launch in Dec 2016). However the future seems promising. With the HA nature of cloud\nplatform and lambda functions, it almost feels like it can easily scale infinitely (compared to others).</p>\n<p>It also offers some useful features for general purpose workflow handling like waiting support and dynamic branching\nbased on output.</p>\n<p>It’s also fairly cheap:</p>\n<ul>\n<li>4,000 state transitions are free each month</li>\n<li>$0.025 per 1,000 state transitions thereafter ($0.000025 per state transition)</li>\n</ul>\n<p>If you don’t run tens of thousands of jobs, this might be even better than running your own cluster of things.</p>\n<h3 id=\"The-Bad-4\"><a href=\"#The-Bad-4\" class=\"headerlink\" title=\"The Bad\"></a>The Bad</h3><p>Can only be used by AWS users. Deal breaker if you are not one of them yet.</p>\n<p>Lambda requires extra work for production level iteration/deployment.</p>\n<p>There’s no UI (well there is but it’s really just a console).\nSo if you need any level of monitoring beyond that you need to build it using cloudwatch by yourself.</p>\n"},{"title":"Get Started with Hexo Blogging System","date":"2016-08-14T21:32:53.000Z","_content":"\n# You should read this if\n\n- You want to set up a personal blog\n- You know what [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) is\n- You don't want to set up a heavy Wordpress environment\n- You don't want to set up any database just for the blog\n- You either don't have a VPS or want to host blog content in some easy-to-reach place.\n- You still want a template/theme system.\n\n# Solution\n\nGithub Pages + Hexo (what this site uses)\n\n<!-- more -->\n\n# What is Hexo\n\n\"[Hexo](https://hexo.io/docs/index.html) is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.\"\n\nIn other words, Hexo is a **static** blogging system. This means there is no need for database, node/php code to maintain like Wordpress or other dynamic blogging systems require. Awesome.\n\n# How on earth do things work\n\n- You write posts using Markdown language and preview them locally\n- Hexo generates the static htmls locally\n- You commit all static assets to Github\n- All content will be public via Github IO\n    - When you hit path that ends with /, Github will attempt to read index.html under that directory, i.e. for /foo/, the corresponding file is /foo/index.html\n    - For URLs don't end with / (except root), Github will try to read the corresponding file, i.e. for /foo, if file foo doesn't exist, 404 will be returned.\n    - Generally, Hexo's path layout should be fine but if you use certain themes (like the default landscape), you might need to fix the URLs manually if they don't end with / while they should.\n\n# What this solution cannot do\n\nYou can think of Hexo as a lightweight templating system so most dynamic features that Wordpress offer don't exist, including searching (provided by simple google search instead), comment system (you can use Disqus instead), dynamic widgets like top posts, permalink backend forwarding and so on.\n\nHowever, do you really need these?\n\n# Get started\n\nIf you've read this far, chances are you want to give it a try. Here are the steps:\n\n1. Install node (required by Hexo): https://nodejs.org/en/download/\n\n2. Install Hexo\n\n        npm install -g hexo-cli\n        \n        // this downloads the starter pack and sets up node modules under the directory <name> for you so it may take a while\n        hexo init <name>\n\n3. Open `<name>/_config.yml` and there may be a few things you want to set such as the name and author. The most important things are the `url` and `root`. The details can be found [here](https://hexo.io/docs/configuration.html)\n\n4. By default Hexo will generate the Hello world post for you. You can preview it by starting the local server:\n\n         hexo server\n\n5. Generate actual assets:\n\n         hexo generate\n\n6. Set up Github page repo: https://pages.github.com/\n\nDepending on if you have a VPS, things maybe a bit different. Follow 7a if you do and 7b if not. The major difference is the directory structure in the repo.\n\n7a-1. Hexo by default publishes all static assets to `public`. However, Github by default expects stuff to be under root. That means, with this setup, the repo needs to be rooted at `public`:\n\n        cd public\n        git init\n        git remote add origin <repo url>\n        git pull\n\n7a-2. Commit all assets:\n\n        git add --all\n        git commit -m \"...\"\n        git push\n\n7a-3. If you have a custom domain, set CNAME pointed to your.github.io and remember to disable https enforcement in Github (since SSL will verify host name). Also don't forget to set the custom url in Github.\n\n---\n\n\n7b-1. If you have a VPS then you can commit all the files and just use github as the storage area since you can do backend url forwarding.\n\n{% codeblock nginx.conf lang:nginx %}\nserver {\n    listen       80;\n    server_name  xcorpion.tech;\n\n    location / {\n        proxy_set_header Host xcorpion.tech;\n        proxy_pass http://your.github.io/public/;\n    }\n}\n{% endcodeblock %}\n\n7b-2. If you have a custom domain, set A record pointed to your server IP and similarily, remember to turn off https enforcement. Also don't forget to set the custom url in Github.\n\n# And that's it! Let's start writing!\n\n- In your hexo root directory, start a new post:\n\n        hexo new post\n\n- Preview your post with\n\n        hexo server\n\n- In preview mode, Hexo will watch your files and automatically update the html. However, it **will not** publish any static assets (those eventually shown in your site). So run this to let hexo do it:\n\n        hexo generate\n\n- Then commit the changes to your repo (You can automate this with a shell script.)\n","source":"_posts/get-started-with-hexo-blogging-system.md","raw":"---\ntitle: Get Started with Hexo Blogging System\ndate: 2016-08-14 14:32:53\ncategories:\n- Hexo\ntags:\n- blog\n- hexo\n---\n\n# You should read this if\n\n- You want to set up a personal blog\n- You know what [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) is\n- You don't want to set up a heavy Wordpress environment\n- You don't want to set up any database just for the blog\n- You either don't have a VPS or want to host blog content in some easy-to-reach place.\n- You still want a template/theme system.\n\n# Solution\n\nGithub Pages + Hexo (what this site uses)\n\n<!-- more -->\n\n# What is Hexo\n\n\"[Hexo](https://hexo.io/docs/index.html) is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.\"\n\nIn other words, Hexo is a **static** blogging system. This means there is no need for database, node/php code to maintain like Wordpress or other dynamic blogging systems require. Awesome.\n\n# How on earth do things work\n\n- You write posts using Markdown language and preview them locally\n- Hexo generates the static htmls locally\n- You commit all static assets to Github\n- All content will be public via Github IO\n    - When you hit path that ends with /, Github will attempt to read index.html under that directory, i.e. for /foo/, the corresponding file is /foo/index.html\n    - For URLs don't end with / (except root), Github will try to read the corresponding file, i.e. for /foo, if file foo doesn't exist, 404 will be returned.\n    - Generally, Hexo's path layout should be fine but if you use certain themes (like the default landscape), you might need to fix the URLs manually if they don't end with / while they should.\n\n# What this solution cannot do\n\nYou can think of Hexo as a lightweight templating system so most dynamic features that Wordpress offer don't exist, including searching (provided by simple google search instead), comment system (you can use Disqus instead), dynamic widgets like top posts, permalink backend forwarding and so on.\n\nHowever, do you really need these?\n\n# Get started\n\nIf you've read this far, chances are you want to give it a try. Here are the steps:\n\n1. Install node (required by Hexo): https://nodejs.org/en/download/\n\n2. Install Hexo\n\n        npm install -g hexo-cli\n        \n        // this downloads the starter pack and sets up node modules under the directory <name> for you so it may take a while\n        hexo init <name>\n\n3. Open `<name>/_config.yml` and there may be a few things you want to set such as the name and author. The most important things are the `url` and `root`. The details can be found [here](https://hexo.io/docs/configuration.html)\n\n4. By default Hexo will generate the Hello world post for you. You can preview it by starting the local server:\n\n         hexo server\n\n5. Generate actual assets:\n\n         hexo generate\n\n6. Set up Github page repo: https://pages.github.com/\n\nDepending on if you have a VPS, things maybe a bit different. Follow 7a if you do and 7b if not. The major difference is the directory structure in the repo.\n\n7a-1. Hexo by default publishes all static assets to `public`. However, Github by default expects stuff to be under root. That means, with this setup, the repo needs to be rooted at `public`:\n\n        cd public\n        git init\n        git remote add origin <repo url>\n        git pull\n\n7a-2. Commit all assets:\n\n        git add --all\n        git commit -m \"...\"\n        git push\n\n7a-3. If you have a custom domain, set CNAME pointed to your.github.io and remember to disable https enforcement in Github (since SSL will verify host name). Also don't forget to set the custom url in Github.\n\n---\n\n\n7b-1. If you have a VPS then you can commit all the files and just use github as the storage area since you can do backend url forwarding.\n\n{% codeblock nginx.conf lang:nginx %}\nserver {\n    listen       80;\n    server_name  xcorpion.tech;\n\n    location / {\n        proxy_set_header Host xcorpion.tech;\n        proxy_pass http://your.github.io/public/;\n    }\n}\n{% endcodeblock %}\n\n7b-2. If you have a custom domain, set A record pointed to your server IP and similarily, remember to turn off https enforcement. Also don't forget to set the custom url in Github.\n\n# And that's it! Let's start writing!\n\n- In your hexo root directory, start a new post:\n\n        hexo new post\n\n- Preview your post with\n\n        hexo server\n\n- In preview mode, Hexo will watch your files and automatically update the html. However, it **will not** publish any static assets (those eventually shown in your site). So run this to let hexo do it:\n\n        hexo generate\n\n- Then commit the changes to your repo (You can automate this with a shell script.)\n","slug":"get-started-with-hexo-blogging-system","published":1,"updated":"2020-05-04T00:05:42.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi9000bsxmgjzaoi83j","content":"<h1 id=\"You-should-read-this-if\"><a href=\"#You-should-read-this-if\" class=\"headerlink\" title=\"You should read this if\"></a>You should read this if</h1><ul>\n<li>You want to set up a personal blog</li>\n<li>You know what <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\" rel=\"noopener\">Markdown</a> is</li>\n<li>You don’t want to set up a heavy Wordpress environment</li>\n<li>You don’t want to set up any database just for the blog</li>\n<li>You either don’t have a VPS or want to host blog content in some easy-to-reach place.</li>\n<li>You still want a template/theme system.</li>\n</ul>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>Github Pages + Hexo (what this site uses)</p>\n<a id=\"more\"></a>\n\n<h1 id=\"What-is-Hexo\"><a href=\"#What-is-Hexo\" class=\"headerlink\" title=\"What is Hexo\"></a>What is Hexo</h1><p>“<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.”</p>\n<p>In other words, Hexo is a <strong>static</strong> blogging system. This means there is no need for database, node/php code to maintain like Wordpress or other dynamic blogging systems require. Awesome.</p>\n<h1 id=\"How-on-earth-do-things-work\"><a href=\"#How-on-earth-do-things-work\" class=\"headerlink\" title=\"How on earth do things work\"></a>How on earth do things work</h1><ul>\n<li>You write posts using Markdown language and preview them locally</li>\n<li>Hexo generates the static htmls locally</li>\n<li>You commit all static assets to Github</li>\n<li>All content will be public via Github IO<ul>\n<li>When you hit path that ends with /, Github will attempt to read index.html under that directory, i.e. for /foo/, the corresponding file is /foo/index.html</li>\n<li>For URLs don’t end with / (except root), Github will try to read the corresponding file, i.e. for /foo, if file foo doesn’t exist, 404 will be returned.</li>\n<li>Generally, Hexo’s path layout should be fine but if you use certain themes (like the default landscape), you might need to fix the URLs manually if they don’t end with / while they should.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"What-this-solution-cannot-do\"><a href=\"#What-this-solution-cannot-do\" class=\"headerlink\" title=\"What this solution cannot do\"></a>What this solution cannot do</h1><p>You can think of Hexo as a lightweight templating system so most dynamic features that Wordpress offer don’t exist, including searching (provided by simple google search instead), comment system (you can use Disqus instead), dynamic widgets like top posts, permalink backend forwarding and so on.</p>\n<p>However, do you really need these?</p>\n<h1 id=\"Get-started\"><a href=\"#Get-started\" class=\"headerlink\" title=\"Get started\"></a>Get started</h1><p>If you’ve read this far, chances are you want to give it a try. Here are the steps:</p>\n<ol>\n<li><p>Install node (required by Hexo): <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></p>\n</li>\n<li><p>Install Hexo</p>\n<pre><code>npm install -g hexo-cli\n\n// this downloads the starter pack and sets up node modules under the directory &lt;name&gt; for you so it may take a while\nhexo init &lt;name&gt;</code></pre></li>\n<li><p>Open <code>&lt;name&gt;/_config.yml</code> and there may be a few things you want to set such as the name and author. The most important things are the <code>url</code> and <code>root</code>. The details can be found <a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</li>\n<li><p>By default Hexo will generate the Hello world post for you. You can preview it by starting the local server:</p>\n<pre><code>hexo server</code></pre></li>\n<li><p>Generate actual assets:</p>\n<pre><code>hexo generate</code></pre></li>\n<li><p>Set up Github page repo: <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n</li>\n</ol>\n<p>Depending on if you have a VPS, things maybe a bit different. Follow 7a if you do and 7b if not. The major difference is the directory structure in the repo.</p>\n<p>7a-1. Hexo by default publishes all static assets to <code>public</code>. However, Github by default expects stuff to be under root. That means, with this setup, the repo needs to be rooted at <code>public</code>:</p>\n<pre><code>cd public\ngit init\ngit remote add origin &lt;repo url&gt;\ngit pull</code></pre><p>7a-2. Commit all assets:</p>\n<pre><code>git add --all\ngit commit -m &quot;...&quot;\ngit push</code></pre><p>7a-3. If you have a custom domain, set CNAME pointed to your.github.io and remember to disable https enforcement in Github (since SSL will verify host name). Also don’t forget to set the custom url in Github.</p>\n<hr>\n<p>7b-1. If you have a VPS then you can commit all the files and just use github as the storage area since you can do backend url forwarding.</p>\n<figure class=\"highlight nginx\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  xcorpion.tech;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host xcorpion.tech;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://your.github.io/public/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7b-2. If you have a custom domain, set A record pointed to your server IP and similarily, remember to turn off https enforcement. Also don’t forget to set the custom url in Github.</p>\n<h1 id=\"And-that’s-it-Let’s-start-writing\"><a href=\"#And-that’s-it-Let’s-start-writing\" class=\"headerlink\" title=\"And that’s it! Let’s start writing!\"></a>And that’s it! Let’s start writing!</h1><ul>\n<li><p>In your hexo root directory, start a new post:</p>\n<pre><code>hexo new post</code></pre></li>\n<li><p>Preview your post with</p>\n<pre><code>hexo server</code></pre></li>\n<li><p>In preview mode, Hexo will watch your files and automatically update the html. However, it <strong>will not</strong> publish any static assets (those eventually shown in your site). So run this to let hexo do it:</p>\n<pre><code>hexo generate</code></pre></li>\n<li><p>Then commit the changes to your repo (You can automate this with a shell script.)</p>\n</li>\n</ul>\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"<h1 id=\"You-should-read-this-if\"><a href=\"#You-should-read-this-if\" class=\"headerlink\" title=\"You should read this if\"></a>You should read this if</h1><ul>\n<li>You want to set up a personal blog</li>\n<li>You know what <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" target=\"_blank\" rel=\"noopener\">Markdown</a> is</li>\n<li>You don’t want to set up a heavy Wordpress environment</li>\n<li>You don’t want to set up any database just for the blog</li>\n<li>You either don’t have a VPS or want to host blog content in some easy-to-reach place.</li>\n<li>You still want a template/theme system.</li>\n</ul>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>Github Pages + Hexo (what this site uses)</p>","more":"<h1 id=\"What-is-Hexo\"><a href=\"#What-is-Hexo\" class=\"headerlink\" title=\"What is Hexo\"></a>What is Hexo</h1><p>“<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.”</p>\n<p>In other words, Hexo is a <strong>static</strong> blogging system. This means there is no need for database, node/php code to maintain like Wordpress or other dynamic blogging systems require. Awesome.</p>\n<h1 id=\"How-on-earth-do-things-work\"><a href=\"#How-on-earth-do-things-work\" class=\"headerlink\" title=\"How on earth do things work\"></a>How on earth do things work</h1><ul>\n<li>You write posts using Markdown language and preview them locally</li>\n<li>Hexo generates the static htmls locally</li>\n<li>You commit all static assets to Github</li>\n<li>All content will be public via Github IO<ul>\n<li>When you hit path that ends with /, Github will attempt to read index.html under that directory, i.e. for /foo/, the corresponding file is /foo/index.html</li>\n<li>For URLs don’t end with / (except root), Github will try to read the corresponding file, i.e. for /foo, if file foo doesn’t exist, 404 will be returned.</li>\n<li>Generally, Hexo’s path layout should be fine but if you use certain themes (like the default landscape), you might need to fix the URLs manually if they don’t end with / while they should.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"What-this-solution-cannot-do\"><a href=\"#What-this-solution-cannot-do\" class=\"headerlink\" title=\"What this solution cannot do\"></a>What this solution cannot do</h1><p>You can think of Hexo as a lightweight templating system so most dynamic features that Wordpress offer don’t exist, including searching (provided by simple google search instead), comment system (you can use Disqus instead), dynamic widgets like top posts, permalink backend forwarding and so on.</p>\n<p>However, do you really need these?</p>\n<h1 id=\"Get-started\"><a href=\"#Get-started\" class=\"headerlink\" title=\"Get started\"></a>Get started</h1><p>If you’ve read this far, chances are you want to give it a try. Here are the steps:</p>\n<ol>\n<li><p>Install node (required by Hexo): <a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a></p>\n</li>\n<li><p>Install Hexo</p>\n<pre><code>npm install -g hexo-cli\n\n// this downloads the starter pack and sets up node modules under the directory &lt;name&gt; for you so it may take a while\nhexo init &lt;name&gt;</code></pre></li>\n<li><p>Open <code>&lt;name&gt;/_config.yml</code> and there may be a few things you want to set such as the name and author. The most important things are the <code>url</code> and <code>root</code>. The details can be found <a href=\"https://hexo.io/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n</li>\n<li><p>By default Hexo will generate the Hello world post for you. You can preview it by starting the local server:</p>\n<pre><code>hexo server</code></pre></li>\n<li><p>Generate actual assets:</p>\n<pre><code>hexo generate</code></pre></li>\n<li><p>Set up Github page repo: <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">https://pages.github.com/</a></p>\n</li>\n</ol>\n<p>Depending on if you have a VPS, things maybe a bit different. Follow 7a if you do and 7b if not. The major difference is the directory structure in the repo.</p>\n<p>7a-1. Hexo by default publishes all static assets to <code>public</code>. However, Github by default expects stuff to be under root. That means, with this setup, the repo needs to be rooted at <code>public</code>:</p>\n<pre><code>cd public\ngit init\ngit remote add origin &lt;repo url&gt;\ngit pull</code></pre><p>7a-2. Commit all assets:</p>\n<pre><code>git add --all\ngit commit -m &quot;...&quot;\ngit push</code></pre><p>7a-3. If you have a custom domain, set CNAME pointed to your.github.io and remember to disable https enforcement in Github (since SSL will verify host name). Also don’t forget to set the custom url in Github.</p>\n<hr>\n<p>7b-1. If you have a VPS then you can commit all the files and just use github as the storage area since you can do backend url forwarding.</p>\n<figure class=\"highlight nginx\"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  xcorpion.tech;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host xcorpion.tech;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://your.github.io/public/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7b-2. If you have a custom domain, set A record pointed to your server IP and similarily, remember to turn off https enforcement. Also don’t forget to set the custom url in Github.</p>\n<h1 id=\"And-that’s-it-Let’s-start-writing\"><a href=\"#And-that’s-it-Let’s-start-writing\" class=\"headerlink\" title=\"And that’s it! Let’s start writing!\"></a>And that’s it! Let’s start writing!</h1><ul>\n<li><p>In your hexo root directory, start a new post:</p>\n<pre><code>hexo new post</code></pre></li>\n<li><p>Preview your post with</p>\n<pre><code>hexo server</code></pre></li>\n<li><p>In preview mode, Hexo will watch your files and automatically update the html. However, it <strong>will not</strong> publish any static assets (those eventually shown in your site). So run this to let hexo do it:</p>\n<pre><code>hexo generate</code></pre></li>\n<li><p>Then commit the changes to your repo (You can automate this with a shell script.)</p>\n</li>\n</ul>"},{"title":"You Don't Know JS - Equal or Not Equal","date":"2016-10-04T02:40:48.000Z","_content":"\n<!-- toc -->\n\n## == and ===\n\nLikely you know the difference between `==` and `===`: basically, `===` means strict equality where no implicit conversion is allowed whereas `==` is loose equality.\n\n{% codeblock lang:js %}\n\n'a' === 'a'     // true\n0 == false      // true\n\n{% endcodeblock %}\n\n## Dig deeper\n\nOK but this is too boring since we all know that.\n\nHow about this:\n\n{% codeblock lang:js %}\n\nString('a') === 'a'\nnew String('a') === 'a'\n\n{% endcodeblock %}\n\nWell the answers are `true` and `false` because `String()` returns a primitive string while `new String()` returns a string object. Surely `new String('a') == 'a'` yields `true`. No surprise.\n\n### What about arrays?\n\n    [] === []\n\nWell this returns `false` because for non-primitive objects, they are compared by reference. This always returns `false` because they are different in terms of memory location.\n\nHowever surprisingly you can compare arrays like this:\n\n    [1, 2, 3] < [2, 3]      // true\n    [2, 1, 3] > [1, 2, 3]   // true\n\n{% rage_face 'Blonde hmmm' style:width:125px %}\n\n(Wait a sec. I think I have an idea.)\n\nHow about this:\n\n    function arrEquals(arr1, arr2) {\n        return !(arr1 < arr2) && !(arr2 < arr1);\n    }\n\n{% rage_face 'Fuck yeah smile' style:width:125px %}\n\nWell this is wrong because arrays will be flattened when compared, like this\n\n    [[1, 2], 1] < [1, 2, 3]     // true\n\n### What about objects\n\nWhat's the result of this expression?\n\n    {} === {}\n\nWell it's neither `true` nor `false` but you get `SyntaxError` because in this case `{}` is not an object literal but a code block and thus it cannot be followed with `=`. Anyway we are drifting away from the original topic...\n\n## Implicit conversions\n\nWell that's just warm-up. Let's see something serious.\n\nIf you read something about \"best practices\", you would probably be told not to use `==` because of the evil conversion. However chances are you've used it here and there and most likely that's also part of the \"best practices\".\n\nFor example:\n\n    var foo = bar();\n    if (foo) {\n        doSomething();\n    }\n\nThis works because in JavaScript, only 6 object/literals are evaluated to `false`. They are `0`, `''`, `NaN`, `undefined`, `null` and of course `false`. Rest of the world evaluates to `true`, including `{}` and `[]`.\n\nHmm here's something wacky:\n\n{% codeblock lang:js %}\n\nvar a = {\n    valueOf: function () {\n        return -1;\n    }\n};\n\nif (!(1 + a)) {\n    alert('boom');\n}\n\n{% endcodeblock %}\n\nYour code does go boom because `1 + a` gets implicitly converted to `1 + a.valueOf()` and hence yields `0`.\n\nThe actual behavior is documented in ECMA standard - http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\n\nIn most cases, implicit conversion would cause `valueOf()` to be called or falls back to `toString()` if not defined.\n\nFor example:\n\n{% codeblock lang:js %}\n\nvar foo = {\n    valueOf: function () {\n        return 'value';\n    },\n    toString: function () {\n        return 'toString';\n    }\n};\n\n'foo' + foo             // foovalue\n\n{% endcodeblock %}\n\nThis is because according to standard, when `toPrimitive` is invoked for implicit conversion with no *hint* provided (e.g. in the case of concatenation, or when `==` is used between different types), it by default prefers `valueOf`. There are a few exceptions though, including but not limited to `Array.prototype.join` and `alert`. They would call `toPrimitive` with `string` as the hint so `toString()` will be favored.\n\n## Conclusion\n\nIn general, you probably want to avoid using `==` and use `===` most of the time if not always to avoid worrying about wonky implicit conversion magic.\n\nHowever, you can't be wary enough. For example:\n\n    isNaN('1') === true\n\nYou might think that `'1'` is a string and hence this should be `false` but unfortunately `isNaN` always calls `toNumber` internally ([spec](http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber)) and hence this is `true`.\n\n{% rage_face 'Computer stare' style:width:200px %}\n","source":"_posts/You-Don-t-Know-JS-Equal-or-Not-Equal.md","raw":"---\ntitle: You Don't Know JS - Equal or Not Equal\ndate: 2016-10-03 19:40:48\ncategories:\n- You Don't Know JS\ntags:\n- javascript\n- frontend\n---\n\n<!-- toc -->\n\n## == and ===\n\nLikely you know the difference between `==` and `===`: basically, `===` means strict equality where no implicit conversion is allowed whereas `==` is loose equality.\n\n{% codeblock lang:js %}\n\n'a' === 'a'     // true\n0 == false      // true\n\n{% endcodeblock %}\n\n## Dig deeper\n\nOK but this is too boring since we all know that.\n\nHow about this:\n\n{% codeblock lang:js %}\n\nString('a') === 'a'\nnew String('a') === 'a'\n\n{% endcodeblock %}\n\nWell the answers are `true` and `false` because `String()` returns a primitive string while `new String()` returns a string object. Surely `new String('a') == 'a'` yields `true`. No surprise.\n\n### What about arrays?\n\n    [] === []\n\nWell this returns `false` because for non-primitive objects, they are compared by reference. This always returns `false` because they are different in terms of memory location.\n\nHowever surprisingly you can compare arrays like this:\n\n    [1, 2, 3] < [2, 3]      // true\n    [2, 1, 3] > [1, 2, 3]   // true\n\n{% rage_face 'Blonde hmmm' style:width:125px %}\n\n(Wait a sec. I think I have an idea.)\n\nHow about this:\n\n    function arrEquals(arr1, arr2) {\n        return !(arr1 < arr2) && !(arr2 < arr1);\n    }\n\n{% rage_face 'Fuck yeah smile' style:width:125px %}\n\nWell this is wrong because arrays will be flattened when compared, like this\n\n    [[1, 2], 1] < [1, 2, 3]     // true\n\n### What about objects\n\nWhat's the result of this expression?\n\n    {} === {}\n\nWell it's neither `true` nor `false` but you get `SyntaxError` because in this case `{}` is not an object literal but a code block and thus it cannot be followed with `=`. Anyway we are drifting away from the original topic...\n\n## Implicit conversions\n\nWell that's just warm-up. Let's see something serious.\n\nIf you read something about \"best practices\", you would probably be told not to use `==` because of the evil conversion. However chances are you've used it here and there and most likely that's also part of the \"best practices\".\n\nFor example:\n\n    var foo = bar();\n    if (foo) {\n        doSomething();\n    }\n\nThis works because in JavaScript, only 6 object/literals are evaluated to `false`. They are `0`, `''`, `NaN`, `undefined`, `null` and of course `false`. Rest of the world evaluates to `true`, including `{}` and `[]`.\n\nHmm here's something wacky:\n\n{% codeblock lang:js %}\n\nvar a = {\n    valueOf: function () {\n        return -1;\n    }\n};\n\nif (!(1 + a)) {\n    alert('boom');\n}\n\n{% endcodeblock %}\n\nYour code does go boom because `1 + a` gets implicitly converted to `1 + a.valueOf()` and hence yields `0`.\n\nThe actual behavior is documented in ECMA standard - http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\n\nIn most cases, implicit conversion would cause `valueOf()` to be called or falls back to `toString()` if not defined.\n\nFor example:\n\n{% codeblock lang:js %}\n\nvar foo = {\n    valueOf: function () {\n        return 'value';\n    },\n    toString: function () {\n        return 'toString';\n    }\n};\n\n'foo' + foo             // foovalue\n\n{% endcodeblock %}\n\nThis is because according to standard, when `toPrimitive` is invoked for implicit conversion with no *hint* provided (e.g. in the case of concatenation, or when `==` is used between different types), it by default prefers `valueOf`. There are a few exceptions though, including but not limited to `Array.prototype.join` and `alert`. They would call `toPrimitive` with `string` as the hint so `toString()` will be favored.\n\n## Conclusion\n\nIn general, you probably want to avoid using `==` and use `===` most of the time if not always to avoid worrying about wonky implicit conversion magic.\n\nHowever, you can't be wary enough. For example:\n\n    isNaN('1') === true\n\nYou might think that `'1'` is a string and hence this should be `false` but unfortunately `isNaN` always calls `toNumber` internally ([spec](http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber)) and hence this is `true`.\n\n{% rage_face 'Computer stare' style:width:200px %}\n","slug":"You-Don-t-Know-JS-Equal-or-Not-Equal","published":1,"updated":"2020-05-04T00:05:42.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hi9000csxmgcriqa0qp","content":"<!-- toc -->\n\n<h2 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"== and ===\"></a>== and ===</h2><p>Likely you know the difference between <code>==</code> and <code>===</code>: basically, <code>===</code> means strict equality where no implicit conversion is allowed whereas <code>==</code> is loose equality.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a'</span> === <span class=\"string\">'a'</span>     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span>      <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dig-deeper\"><a href=\"#Dig-deeper\" class=\"headerlink\" title=\"Dig deeper\"></a>Dig deeper</h2><p>OK but this is too boring since we all know that.</p>\n<p>How about this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>) === <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>) === <span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Well the answers are <code>true</code> and <code>false</code> because <code>String()</code> returns a primitive string while <code>new String()</code> returns a string object. Surely <code>new String(&#39;a&#39;) == &#39;a&#39;</code> yields <code>true</code>. No surprise.</p>\n<h3 id=\"What-about-arrays\"><a href=\"#What-about-arrays\" class=\"headerlink\" title=\"What about arrays?\"></a>What about arrays?</h3><pre><code>[] === []</code></pre><p>Well this returns <code>false</code> because for non-primitive objects, they are compared by reference. This always returns <code>false</code> because they are different in terms of memory location.</p>\n<p>However surprisingly you can compare arrays like this:</p>\n<pre><code>[1, 2, 3] &lt; [2, 3]      // true\n[2, 1, 3] &gt; [1, 2, 3]   // true</code></pre><img src=\"http://www.memes.at/faces/blonde_hmmm.jpg\" alt=\"Blonde hmmm\" style=\"width:125px\">\n\n<p>(Wait a sec. I think I have an idea.)</p>\n<p>How about this:</p>\n<pre><code>function arrEquals(arr1, arr2) {\n    return !(arr1 &lt; arr2) &amp;&amp; !(arr2 &lt; arr1);\n}</code></pre><img src=\"http://www.memes.at/faces/fuck_yeah_smile.jpg\" alt=\"Fuck yeah smile\" style=\"width:125px\">\n\n<p>Well this is wrong because arrays will be flattened when compared, like this</p>\n<pre><code>[[1, 2], 1] &lt; [1, 2, 3]     // true</code></pre><h3 id=\"What-about-objects\"><a href=\"#What-about-objects\" class=\"headerlink\" title=\"What about objects\"></a>What about objects</h3><p>What’s the result of this expression?</p>\n<pre><code>{} === {}</code></pre><p>Well it’s neither <code>true</code> nor <code>false</code> but you get <code>SyntaxError</code> because in this case <code>{}</code> is not an object literal but a code block and thus it cannot be followed with <code>=</code>. Anyway we are drifting away from the original topic…</p>\n<h2 id=\"Implicit-conversions\"><a href=\"#Implicit-conversions\" class=\"headerlink\" title=\"Implicit conversions\"></a>Implicit conversions</h2><p>Well that’s just warm-up. Let’s see something serious.</p>\n<p>If you read something about “best practices”, you would probably be told not to use <code>==</code> because of the evil conversion. However chances are you’ve used it here and there and most likely that’s also part of the “best practices”.</p>\n<p>For example:</p>\n<pre><code>var foo = bar();\nif (foo) {\n    doSomething();\n}</code></pre><p>This works because in JavaScript, only 6 object/literals are evaluated to <code>false</code>. They are <code>0</code>, <code>&#39;&#39;</code>, <code>NaN</code>, <code>undefined</code>, <code>null</code> and of course <code>false</code>. Rest of the world evaluates to <code>true</code>, including <code>{}</code> and <code>[]</code>.</p>\n<p>Hmm here’s something wacky:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    valueOf: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"number\">1</span> + a)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'boom'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Your code does go boom because <code>1 + a</code> gets implicitly converted to <code>1 + a.valueOf()</code> and hence yields <code>0</code>.</p>\n<p>The actual behavior is documented in ECMA standard - <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" target=\"_blank\" rel=\"noopener\">http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison</a></p>\n<p>In most cases, implicit conversion would cause <code>valueOf()</code> to be called or falls back to <code>toString()</code> if not defined.</p>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    valueOf: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'value'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'toString'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span> + foo             <span class=\"comment\">// foovalue</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>This is because according to standard, when <code>toPrimitive</code> is invoked for implicit conversion with no <em>hint</em> provided (e.g. in the case of concatenation, or when <code>==</code> is used between different types), it by default prefers <code>valueOf</code>. There are a few exceptions though, including but not limited to <code>Array.prototype.join</code> and <code>alert</code>. They would call <code>toPrimitive</code> with <code>string</code> as the hint so <code>toString()</code> will be favored.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In general, you probably want to avoid using <code>==</code> and use <code>===</code> most of the time if not always to avoid worrying about wonky implicit conversion magic.</p>\n<p>However, you can’t be wary enough. For example:</p>\n<pre><code>isNaN(&apos;1&apos;) === true</code></pre><p>You might think that <code>&#39;1&#39;</code> is a string and hence this should be <code>false</code> but unfortunately <code>isNaN</code> always calls <code>toNumber</code> internally (<a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber\" target=\"_blank\" rel=\"noopener\">spec</a>) and hence this is <code>true</code>.</p>\n<img src=\"http://www.memes.at/faces/computer_stare.jpg\" alt=\"Computer stare\" style=\"width:200px\">\n","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<!-- toc -->\n\n<h2 id=\"and\"><a href=\"#and\" class=\"headerlink\" title=\"== and ===\"></a>== and ===</h2><p>Likely you know the difference between <code>==</code> and <code>===</code>: basically, <code>===</code> means strict equality where no implicit conversion is allowed whereas <code>==</code> is loose equality.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'a'</span> === <span class=\"string\">'a'</span>     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span>      <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dig-deeper\"><a href=\"#Dig-deeper\" class=\"headerlink\" title=\"Dig deeper\"></a>Dig deeper</h2><p>OK but this is too boring since we all know that.</p>\n<p>How about this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>) === <span class=\"string\">'a'</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'a'</span>) === <span class=\"string\">'a'</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Well the answers are <code>true</code> and <code>false</code> because <code>String()</code> returns a primitive string while <code>new String()</code> returns a string object. Surely <code>new String(&#39;a&#39;) == &#39;a&#39;</code> yields <code>true</code>. No surprise.</p>\n<h3 id=\"What-about-arrays\"><a href=\"#What-about-arrays\" class=\"headerlink\" title=\"What about arrays?\"></a>What about arrays?</h3><pre><code>[] === []</code></pre><p>Well this returns <code>false</code> because for non-primitive objects, they are compared by reference. This always returns <code>false</code> because they are different in terms of memory location.</p>\n<p>However surprisingly you can compare arrays like this:</p>\n<pre><code>[1, 2, 3] &lt; [2, 3]      // true\n[2, 1, 3] &gt; [1, 2, 3]   // true</code></pre><img src=\"http://www.memes.at/faces/blonde_hmmm.jpg\" alt=\"Blonde hmmm\" style=\"width:125px\">\n\n<p>(Wait a sec. I think I have an idea.)</p>\n<p>How about this:</p>\n<pre><code>function arrEquals(arr1, arr2) {\n    return !(arr1 &lt; arr2) &amp;&amp; !(arr2 &lt; arr1);\n}</code></pre><img src=\"http://www.memes.at/faces/fuck_yeah_smile.jpg\" alt=\"Fuck yeah smile\" style=\"width:125px\">\n\n<p>Well this is wrong because arrays will be flattened when compared, like this</p>\n<pre><code>[[1, 2], 1] &lt; [1, 2, 3]     // true</code></pre><h3 id=\"What-about-objects\"><a href=\"#What-about-objects\" class=\"headerlink\" title=\"What about objects\"></a>What about objects</h3><p>What’s the result of this expression?</p>\n<pre><code>{} === {}</code></pre><p>Well it’s neither <code>true</code> nor <code>false</code> but you get <code>SyntaxError</code> because in this case <code>{}</code> is not an object literal but a code block and thus it cannot be followed with <code>=</code>. Anyway we are drifting away from the original topic…</p>\n<h2 id=\"Implicit-conversions\"><a href=\"#Implicit-conversions\" class=\"headerlink\" title=\"Implicit conversions\"></a>Implicit conversions</h2><p>Well that’s just warm-up. Let’s see something serious.</p>\n<p>If you read something about “best practices”, you would probably be told not to use <code>==</code> because of the evil conversion. However chances are you’ve used it here and there and most likely that’s also part of the “best practices”.</p>\n<p>For example:</p>\n<pre><code>var foo = bar();\nif (foo) {\n    doSomething();\n}</code></pre><p>This works because in JavaScript, only 6 object/literals are evaluated to <code>false</code>. They are <code>0</code>, <code>&#39;&#39;</code>, <code>NaN</code>, <code>undefined</code>, <code>null</code> and of course <code>false</code>. Rest of the world evaluates to <code>true</code>, including <code>{}</code> and <code>[]</code>.</p>\n<p>Hmm here’s something wacky:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    valueOf: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"number\">1</span> + a)) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'boom'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Your code does go boom because <code>1 + a</code> gets implicitly converted to <code>1 + a.valueOf()</code> and hence yields <code>0</code>.</p>\n<p>The actual behavior is documented in ECMA standard - <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" target=\"_blank\" rel=\"noopener\">http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison</a></p>\n<p>In most cases, implicit conversion would cause <code>valueOf()</code> to be called or falls back to <code>toString()</code> if not defined.</p>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    valueOf: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'value'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    toString: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'toString'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'foo'</span> + foo             <span class=\"comment\">// foovalue</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>This is because according to standard, when <code>toPrimitive</code> is invoked for implicit conversion with no <em>hint</em> provided (e.g. in the case of concatenation, or when <code>==</code> is used between different types), it by default prefers <code>valueOf</code>. There are a few exceptions though, including but not limited to <code>Array.prototype.join</code> and <code>alert</code>. They would call <code>toPrimitive</code> with <code>string</code> as the hint so <code>toString()</code> will be favored.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>In general, you probably want to avoid using <code>==</code> and use <code>===</code> most of the time if not always to avoid worrying about wonky implicit conversion magic.</p>\n<p>However, you can’t be wary enough. For example:</p>\n<pre><code>isNaN(&apos;1&apos;) === true</code></pre><p>You might think that <code>&#39;1&#39;</code> is a string and hence this should be <code>false</code> but unfortunately <code>isNaN</code> always calls <code>toNumber</code> internally (<a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber\" target=\"_blank\" rel=\"noopener\">spec</a>) and hence this is <code>true</code>.</p>\n<img src=\"http://www.memes.at/faces/computer_stare.jpg\" alt=\"Computer stare\" style=\"width:200px\">\n"},{"title":"You Don't Know JS - Eval","date":"2016-10-01T23:03:31.000Z","_content":"\n<!-- toc -->\n\nRecently I've been writing quite a bit of front-end stuff and seen quite a few tricks from other people's libraries. It turns out JavaScript is a pretty ~~wonky and fked up~~ interesting language, which tempts me to write a series about it and this is the first one. This is by no means supposed to show how to write JS but just to show some \"wacky\" stuff.\n\n## Have you seen eval() written like this?\n\n    (0, eval)('something');\n\n{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\n## Regular eval\n\nEval basically allows you to execute any script within the given context.\n\nFor example:\n\n{% codeblock lang:js %}\neval('console.log(\"123\");');            // prints out 123\n\n(function A() {\n    this.a = 1;\n\n    eval('console.log(this.a);');            // 1\n})();\n\n{% endcodeblock %}\n\nSo far everything is normal: eval runs inside the current scope. `this` is pointed to the instance of A.\n\n## Global eval\n\nThings get interesting when you do this:\n\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    this.someVar = 'inner';\n\n    eval('console.log(someVar);');       // you may want 'outer' but this says 'inner'\n})();\n\n{% endcodeblock %}\n\nWell in this scenario eval cannot get the value of someVar in the global scope.\n\nHowever ECMA5 says, if you change `eval()` call to indirect, in other words, if you use it as a value rather than a function reference, then it will evaluate the input in the global scope.\n\nSo this would work:\n\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    var geval = eval;\n    this.someVar = 'inner';\n\n    geval('console.log(someVar);');       // 'outer'\n})();\n\n{% endcodeblock %}\n\nAlthough `geval` and `eval` call the exact same function, `geval` is a value and thus it becomes an indirect call according to ECMA5.\n\n## Back to the original topic\n\nSo what the hell is `(0, eval)` then? Well a comma separated expression list evaluates to the last value, so it essentially is a shortcut to\n\n    var geval = eval;\n    geval(...);\n\n0 is only a puppet here. It could be any value.\n\n{% rage_face 'So much win' style:width:200px %}","source":"_posts/You-Don-t-Know-JS-Eval.md","raw":"---\ntitle: You Don't Know JS - Eval\ndate: 2016-10-01 16:03:31\ncategories:\n- You Don't Know JS\ntags:\n- javascript\n---\n\n<!-- toc -->\n\nRecently I've been writing quite a bit of front-end stuff and seen quite a few tricks from other people's libraries. It turns out JavaScript is a pretty ~~wonky and fked up~~ interesting language, which tempts me to write a series about it and this is the first one. This is by no means supposed to show how to write JS but just to show some \"wacky\" stuff.\n\n## Have you seen eval() written like this?\n\n    (0, eval)('something');\n\n{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\n## Regular eval\n\nEval basically allows you to execute any script within the given context.\n\nFor example:\n\n{% codeblock lang:js %}\neval('console.log(\"123\");');            // prints out 123\n\n(function A() {\n    this.a = 1;\n\n    eval('console.log(this.a);');            // 1\n})();\n\n{% endcodeblock %}\n\nSo far everything is normal: eval runs inside the current scope. `this` is pointed to the instance of A.\n\n## Global eval\n\nThings get interesting when you do this:\n\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    this.someVar = 'inner';\n\n    eval('console.log(someVar);');       // you may want 'outer' but this says 'inner'\n})();\n\n{% endcodeblock %}\n\nWell in this scenario eval cannot get the value of someVar in the global scope.\n\nHowever ECMA5 says, if you change `eval()` call to indirect, in other words, if you use it as a value rather than a function reference, then it will evaluate the input in the global scope.\n\nSo this would work:\n\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    var geval = eval;\n    this.someVar = 'inner';\n\n    geval('console.log(someVar);');       // 'outer'\n})();\n\n{% endcodeblock %}\n\nAlthough `geval` and `eval` call the exact same function, `geval` is a value and thus it becomes an indirect call according to ECMA5.\n\n## Back to the original topic\n\nSo what the hell is `(0, eval)` then? Well a comma separated expression list evaluates to the last value, so it essentially is a shortcut to\n\n    var geval = eval;\n    geval(...);\n\n0 is only a puppet here. It could be any value.\n\n{% rage_face 'So much win' style:width:200px %}","slug":"You-Don-t-Know-JS-Eval","published":1,"updated":"2020-05-04T00:05:42.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9rr3hia000dsxmgu2r6nhbg","content":"<!-- toc -->\n\n<p>Recently I’ve been writing quite a bit of front-end stuff and seen quite a few tricks from other people’s libraries. It turns out JavaScript is a pretty <del>wonky and fked up</del> interesting language, which tempts me to write a series about it and this is the first one. This is by no means supposed to show how to write JS but just to show some “wacky” stuff.</p>\n<h2 id=\"Have-you-seen-eval-written-like-this\"><a href=\"#Have-you-seen-eval-written-like-this\" class=\"headerlink\" title=\"Have you seen eval() written like this?\"></a>Have you seen eval() written like this?</h2><pre><code>(0, eval)(&apos;something&apos;);</code></pre>{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\n<h2 id=\"Regular-eval\"><a href=\"#Regular-eval\" class=\"headerlink\" title=\"Regular eval\"></a>Regular eval</h2><p>Eval basically allows you to execute any script within the given context.</p>\n<p>For example:</p>\n{% codeblock lang:js %}\neval('console.log(\"123\");');            // prints out 123\n\n(function A() {\n    this.a = 1;\n\n    eval('console.log(this.a);');            // 1\n})();\n\n{% endcodeblock %}\n\n<p>So far everything is normal: eval runs inside the current scope. <code>this</code> is pointed to the instance of A.</p>\n<h2 id=\"Global-eval\"><a href=\"#Global-eval\" class=\"headerlink\" title=\"Global eval\"></a>Global eval</h2><p>Things get interesting when you do this:</p>\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    this.someVar = 'inner';\n\n    eval('console.log(someVar);');       // you may want 'outer' but this says 'inner'\n})();\n\n{% endcodeblock %}\n\n<p>Well in this scenario eval cannot get the value of someVar in the global scope.</p>\n<p>However ECMA5 says, if you change <code>eval()</code> call to indirect, in other words, if you use it as a value rather than a function reference, then it will evaluate the input in the global scope.</p>\n<p>So this would work:</p>\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    var geval = eval;\n    this.someVar = 'inner';\n\n    geval('console.log(someVar);');       // 'outer'\n})();\n\n{% endcodeblock %}\n\n<p>Although <code>geval</code> and <code>eval</code> call the exact same function, <code>geval</code> is a value and thus it becomes an indirect call according to ECMA5.</p>\n<h2 id=\"Back-to-the-original-topic\"><a href=\"#Back-to-the-original-topic\" class=\"headerlink\" title=\"Back to the original topic\"></a>Back to the original topic</h2><p>So what the hell is <code>(0, eval)</code> then? Well a comma separated expression list evaluates to the last value, so it essentially is a shortcut to</p>\n<pre><code>var geval = eval;\ngeval(...);</code></pre><p>0 is only a puppet here. It could be any value.</p>\n<img src=\"http://www.memes.at/faces/so_much_win.jpg\" alt=\"So much win\" style=\"width:200px\">","site":{"data":{}},"thumbnailImageUrl":null,"excerpt":"","more":"<!-- toc -->\n\n<p>Recently I’ve been writing quite a bit of front-end stuff and seen quite a few tricks from other people’s libraries. It turns out JavaScript is a pretty <del>wonky and fked up</del> interesting language, which tempts me to write a series about it and this is the first one. This is by no means supposed to show how to write JS but just to show some “wacky” stuff.</p>\n<h2 id=\"Have-you-seen-eval-written-like-this\"><a href=\"#Have-you-seen-eval-written-like-this\" class=\"headerlink\" title=\"Have you seen eval() written like this?\"></a>Have you seen eval() written like this?</h2><pre><code>(0, eval)(&apos;something&apos;);</code></pre>{% rage_face 'Are you fucking kidding me' style:width:200px %}\n\n<h2 id=\"Regular-eval\"><a href=\"#Regular-eval\" class=\"headerlink\" title=\"Regular eval\"></a>Regular eval</h2><p>Eval basically allows you to execute any script within the given context.</p>\n<p>For example:</p>\n{% codeblock lang:js %}\neval('console.log(\"123\");');            // prints out 123\n\n(function A() {\n    this.a = 1;\n\n    eval('console.log(this.a);');            // 1\n})();\n\n{% endcodeblock %}\n\n<p>So far everything is normal: eval runs inside the current scope. <code>this</code> is pointed to the instance of A.</p>\n<h2 id=\"Global-eval\"><a href=\"#Global-eval\" class=\"headerlink\" title=\"Global eval\"></a>Global eval</h2><p>Things get interesting when you do this:</p>\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    this.someVar = 'inner';\n\n    eval('console.log(someVar);');       // you may want 'outer' but this says 'inner'\n})();\n\n{% endcodeblock %}\n\n<p>Well in this scenario eval cannot get the value of someVar in the global scope.</p>\n<p>However ECMA5 says, if you change <code>eval()</code> call to indirect, in other words, if you use it as a value rather than a function reference, then it will evaluate the input in the global scope.</p>\n<p>So this would work:</p>\n{% codeblock lang:js %}\nvar someVar = 'outer';\n\n(function A() {\n    var geval = eval;\n    this.someVar = 'inner';\n\n    geval('console.log(someVar);');       // 'outer'\n})();\n\n{% endcodeblock %}\n\n<p>Although <code>geval</code> and <code>eval</code> call the exact same function, <code>geval</code> is a value and thus it becomes an indirect call according to ECMA5.</p>\n<h2 id=\"Back-to-the-original-topic\"><a href=\"#Back-to-the-original-topic\" class=\"headerlink\" title=\"Back to the original topic\"></a>Back to the original topic</h2><p>So what the hell is <code>(0, eval)</code> then? Well a comma separated expression list evaluates to the last value, so it essentially is a shortcut to</p>\n<pre><code>var geval = eval;\ngeval(...);</code></pre><p>0 is only a puppet here. It could be any value.</p>\n<img src=\"http://www.memes.at/faces/so_much_win.jpg\" alt=\"So much win\" style=\"width:200px\">"}],"PostAsset":[{"_id":"source/_posts/Why-you-should-ditch-browserify-and-commonjs-in-the-http-2-world/comparison.gif","slug":"comparison.gif","post":"ck9rr3hi70009sxmg39ypbwto","modified":0,"renderable":0},{"_id":"source/_posts/Building-Linux-Workspace-on-Windows-10-via-WSL/WSL.png","slug":"WSL.png","post":"ck9rr3hi10003sxmgctsl2lxv","modified":0,"renderable":0},{"_id":"source/_posts/Building-Linux-Workspace-on-Windows-10-via-WSL/title.png","slug":"title.png","post":"ck9rr3hi10003sxmgctsl2lxv","modified":0,"renderable":0},{"_id":"source/_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/example2.png","slug":"example2.png","post":"ck9rr3hi50007sxmggfye2q2a","modified":0,"renderable":0},{"_id":"source/_drafts/Implementing-Regex-from-Scratch-1-The-Basics-of-Regex-and-Finite-Automata/sm.png","slug":"sm.png","post":"ck9rr3hi50007sxmggfye2q2a","modified":0,"renderable":0},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/RBK20.png","slug":"RBK20.png","post":"ck9rr3hi30006sxmgmf8zfb1e","modified":0,"renderable":0},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/slowspeed.png","slug":"slowspeed.png","post":"ck9rr3hi30006sxmgmf8zfb1e","modified":0,"renderable":0},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/speed.png","slug":"speed.png","post":"ck9rr3hi30006sxmgmf8zfb1e","modified":0,"renderable":0},{"_id":"source/_posts/Make-Wireless-BackHaul-Great-Again-Disable-Orbi-2-4G-Backhaul/telnet.png","slug":"telnet.png","post":"ck9rr3hi30006sxmgmf8zfb1e","modified":0,"renderable":0},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/mmap.png","slug":"mmap.png","post":"ck9rr3hi30005sxmg1ghxg9je","modified":0,"renderable":0},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/non_zero_copy.png","slug":"non_zero_copy.png","post":"ck9rr3hi30005sxmg1ghxg9je","modified":0,"renderable":0},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/scattergather.png","slug":"scattergather.png","post":"ck9rr3hi30005sxmg1ghxg9je","modified":0,"renderable":0},{"_id":"source/_posts/It-s-all-about-buffers-zero-copy-mmap-and-Java-NIO/zero_copy.png","slug":"zero_copy.png","post":"ck9rr3hi30005sxmg1ghxg9je","modified":0,"renderable":0},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/iam.png","slug":"iam.png","post":"ck9rr3hi60008sxmgfged66ie","modified":0,"renderable":0},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/ms-failure.png","slug":"ms-failure.png","post":"ck9rr3hi60008sxmgfged66ie","modified":0,"renderable":0},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/tracing.png","slug":"tracing.png","post":"ck9rr3hi60008sxmgfged66ie","modified":0,"renderable":0},{"_id":"source/_posts/Monitor-gRPC-Microservices-in-Kubernetes-with-Amazon-X-Ray/xray.png","slug":"xray.png","post":"ck9rr3hi60008sxmgfged66ie","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck9rr3hhx0001sxmge6z4pf1m","category_id":"ck9rr3him000esxmgk8p0npni","_id":"ck9rr3hj5001qsxmgpq73ikl8"},{"post_id":"ck9rr3hi30005sxmg1ghxg9je","category_id":"ck9rr3hip000gsxmgqxc7234g","_id":"ck9rr3hj6001ssxmg1ps3cta2"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","category_id":"ck9rr3him000esxmgk8p0npni","_id":"ck9rr3hj6001usxmgap4zpzdz"},{"post_id":"ck9rr3hi9000bsxmgjzaoi83j","category_id":"ck9rr3his000msxmgbzd9r2ck","_id":"ck9rr3hj6001wsxmgg36yzc5t"},{"post_id":"ck9rr3hi9000csxmgcriqa0qp","category_id":"ck9rr3hiu000osxmggr6ob9oz","_id":"ck9rr3hj6001ysxmg03gb4bnz"},{"post_id":"ck9rr3hia000dsxmgu2r6nhbg","category_id":"ck9rr3hiu000osxmggr6ob9oz","_id":"ck9rr3hj60020sxmg6basrwaa"},{"post_id":"ck9rr3hi60008sxmgfged66ie","category_id":"ck9rr3hiq000isxmgu828yrf9","_id":"ck9rr3hjd002ysxmg8furfi68"},{"post_id":"ck9rr3hi60008sxmgfged66ie","category_id":"ck9rr3hj5001psxmg0e3f1w9c","_id":"ck9rr3hjf002zsxmgbd61kb99"}],"PostTag":[{"post_id":"ck9rr3hhx0001sxmge6z4pf1m","tag_id":"ck9rr3hio000fsxmgwuxqwgx7","_id":"ck9rr3hj5001osxmgcr962ko0"},{"post_id":"ck9rr3hi10003sxmgctsl2lxv","tag_id":"ck9rr3hip000hsxmg5dwuzpo1","_id":"ck9rr3hj6001rsxmgjzeh06uf"},{"post_id":"ck9rr3hi10003sxmgctsl2lxv","tag_id":"ck9rr3hiq000jsxmg20kvuwej","_id":"ck9rr3hj6001tsxmg1pfohi6h"},{"post_id":"ck9rr3hi10003sxmgctsl2lxv","tag_id":"ck9rr3hiq000lsxmgjzi1x417","_id":"ck9rr3hj6001vsxmg9cmlb7at"},{"post_id":"ck9rr3hi30005sxmg1ghxg9je","tag_id":"ck9rr3hit000nsxmgw82zu848","_id":"ck9rr3hj6001xsxmgvd8pouia"},{"post_id":"ck9rr3hi30005sxmg1ghxg9je","tag_id":"ck9rr3hiu000psxmghwrv5sae","_id":"ck9rr3hj6001zsxmgvxpei4z6"},{"post_id":"ck9rr3hi30005sxmg1ghxg9je","tag_id":"ck9rr3hiv000rsxmgulfwwqom","_id":"ck9rr3hj60021sxmgrk9buq0a"},{"post_id":"ck9rr3hi30005sxmg1ghxg9je","tag_id":"ck9rr3hiv000ssxmg9rd12n0d","_id":"ck9rr3hj60022sxmgxgpe8ay4"},{"post_id":"ck9rr3hi30006sxmgmf8zfb1e","tag_id":"ck9rr3hiw000tsxmgct23yqjp","_id":"ck9rr3hj70023sxmgfw884rtu"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hiw000usxmgzn0ixflb","_id":"ck9rr3hj70024sxmgzxyfcmjf"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hiw000vsxmgw2ki0fx7","_id":"ck9rr3hj70025sxmghlmpe57t"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hiw000wsxmgst5jzfg0","_id":"ck9rr3hj70026sxmgqsm9rsoe"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hix000xsxmgkvr52ngn","_id":"ck9rr3hj70027sxmgr51ifve8"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hix000ysxmgiiva7poy","_id":"ck9rr3hj70028sxmg9nurunzs"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hix000zsxmgn5tzd5aa","_id":"ck9rr3hj70029sxmgskyaiy4k"},{"post_id":"ck9rr3hi50007sxmggfye2q2a","tag_id":"ck9rr3hix0010sxmgvuorsz1i","_id":"ck9rr3hj7002asxmghviw8y49"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hix0011sxmgjd81ijd4","_id":"ck9rr3hj7002bsxmgb2ahpqin"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hix0012sxmgjm1dgy95","_id":"ck9rr3hj7002csxmgyv6gvisy"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hiy0013sxmgfe57r4o5","_id":"ck9rr3hj7002dsxmgi18fs6j4"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hiy0014sxmgawz0vd6l","_id":"ck9rr3hj7002esxmgm6je4b46"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hiy0015sxmgsi1tp3ti","_id":"ck9rr3hj7002fsxmgeuufrms3"},{"post_id":"ck9rr3hi60008sxmgfged66ie","tag_id":"ck9rr3hiy0016sxmgdksdt0yx","_id":"ck9rr3hj7002gsxmgf1umppkk"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiy0017sxmgs9i1jkln","_id":"ck9rr3hj7002hsxmgi67enzyu"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiz0018sxmg1m49rjm3","_id":"ck9rr3hj7002isxmgevo9r90e"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiz0019sxmgjvh6lb2y","_id":"ck9rr3hj8002jsxmgxjibrn6q"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiz001asxmg2j5bie7b","_id":"ck9rr3hj8002ksxmgjx3ixlpz"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiz001bsxmgzskxuvdg","_id":"ck9rr3hj8002lsxmg6triq2sm"},{"post_id":"ck9rr3hi70009sxmg39ypbwto","tag_id":"ck9rr3hiz001csxmgt2zvgym5","_id":"ck9rr3hj8002msxmg93zgxlu5"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hiz001dsxmgx9j2xkus","_id":"ck9rr3hj8002nsxmgbefi52d3"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hj0001esxmg82jh82s4","_id":"ck9rr3hj8002osxmgtmcxane5"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hiy0015sxmgsi1tp3ti","_id":"ck9rr3hj8002psxmggmb1f7bb"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hj0001gsxmgze6tk39s","_id":"ck9rr3hj8002qsxmgsnt0lzpd"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hj1001hsxmg3prd420v","_id":"ck9rr3hj8002rsxmgr9yy2ve5"},{"post_id":"ck9rr3hi8000asxmg4ipkcimd","tag_id":"ck9rr3hj1001isxmgkyt7zfzt","_id":"ck9rr3hj8002ssxmgbks4hu5u"},{"post_id":"ck9rr3hi9000bsxmgjzaoi83j","tag_id":"ck9rr3hj1001jsxmgdyi6otgs","_id":"ck9rr3hj8002tsxmglpzwy3vo"},{"post_id":"ck9rr3hi9000bsxmgjzaoi83j","tag_id":"ck9rr3hj1001ksxmgb3d76gcq","_id":"ck9rr3hj8002usxmgw986ah8e"},{"post_id":"ck9rr3hi9000csxmgcriqa0qp","tag_id":"ck9rr3hiz0019sxmgjvh6lb2y","_id":"ck9rr3hj8002vsxmgcbv9vvq6"},{"post_id":"ck9rr3hi9000csxmgcriqa0qp","tag_id":"ck9rr3hj2001msxmg7aduz3we","_id":"ck9rr3hj8002wsxmgrry03x7g"},{"post_id":"ck9rr3hia000dsxmgu2r6nhbg","tag_id":"ck9rr3hiz0019sxmgjvh6lb2y","_id":"ck9rr3hj8002xsxmg35olv8op"}],"Tag":[{"name":"angular","_id":"ck9rr3hio000fsxmgwuxqwgx7"},{"name":"linux","_id":"ck9rr3hip000hsxmg5dwuzpo1"},{"name":"windows","_id":"ck9rr3hiq000jsxmg20kvuwej"},{"name":"wsl","_id":"ck9rr3hiq000lsxmgjzi1x417"},{"name":"io","_id":"ck9rr3hit000nsxmgw82zu848"},{"name":"os","_id":"ck9rr3hiu000psxmghwrv5sae"},{"name":"java","_id":"ck9rr3hiv000rsxmgulfwwqom"},{"name":"unix","_id":"ck9rr3hiv000ssxmg9rd12n0d"},{"name":"wifi, openwrt","_id":"ck9rr3hiw000tsxmgct23yqjp"},{"name":"regex","_id":"ck9rr3hiw000usxmgzn0ixflb"},{"name":"parsing","_id":"ck9rr3hiw000vsxmgw2ki0fx7"},{"name":"lexing","_id":"ck9rr3hiw000wsxmgst5jzfg0"},{"name":"nfa","_id":"ck9rr3hix000xsxmgkvr52ngn"},{"name":"dfa","_id":"ck9rr3hix000ysxmgiiva7poy"},{"name":"algorithm","_id":"ck9rr3hix000zsxmgn5tzd5aa"},{"name":"python","_id":"ck9rr3hix0010sxmgvuorsz1i"},{"name":"monitoring","_id":"ck9rr3hix0011sxmgjd81ijd4"},{"name":"grpc","_id":"ck9rr3hix0012sxmgjm1dgy95"},{"name":"microservice","_id":"ck9rr3hiy0013sxmgfe57r4o5"},{"name":"kubernetes","_id":"ck9rr3hiy0014sxmgawz0vd6l"},{"name":"aws","_id":"ck9rr3hiy0015sxmgsi1tp3ti"},{"name":"xray","_id":"ck9rr3hiy0016sxmgdksdt0yx"},{"name":"http2","_id":"ck9rr3hiy0017sxmgs9i1jkln"},{"name":"browserify","_id":"ck9rr3hiz0018sxmg1m49rjm3"},{"name":"javascript","_id":"ck9rr3hiz0019sxmgjvh6lb2y"},{"name":"dependency-management","_id":"ck9rr3hiz001asxmg2j5bie7b"},{"name":"modular-design","_id":"ck9rr3hiz001bsxmgzskxuvdg"},{"name":"es6","_id":"ck9rr3hiz001csxmgt2zvgym5"},{"name":"opensource","_id":"ck9rr3hiz001dsxmgx9j2xkus"},{"name":"workflow","_id":"ck9rr3hj0001esxmg82jh82s4"},{"name":"airflow","_id":"ck9rr3hj0001gsxmgze6tk39s"},{"name":"azkaban","_id":"ck9rr3hj1001hsxmg3prd420v"},{"name":"review","_id":"ck9rr3hj1001isxmgkyt7zfzt"},{"name":"blog","_id":"ck9rr3hj1001jsxmgdyi6otgs"},{"name":"hexo","_id":"ck9rr3hj1001ksxmgb3d76gcq"},{"name":"frontend","_id":"ck9rr3hj2001msxmg7aduz3we"}]}}